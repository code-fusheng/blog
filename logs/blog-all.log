2020-03-19 11:14:51.363 INFO  [main]xyz.fusheng.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-UFFICG8 with PID 1520 (started by 25610 in G:\Code_fusheng\SpringBoot+Vue【个人博客】\blog)
2020-03-19 11:14:51.742 INFO  [main]xyz.fusheng.blog.BlogApplication.logStartupProfileInfo:651 -No active profile set, falling back to default profiles: default
2020-03-19 11:14:59.861 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'shiroConfig' of type [xyz.fusheng.blog.config.ShiroConfig$$EnhancerBySpringCGLIB$$889367e6] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:14:59.937 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mybatis-org.mybatis.spring.boot.autoconfigure.MybatisProperties' of type [org.mybatis.spring.boot.autoconfigure.MybatisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:14:59.955 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration' of type [org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$ab14a427] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:14:59.962 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure$$EnhancerBySpringCGLIB$$91ec4869] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:14:59.968 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-03-19 11:15:00.331 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:15:00.373 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration' of type [com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:15:00.420 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'statFilter' of type [com.alibaba.druid.filter.stat.StatFilter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:15:05.452 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:930 -{dataSource-1} inited
2020-03-19 11:15:05.453 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'dataSource' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceWrapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:15:05.585 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:15:06.314 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:15:06.323 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:15:06.333 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:15:06.339 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminMapper' of type [com.sun.proxy.$Proxy80] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:15:06.343 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminServiceImpl' of type [xyz.fusheng.blog.service.impl.AdminServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:15:06.345 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminRealm' of type [xyz.fusheng.blog.realm.AdminRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:15:06.578 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:15:06.618 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:15:07.151 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 8001 (http)
2020-03-19 11:15:07.162 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-8001"]
2020-03-19 11:15:07.163 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-03-19 11:15:07.163 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-03-19 11:15:07.274 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-03-19 11:15:07.275 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 14865 ms
2020-03-19 11:15:09.624 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-8001"]
2020-03-19 11:15:09.645 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Pausing ProtocolHandler ["http-nio-8001"]
2020-03-19 11:15:09.646 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Stopping service [Tomcat]
2020-03-19 11:15:09.652 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Stopping ProtocolHandler ["http-nio-8001"]
2020-03-19 11:15:09.653 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Destroying ProtocolHandler ["http-nio-8001"]
2020-03-19 11:15:09.656 INFO  [main]o.s.b.a.logging.ConditionEvaluationReportLoggingListener.logMessage:136 -

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-03-19 11:15:09.663 ERROR [main]o.s.boot.diagnostics.LoggingFailureAnalysisReporter.report:40 -

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8001 was already in use.

Action:

Identify and stop the process that's listening on port 8001 or configure this application to listen on another port.

2020-03-19 11:15:09.675 INFO  [main]com.alibaba.druid.pool.DruidDataSource.close:1825 -{dataSource-1} closed
2020-03-19 11:16:27.815 INFO  [main]xyz.fusheng.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-UFFICG8 with PID 13056 (started by 25610 in G:\Code_fusheng\SpringBoot+Vue【个人博客】\blog)
2020-03-19 11:16:27.821 INFO  [main]xyz.fusheng.blog.BlogApplication.logStartupProfileInfo:651 -No active profile set, falling back to default profiles: default
2020-03-19 11:16:30.673 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'shiroConfig' of type [xyz.fusheng.blog.config.ShiroConfig$$EnhancerBySpringCGLIB$$700f8ae8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:16:30.724 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mybatis-org.mybatis.spring.boot.autoconfigure.MybatisProperties' of type [org.mybatis.spring.boot.autoconfigure.MybatisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:16:30.739 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration' of type [org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$9290c729] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:16:30.745 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure$$EnhancerBySpringCGLIB$$79686b6b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:16:30.750 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-03-19 11:16:30.815 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:16:30.851 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration' of type [com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:16:30.912 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'statFilter' of type [com.alibaba.druid.filter.stat.StatFilter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:16:34.516 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:930 -{dataSource-1} inited
2020-03-19 11:16:34.518 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'dataSource' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceWrapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:16:34.675 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:16:35.425 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:16:35.444 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:16:35.461 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:16:35.469 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminMapper' of type [com.sun.proxy.$Proxy80] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:16:35.473 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminServiceImpl' of type [xyz.fusheng.blog.service.impl.AdminServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:16:35.476 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminRealm' of type [xyz.fusheng.blog.realm.AdminRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:16:35.536 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:16:35.578 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:16:35.923 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 8001 (http)
2020-03-19 11:16:35.934 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-8001"]
2020-03-19 11:16:35.936 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-03-19 11:16:35.937 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-03-19 11:16:36.045 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-03-19 11:16:36.046 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 8122 ms
2020-03-19 11:16:37.698 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-8001"]
2020-03-19 11:16:37.714 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Pausing ProtocolHandler ["http-nio-8001"]
2020-03-19 11:16:37.715 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Stopping service [Tomcat]
2020-03-19 11:16:37.720 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Stopping ProtocolHandler ["http-nio-8001"]
2020-03-19 11:16:37.720 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Destroying ProtocolHandler ["http-nio-8001"]
2020-03-19 11:16:37.724 INFO  [main]o.s.b.a.logging.ConditionEvaluationReportLoggingListener.logMessage:136 -

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-03-19 11:16:37.731 ERROR [main]o.s.boot.diagnostics.LoggingFailureAnalysisReporter.report:40 -

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8001 was already in use.

Action:

Identify and stop the process that's listening on port 8001 or configure this application to listen on another port.

2020-03-19 11:16:37.743 INFO  [main]com.alibaba.druid.pool.DruidDataSource.close:1825 -{dataSource-1} closed
2020-03-19 11:19:27.869 INFO  [main]xyz.fusheng.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-UFFICG8 with PID 17896 (started by 25610 in G:\Code_fusheng\SpringBoot+Vue【个人博客】\blog)
2020-03-19 11:19:27.878 INFO  [main]xyz.fusheng.blog.BlogApplication.logStartupProfileInfo:651 -No active profile set, falling back to default profiles: default
2020-03-19 11:19:29.488 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'shiroConfig' of type [xyz.fusheng.blog.config.ShiroConfig$$EnhancerBySpringCGLIB$$f7251269] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:19:29.547 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mybatis-org.mybatis.spring.boot.autoconfigure.MybatisProperties' of type [org.mybatis.spring.boot.autoconfigure.MybatisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:19:29.562 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration' of type [org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$19a64eaa] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:19:29.567 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure$$EnhancerBySpringCGLIB$$7df2ec] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:19:29.572 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-03-19 11:19:29.639 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:19:29.662 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration' of type [com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:19:29.688 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'statFilter' of type [com.alibaba.druid.filter.stat.StatFilter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:19:33.334 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:930 -{dataSource-1} inited
2020-03-19 11:19:33.335 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'dataSource' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceWrapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:19:33.424 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:19:33.863 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:19:33.871 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:19:33.880 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:19:33.885 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminMapper' of type [com.sun.proxy.$Proxy80] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:19:33.888 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminServiceImpl' of type [xyz.fusheng.blog.service.impl.AdminServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:19:33.889 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminRealm' of type [xyz.fusheng.blog.realm.AdminRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:19:33.929 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:19:33.959 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:19:34.301 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 8001 (http)
2020-03-19 11:19:34.312 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-8001"]
2020-03-19 11:19:34.313 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-03-19 11:19:34.314 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-03-19 11:19:34.419 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-03-19 11:19:34.419 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 6356 ms
2020-03-19 11:19:36.130 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-8001"]
2020-03-19 11:19:36.183 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 8001 (http) with context path ''
2020-03-19 11:19:36.187 INFO  [main]xyz.fusheng.blog.BlogApplication.logStarted:61 -Started BlogApplication in 9.602 seconds (JVM running for 11.715)
2020-03-19 11:19:45.596 INFO  [http-nio-8001-exec-1]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-19 11:19:45.597 INFO  [http-nio-8001-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-03-19 11:19:45.622 INFO  [http-nio-8001-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 25 ms
2020-03-19 11:20:10.890 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /admin/login
2020-03-19 11:20:10.892 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 11:20:10.893 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 11:20:10.953 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.AdminController.login
2020-03-19 11:20:10.953 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]
2020-03-19 11:20:11.557 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 667
2020-03-19 11:20:11.715 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"token":"35E78C598B96DBCADAF232C4B2802C6B"},"msg":"操作成功！"}
2020-03-19 11:20:11.937 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /admin/info
2020-03-19 11:20:11.938 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 11:20:11.939 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 11:20:11.939 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.AdminController.getLoginInfo
2020-03-19 11:20:11.940 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 11:20:11.940 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 3
2020-03-19 11:20:11.948 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"name":"张浩","password":"******","signature":"浮生若梦,为欢几何!","username":"admin"},"msg":"操作成功！"}
2020-03-19 11:20:12.186 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /type/getList
2020-03-19 11:20:12.187 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 11:20:12.188 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 11:20:12.189 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.TypeController.getList
2020-03-19 11:20:12.190 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 11:20:12.288 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 102
2020-03-19 11:20:12.291 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":[],"msg":"操作成功！"}
2020-03-19 11:20:14.940 WARN  [http-nio-8001-exec-9]org.springframework.web.servlet.PageNotFound.noHandlerFound:1251 -No mapping for GET /sockjs-node/info
2020-03-19 11:20:14.968 ERROR [http-nio-8001-exec-9]xyz.fusheng.blog.advice.BlogExceptionAdvice.exceptionHandler:29 -统一异常处理
xyz.fusheng.blog.exception.BlogException: 当前账号未登录！
	at xyz.fusheng.blog.interceptor.LoginInterceptor.preHandle(LoginInterceptor.java:36)
	at org.springframework.web.servlet.HandlerExecutionChain.applyPreHandle(HandlerExecutionChain.java:141)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1035)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:175)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-03-19 11:20:23.062 WARN  [http-nio-8001-exec-10]org.springframework.web.servlet.PageNotFound.noHandlerFound:1251 -No mapping for GET /sockjs-node/info
2020-03-19 11:20:23.065 ERROR [http-nio-8001-exec-10]xyz.fusheng.blog.advice.BlogExceptionAdvice.exceptionHandler:29 -统一异常处理
xyz.fusheng.blog.exception.BlogException: 当前账号未登录！
	at xyz.fusheng.blog.interceptor.LoginInterceptor.preHandle(LoginInterceptor.java:36)
	at org.springframework.web.servlet.HandlerExecutionChain.applyPreHandle(HandlerExecutionChain.java:141)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1035)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:175)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-03-19 11:20:32.713 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /admin/info
2020-03-19 11:20:32.713 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 11:20:32.714 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 11:20:32.715 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.AdminController.getLoginInfo
2020-03-19 11:20:32.716 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 11:20:32.716 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 4
2020-03-19 11:20:32.717 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"name":"张浩","password":"******","signature":"浮生若梦,为欢几何!","username":"admin"},"msg":"操作成功！"}
2020-03-19 11:20:32.811 WARN  [http-nio-8001-exec-2]org.springframework.web.servlet.PageNotFound.noHandlerFound:1251 -No mapping for GET /sockjs-node/info
2020-03-19 11:20:32.814 ERROR [http-nio-8001-exec-2]xyz.fusheng.blog.advice.BlogExceptionAdvice.exceptionHandler:29 -统一异常处理
xyz.fusheng.blog.exception.BlogException: 当前账号未登录！
	at xyz.fusheng.blog.interceptor.LoginInterceptor.preHandle(LoginInterceptor.java:36)
	at org.springframework.web.servlet.HandlerExecutionChain.applyPreHandle(HandlerExecutionChain.java:141)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1035)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:175)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-03-19 11:20:33.089 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /type/getList
2020-03-19 11:20:33.091 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 11:20:33.092 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 11:20:33.093 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.TypeController.getList
2020-03-19 11:20:33.093 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 11:20:33.164 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 75
2020-03-19 11:20:33.165 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":[],"msg":"操作成功！"}
2020-03-19 11:20:33.864 WARN  [http-nio-8001-exec-3]org.springframework.web.servlet.PageNotFound.noHandlerFound:1251 -No mapping for GET /sockjs-node/info
2020-03-19 11:20:33.868 ERROR [http-nio-8001-exec-3]xyz.fusheng.blog.advice.BlogExceptionAdvice.exceptionHandler:29 -统一异常处理
xyz.fusheng.blog.exception.BlogException: 当前账号未登录！
	at xyz.fusheng.blog.interceptor.LoginInterceptor.preHandle(LoginInterceptor.java:36)
	at org.springframework.web.servlet.HandlerExecutionChain.applyPreHandle(HandlerExecutionChain.java:141)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1035)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:175)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-03-19 11:20:34.896 WARN  [http-nio-8001-exec-6]org.springframework.web.servlet.PageNotFound.noHandlerFound:1251 -No mapping for GET /sockjs-node/info
2020-03-19 11:20:34.899 ERROR [http-nio-8001-exec-6]xyz.fusheng.blog.advice.BlogExceptionAdvice.exceptionHandler:29 -统一异常处理
xyz.fusheng.blog.exception.BlogException: 当前账号未登录！
	at xyz.fusheng.blog.interceptor.LoginInterceptor.preHandle(LoginInterceptor.java:36)
	at org.springframework.web.servlet.HandlerExecutionChain.applyPreHandle(HandlerExecutionChain.java:141)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1035)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:175)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-03-19 11:20:36.927 WARN  [http-nio-8001-exec-5]org.springframework.web.servlet.PageNotFound.noHandlerFound:1251 -No mapping for GET /sockjs-node/info
2020-03-19 11:20:36.930 ERROR [http-nio-8001-exec-5]xyz.fusheng.blog.advice.BlogExceptionAdvice.exceptionHandler:29 -统一异常处理
xyz.fusheng.blog.exception.BlogException: 当前账号未登录！
	at xyz.fusheng.blog.interceptor.LoginInterceptor.preHandle(LoginInterceptor.java:36)
	at org.springframework.web.servlet.HandlerExecutionChain.applyPreHandle(HandlerExecutionChain.java:141)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1035)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:175)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-03-19 11:20:41.022 WARN  [http-nio-8001-exec-7]org.springframework.web.servlet.PageNotFound.noHandlerFound:1251 -No mapping for GET /sockjs-node/info
2020-03-19 11:20:41.027 ERROR [http-nio-8001-exec-7]xyz.fusheng.blog.advice.BlogExceptionAdvice.exceptionHandler:29 -统一异常处理
xyz.fusheng.blog.exception.BlogException: 当前账号未登录！
	at xyz.fusheng.blog.interceptor.LoginInterceptor.preHandle(LoginInterceptor.java:36)
	at org.springframework.web.servlet.HandlerExecutionChain.applyPreHandle(HandlerExecutionChain.java:141)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1035)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:175)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-03-19 11:20:48.494 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /type/listBack
2020-03-19 11:20:48.496 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 11:20:48.496 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 11:20:48.497 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.TypeController.list
2020-03-19 11:20:48.497 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 11:20:48.564 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 70
2020-03-19 11:20:48.565 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":[],"msg":"操作成功！"}
2020-03-19 11:20:49.117 WARN  [http-nio-8001-exec-9]org.springframework.web.servlet.PageNotFound.noHandlerFound:1251 -No mapping for GET /sockjs-node/info
2020-03-19 11:20:49.121 ERROR [http-nio-8001-exec-9]xyz.fusheng.blog.advice.BlogExceptionAdvice.exceptionHandler:29 -统一异常处理
xyz.fusheng.blog.exception.BlogException: 当前账号未登录！
	at xyz.fusheng.blog.interceptor.LoginInterceptor.preHandle(LoginInterceptor.java:36)
	at org.springframework.web.servlet.HandlerExecutionChain.applyPreHandle(HandlerExecutionChain.java:141)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1035)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:175)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-03-19 11:21:05.171 WARN  [http-nio-8001-exec-10]org.springframework.web.servlet.PageNotFound.noHandlerFound:1251 -No mapping for GET /sockjs-node/info
2020-03-19 11:21:05.173 ERROR [http-nio-8001-exec-10]xyz.fusheng.blog.advice.BlogExceptionAdvice.exceptionHandler:29 -统一异常处理
xyz.fusheng.blog.exception.BlogException: 当前账号未登录！
	at xyz.fusheng.blog.interceptor.LoginInterceptor.preHandle(LoginInterceptor.java:36)
	at org.springframework.web.servlet.HandlerExecutionChain.applyPreHandle(HandlerExecutionChain.java:141)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1035)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:175)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-03-19 11:21:37.239 WARN  [http-nio-8001-exec-2]org.springframework.web.servlet.PageNotFound.noHandlerFound:1251 -No mapping for GET /sockjs-node/info
2020-03-19 11:21:37.241 ERROR [http-nio-8001-exec-2]xyz.fusheng.blog.advice.BlogExceptionAdvice.exceptionHandler:29 -统一异常处理
xyz.fusheng.blog.exception.BlogException: 当前账号未登录！
	at xyz.fusheng.blog.interceptor.LoginInterceptor.preHandle(LoginInterceptor.java:36)
	at org.springframework.web.servlet.HandlerExecutionChain.applyPreHandle(HandlerExecutionChain.java:141)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1035)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:175)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-03-19 11:25:08.107 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /admin/login
2020-03-19 11:25:08.129 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 11:25:08.130 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 11:25:08.132 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.AdminController.login
2020-03-19 11:25:08.133 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]
2020-03-19 11:25:10.270 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 2163
2020-03-19 11:25:10.274 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"token":"6B511FC72A2878931D2A39D95F6CF981"},"msg":"操作成功！"}
2020-03-19 11:25:10.419 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /admin/info
2020-03-19 11:25:10.420 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 11:25:10.421 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 11:25:10.422 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.AdminController.getLoginInfo
2020-03-19 11:25:10.422 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 11:25:10.423 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 4
2020-03-19 11:25:10.424 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"name":"张浩","password":"******","signature":"浮生若梦,为欢几何!","username":"admin"},"msg":"操作成功！"}
2020-03-19 11:25:10.778 WARN  [http-nio-8001-exec-9]org.springframework.web.servlet.PageNotFound.noHandlerFound:1251 -No mapping for GET /sockjs-node/info
2020-03-19 11:25:10.783 ERROR [http-nio-8001-exec-9]xyz.fusheng.blog.advice.BlogExceptionAdvice.exceptionHandler:29 -统一异常处理
xyz.fusheng.blog.exception.BlogException: 当前账号未登录！
	at xyz.fusheng.blog.interceptor.LoginInterceptor.preHandle(LoginInterceptor.java:36)
	at org.springframework.web.servlet.HandlerExecutionChain.applyPreHandle(HandlerExecutionChain.java:141)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1035)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:175)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-03-19 11:25:11.033 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /type/getList
2020-03-19 11:25:11.035 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 11:25:11.035 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 11:25:11.036 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.TypeController.getList
2020-03-19 11:25:11.037 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 11:25:11.124 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 91
2020-03-19 11:25:11.125 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":[],"msg":"操作成功！"}
2020-03-19 11:25:18.840 WARN  [http-nio-8001-exec-2]org.springframework.web.servlet.PageNotFound.noHandlerFound:1251 -No mapping for GET /sockjs-node/info
2020-03-19 11:25:18.843 ERROR [http-nio-8001-exec-2]xyz.fusheng.blog.advice.BlogExceptionAdvice.exceptionHandler:29 -统一异常处理
xyz.fusheng.blog.exception.BlogException: 当前账号未登录！
	at xyz.fusheng.blog.interceptor.LoginInterceptor.preHandle(LoginInterceptor.java:36)
	at org.springframework.web.servlet.HandlerExecutionChain.applyPreHandle(HandlerExecutionChain.java:141)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1035)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:175)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-03-19 11:25:34.870 WARN  [http-nio-8001-exec-1]org.springframework.web.servlet.PageNotFound.noHandlerFound:1251 -No mapping for GET /sockjs-node/info
2020-03-19 11:25:34.873 ERROR [http-nio-8001-exec-1]xyz.fusheng.blog.advice.BlogExceptionAdvice.exceptionHandler:29 -统一异常处理
xyz.fusheng.blog.exception.BlogException: 当前账号未登录！
	at xyz.fusheng.blog.interceptor.LoginInterceptor.preHandle(LoginInterceptor.java:36)
	at org.springframework.web.servlet.HandlerExecutionChain.applyPreHandle(HandlerExecutionChain.java:141)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1035)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:175)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-03-19 11:25:42.359 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /type/listBack
2020-03-19 11:25:42.360 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 11:25:42.360 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 11:25:42.361 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.TypeController.list
2020-03-19 11:25:42.362 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 11:25:42.443 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 84
2020-03-19 11:25:42.446 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":[],"msg":"操作成功！"}
2020-03-19 11:26:06.543 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /type/save
2020-03-19 11:26:06.544 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 11:26:06.544 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 11:26:06.545 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.TypeController.save
2020-03-19 11:26:06.546 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Type(typeId=null, typeName=个人博客开发文档, typeBlogCount=null, enable=null, deleted=null)]
2020-03-19 11:26:06.744 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 201
2020-03-19 11:26:06.745 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"msg":"添加成功!"}
2020-03-19 11:26:06.888 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /type/listBack
2020-03-19 11:26:06.889 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 11:26:06.890 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 11:26:06.891 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.TypeController.list
2020-03-19 11:26:06.892 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 11:26:06.913 WARN  [http-nio-8001-exec-5]org.springframework.web.servlet.PageNotFound.noHandlerFound:1251 -No mapping for GET /sockjs-node/info
2020-03-19 11:26:06.918 ERROR [http-nio-8001-exec-5]xyz.fusheng.blog.advice.BlogExceptionAdvice.exceptionHandler:29 -统一异常处理
xyz.fusheng.blog.exception.BlogException: 当前账号未登录！
	at xyz.fusheng.blog.interceptor.LoginInterceptor.preHandle(LoginInterceptor.java:36)
	at org.springframework.web.servlet.HandlerExecutionChain.applyPreHandle(HandlerExecutionChain.java:141)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1035)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:175)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-03-19 11:26:06.976 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 88
2020-03-19 11:26:06.990 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":13,"typeName":"个人博客开发文档"}],"msg":"操作成功！"}
2020-03-19 11:26:35.957 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /type/save
2020-03-19 11:26:35.957 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 11:26:35.958 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 11:26:35.958 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.TypeController.save
2020-03-19 11:26:35.958 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Type(typeId=null, typeName=Spring 专题, typeBlogCount=null, enable=null, deleted=null)]
2020-03-19 11:26:36.186 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 229
2020-03-19 11:26:36.187 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"msg":"添加成功!"}
2020-03-19 11:26:36.332 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /type/listBack
2020-03-19 11:26:36.333 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 11:26:36.333 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 11:26:36.334 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.TypeController.list
2020-03-19 11:26:36.335 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 11:26:36.419 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 87
2020-03-19 11:26:36.421 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":13,"typeName":"个人博客开发文档"},{"enable":1,"typeBlogCount":0,"typeId":14,"typeName":"Spring 专题"}],"msg":"操作成功！"}
2020-03-19 11:27:00.374 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /type/save
2020-03-19 11:27:00.375 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 11:27:00.376 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 11:27:00.377 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.TypeController.save
2020-03-19 11:27:00.377 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Type(typeId=null, typeName=Spring Boot 专题, typeBlogCount=null, enable=null, deleted=null)]
2020-03-19 11:27:00.586 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 212
2020-03-19 11:27:00.586 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"msg":"添加成功!"}
2020-03-19 11:27:00.736 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /type/listBack
2020-03-19 11:27:00.737 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 11:27:00.738 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 11:27:00.739 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.TypeController.list
2020-03-19 11:27:00.739 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 11:27:00.822 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 86
2020-03-19 11:27:00.823 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":13,"typeName":"个人博客开发文档"},{"enable":1,"typeBlogCount":0,"typeId":14,"typeName":"Spring 专题"},{"enable":1,"typeBlogCount":0,"typeId":15,"typeName":"Spring Boot 专题"}],"msg":"操作成功！"}
2020-03-19 11:27:11.031 WARN  [http-nio-8001-exec-1]org.springframework.web.servlet.PageNotFound.noHandlerFound:1251 -No mapping for GET /sockjs-node/info
2020-03-19 11:27:11.033 ERROR [http-nio-8001-exec-1]xyz.fusheng.blog.advice.BlogExceptionAdvice.exceptionHandler:29 -统一异常处理
xyz.fusheng.blog.exception.BlogException: 当前账号未登录！
	at xyz.fusheng.blog.interceptor.LoginInterceptor.preHandle(LoginInterceptor.java:36)
	at org.springframework.web.servlet.HandlerExecutionChain.applyPreHandle(HandlerExecutionChain.java:141)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1035)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:175)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-03-19 11:27:46.468 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /type/save
2020-03-19 11:27:46.469 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 11:27:46.470 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 11:27:46.471 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.TypeController.save
2020-03-19 11:27:46.472 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Type(typeId=null, typeName=Spring Cloud 专题, typeBlogCount=null, enable=null, deleted=null)]
2020-03-19 11:27:46.667 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 199
2020-03-19 11:27:46.668 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"msg":"添加成功!"}
2020-03-19 11:27:46.802 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /type/listBack
2020-03-19 11:27:46.803 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 11:27:46.803 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 11:27:46.804 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.TypeController.list
2020-03-19 11:27:46.805 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 11:27:46.885 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 83
2020-03-19 11:27:46.886 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":13,"typeName":"个人博客开发文档"},{"enable":1,"typeBlogCount":0,"typeId":14,"typeName":"Spring 专题"},{"enable":1,"typeBlogCount":0,"typeId":15,"typeName":"Spring Boot 专题"},{"enable":1,"typeBlogCount":0,"typeId":16,"typeName":"Spring Cloud 专题"}],"msg":"操作成功！"}
2020-03-19 11:28:06.518 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /type/save
2020-03-19 11:28:06.519 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 11:28:06.520 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 11:28:06.521 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.TypeController.save
2020-03-19 11:28:06.521 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Type(typeId=null, typeName=MyBatis 专题, typeBlogCount=null, enable=null, deleted=null)]
2020-03-19 11:28:06.755 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 237
2020-03-19 11:28:06.755 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"msg":"添加成功!"}
2020-03-19 11:28:06.903 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /type/listBack
2020-03-19 11:28:06.904 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 11:28:06.904 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 11:28:06.905 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.TypeController.list
2020-03-19 11:28:06.905 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 11:28:06.988 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 85
2020-03-19 11:28:06.989 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":13,"typeName":"个人博客开发文档"},{"enable":1,"typeBlogCount":0,"typeId":14,"typeName":"Spring 专题"},{"enable":1,"typeBlogCount":0,"typeId":15,"typeName":"Spring Boot 专题"},{"enable":1,"typeBlogCount":0,"typeId":16,"typeName":"Spring Cloud 专题"},{"enable":1,"typeBlogCount":0,"typeId":17,"typeName":"MyBatis 专题"}],"msg":"操作成功！"}
2020-03-19 11:28:44.475 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /type/save
2020-03-19 11:28:44.476 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 11:28:44.476 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 11:28:44.477 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.TypeController.save
2020-03-19 11:28:44.477 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Type(typeId=null, typeName=Linux 专题, typeBlogCount=null, enable=null, deleted=null)]
2020-03-19 11:28:44.673 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 198
2020-03-19 11:28:44.673 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"msg":"添加成功!"}
2020-03-19 11:28:44.810 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /type/listBack
2020-03-19 11:28:44.810 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 11:28:44.811 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 11:28:44.813 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.TypeController.list
2020-03-19 11:28:44.813 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 11:28:44.903 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 93
2020-03-19 11:28:44.904 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":13,"typeName":"个人博客开发文档"},{"enable":1,"typeBlogCount":0,"typeId":14,"typeName":"Spring 专题"},{"enable":1,"typeBlogCount":0,"typeId":15,"typeName":"Spring Boot 专题"},{"enable":1,"typeBlogCount":0,"typeId":16,"typeName":"Spring Cloud 专题"},{"enable":1,"typeBlogCount":0,"typeId":17,"typeName":"MyBatis 专题"},{"enable":1,"typeBlogCount":0,"typeId":18,"typeName":"Linux 专题"}],"msg":"操作成功！"}
2020-03-19 11:29:19.114 WARN  [http-nio-8001-exec-10]org.springframework.web.servlet.PageNotFound.noHandlerFound:1251 -No mapping for GET /sockjs-node/info
2020-03-19 11:29:19.118 ERROR [http-nio-8001-exec-10]xyz.fusheng.blog.advice.BlogExceptionAdvice.exceptionHandler:29 -统一异常处理
xyz.fusheng.blog.exception.BlogException: 当前账号未登录！
	at xyz.fusheng.blog.interceptor.LoginInterceptor.preHandle(LoginInterceptor.java:36)
	at org.springframework.web.servlet.HandlerExecutionChain.applyPreHandle(HandlerExecutionChain.java:141)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1035)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:175)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-03-19 11:29:24.148 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /type/save
2020-03-19 11:29:24.148 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 11:29:24.149 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 11:29:24.150 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.TypeController.save
2020-03-19 11:29:24.150 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Type(typeId=null, typeName=Security 专题, typeBlogCount=null, enable=null, deleted=null)]
2020-03-19 11:29:24.346 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 199
2020-03-19 11:29:24.347 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"msg":"添加成功!"}
2020-03-19 11:29:24.482 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /type/listBack
2020-03-19 11:29:24.482 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 11:29:24.483 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 11:29:24.483 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.TypeController.list
2020-03-19 11:29:24.484 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 11:29:24.572 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 90
2020-03-19 11:29:24.573 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":13,"typeName":"个人博客开发文档"},{"enable":1,"typeBlogCount":0,"typeId":14,"typeName":"Spring 专题"},{"enable":1,"typeBlogCount":0,"typeId":15,"typeName":"Spring Boot 专题"},{"enable":1,"typeBlogCount":0,"typeId":16,"typeName":"Spring Cloud 专题"},{"enable":1,"typeBlogCount":0,"typeId":17,"typeName":"MyBatis 专题"},{"enable":1,"typeBlogCount":0,"typeId":18,"typeName":"Linux 专题"},{"enable":1,"typeBlogCount":0,"typeId":19,"typeName":"Security 专题"}],"msg":"操作成功！"}
2020-03-19 11:29:49.028 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /type/save
2020-03-19 11:29:49.028 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 11:29:49.029 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 11:29:49.030 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.TypeController.save
2020-03-19 11:29:49.030 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Type(typeId=null, typeName=Docker 专题, typeBlogCount=null, enable=null, deleted=null)]
2020-03-19 11:29:49.232 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 204
2020-03-19 11:29:49.233 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"msg":"添加成功!"}
2020-03-19 11:29:49.368 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /type/listBack
2020-03-19 11:29:49.369 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 11:29:49.370 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 11:29:49.370 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.TypeController.list
2020-03-19 11:29:49.370 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 11:29:49.455 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 87
2020-03-19 11:29:49.456 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":13,"typeName":"个人博客开发文档"},{"enable":1,"typeBlogCount":0,"typeId":14,"typeName":"Spring 专题"},{"enable":1,"typeBlogCount":0,"typeId":15,"typeName":"Spring Boot 专题"},{"enable":1,"typeBlogCount":0,"typeId":16,"typeName":"Spring Cloud 专题"},{"enable":1,"typeBlogCount":0,"typeId":17,"typeName":"MyBatis 专题"},{"enable":1,"typeBlogCount":0,"typeId":18,"typeName":"Linux 专题"},{"enable":1,"typeBlogCount":0,"typeId":19,"typeName":"Security 专题"},{"enable":1,"typeBlogCount":0,"typeId":20,"typeName":"Docker 专题"}],"msg":"操作成功！"}
2020-03-19 11:29:55.555 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /blog/getByPage
2020-03-19 11:29:55.556 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 11:29:55.557 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 11:29:55.558 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.BlogController.getByPage
2020-03-19 11:29:55.559 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, index=0, list=[], params={}, sortColumn=, sortMethod=asc)]
2020-03-19 11:29:55.877 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 322
2020-03-19 11:29:55.886 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"index":0,"list":[],"pageSize":10,"params":{},"sortColumn":"","sortMethod":"asc","totalCount":0,"totalPage":0},"msg":"操作成功！"}
2020-03-19 11:30:39.936 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /type/listBack
2020-03-19 11:30:39.937 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 11:30:39.937 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 11:30:39.938 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.TypeController.list
2020-03-19 11:30:39.939 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 11:30:40.021 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 85
2020-03-19 11:30:40.023 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":13,"typeName":"个人博客开发文档"},{"enable":1,"typeBlogCount":0,"typeId":14,"typeName":"Spring 专题"},{"enable":1,"typeBlogCount":0,"typeId":15,"typeName":"Spring Boot 专题"},{"enable":1,"typeBlogCount":0,"typeId":16,"typeName":"Spring Cloud 专题"},{"enable":1,"typeBlogCount":0,"typeId":17,"typeName":"MyBatis 专题"},{"enable":1,"typeBlogCount":0,"typeId":18,"typeName":"Linux 专题"},{"enable":1,"typeBlogCount":0,"typeId":19,"typeName":"Security 专题"},{"enable":1,"typeBlogCount":0,"typeId":20,"typeName":"Docker 专题"}],"msg":"操作成功！"}
2020-03-19 11:30:42.065 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /blog/getByPage
2020-03-19 11:30:42.065 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 11:30:42.066 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 11:30:42.066 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.BlogController.getByPage
2020-03-19 11:30:42.067 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, index=0, list=[], params={}, sortColumn=, sortMethod=asc)]
2020-03-19 11:30:42.281 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 216
2020-03-19 11:30:42.282 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"index":0,"list":[],"pageSize":10,"params":{},"sortColumn":"","sortMethod":"asc","totalCount":0,"totalPage":0},"msg":"操作成功！"}
2020-03-19 11:31:33.208 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /about/getByPage
2020-03-19 11:31:33.211 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 11:31:33.212 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 11:31:33.213 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.AboutController.getByPage
2020-03-19 11:31:33.214 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, index=0, list=[], params={}, sortColumn=, sortMethod=asc)]
2020-03-19 11:31:33.383 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 175
2020-03-19 11:31:33.387 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"index":0,"list":[{"aboutId":1,"aboutRead":5,"aboutTitle":"修改更新关于我的信息","createdTime":"2020-03-14 10:46:26","enable":1,"updateTime":"2020-03-14 11:00:06"},{"aboutId":2,"aboutRead":0,"aboutTitle":"测试关于我的信息1","createdTime":"2020-03-14 10:47:18","enable":0,"updateTime":"2020-03-14 10:47:18"},{"aboutId":3,"aboutRead":0,"aboutTitle":"测试关于我的信息2","createdTime":"2020-03-14 10:47:24","enable":0,"updateTime":"2020-03-14 10:47:24"}],"pageSize":10,"params":{},"sortColumn":"","sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}
2020-03-19 11:31:39.482 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /admin/getAdmin
2020-03-19 11:31:39.482 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 11:31:39.483 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 11:31:39.483 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.AdminController.getAdmin
2020-03-19 11:31:39.484 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 11:31:39.566 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 84
2020-03-19 11:31:39.566 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"id":1,"name":"张浩","signature":"浮生若梦,为欢几何!","username":"admin"},"msg":"操作成功！"}
2020-03-19 11:31:43.128 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /user/getByPage
2020-03-19 11:31:43.129 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 11:31:43.129 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 11:31:43.130 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.UserController.getByPage
2020-03-19 11:31:43.131 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, index=0, list=[], params={}, sortColumn=, sortMethod=asc)]
2020-03-19 11:31:43.306 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 178
2020-03-19 11:31:43.317 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"index":0,"list":[{"createdTime":"2020-03-14 21:16:19","name":"测试用户2","nickname":"测试用户2","sex":1,"updateTime":"2020-03-14 21:16:19","userEmail":"0000000000qq.com","userId":5,"username":"user2"},{"createdTime":"2020-03-14 21:16:41","name":"测试用户3","nickname":"测试用户3","sex":2,"updateTime":"2020-03-14 21:16:41","userEmail":"0000000000qq.com","userId":6,"username":"user3"},{"createdTime":"2020-03-14 21:17:59","name":"测试用户4","nickname":"测试用户4","sex":2,"updateTime":"2020-03-14 21:17:59","userEmail":"222222222qq.com","userId":7,"username":"user4"},{"createdTime":"2020-03-14 21:23:51","name":"测试用户4","nickname":"测试用户4","sex":2,"updateTime":"2020-03-14 21:23:51","userEmail":"222222222qq.com","userId":8,"username":"user4"}],"pageSize":10,"params":{},"sortColumn":"","sortMethod":"asc","totalCount":4,"totalPage":1},"msg":"操作成功！"}
2020-03-19 11:31:57.808 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /user/resetPwd
2020-03-19 11:31:57.810 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : PUT
2020-03-19 11:31:57.811 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 11:31:57.812 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.UserController.resetPwd
2020-03-19 11:31:57.813 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[[]]
2020-03-19 11:31:58.322 ERROR [http-nio-8001-exec-1]o.a.c.c.C.[Tomcat].[localhost].[/].[dispatcherServlet].log:175 -Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'and deleted = 0' at line 6
### The error may exist in file [G:\Code_fusheng\SpringBoot+Vue【个人博客】\blog\target\classes\mapper\UserMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select         user_id, version         from bl_user         where user_id in                   and deleted = 0
### Cause: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'and deleted = 0' at line 6
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'and deleted = 0' at line 6] with root cause
java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'and deleted = 0' at line 6
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:953)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:370)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3409)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3407)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:498)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:63)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:326)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at sun.reflect.GeneratedMethodAccessor89.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy79.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:230)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:139)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:76)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy97.getByIds(Unknown Source)
	at xyz.fusheng.blog.service.impl.UserServiceImpl.resetIds(UserServiceImpl.java:67)
	at xyz.fusheng.blog.controller.UserController.resetPwd(UserController.java:111)
	at xyz.fusheng.blog.controller.UserController$$FastClassBySpringCGLIB$$9da0a96.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at sun.reflect.GeneratedMethodAccessor67.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at xyz.fusheng.blog.controller.UserController$$EnhancerBySpringCGLIB$$1f7bdb5a.resetPwd(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:920)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:663)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-03-19 11:31:58.327 ERROR [http-nio-8001-exec-1]o.a.c.c.C.[Tomcat].[localhost].[/].[dispatcherServlet].log:175 -Servlet.service() for servlet [dispatcherServlet] threw exception
org.apache.shiro.UnavailableSecurityManagerException: No SecurityManager accessible to the calling code, either bound to the org.apache.shiro.util.ThreadContext or as a vm static singleton.  This is an invalid application configuration.
	at org.apache.shiro.SecurityUtils.getSecurityManager(SecurityUtils.java:123)
	at org.apache.shiro.subject.Subject$Builder.<init>(Subject.java:627)
	at org.apache.shiro.SecurityUtils.getSubject(SecurityUtils.java:56)
	at xyz.fusheng.blog.utils.ShiroUtils.getLoginUser(ShiroUtils.java:29)
	at xyz.fusheng.blog.interceptor.LoginInterceptor.preHandle(LoginInterceptor.java:30)
	at org.springframework.web.servlet.HandlerExecutionChain.applyPreHandle(HandlerExecutionChain.java:141)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1035)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:920)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:663)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-03-19 11:31:58.329 ERROR [http-nio-8001-exec-1]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].log:175 -Exception Processing ErrorPage[errorCode=0, location=/error]
org.springframework.web.util.NestedServletException: Request processing failed; nested exception is org.apache.shiro.UnavailableSecurityManagerException: No SecurityManager accessible to the calling code, either bound to the org.apache.shiro.util.ThreadContext or as a vm static singleton.  This is an invalid application configuration.
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:920)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:663)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.shiro.UnavailableSecurityManagerException: No SecurityManager accessible to the calling code, either bound to the org.apache.shiro.util.ThreadContext or as a vm static singleton.  This is an invalid application configuration.
	at org.apache.shiro.SecurityUtils.getSecurityManager(SecurityUtils.java:123)
	at org.apache.shiro.subject.Subject$Builder.<init>(Subject.java:627)
	at org.apache.shiro.SecurityUtils.getSubject(SecurityUtils.java:56)
	at xyz.fusheng.blog.utils.ShiroUtils.getLoginUser(ShiroUtils.java:29)
	at xyz.fusheng.blog.interceptor.LoginInterceptor.preHandle(LoginInterceptor.java:30)
	at org.springframework.web.servlet.HandlerExecutionChain.applyPreHandle(HandlerExecutionChain.java:141)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1035)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	... 26 common frames omitted
2020-03-19 11:32:00.031 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /user/getByPage
2020-03-19 11:32:00.032 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 11:32:00.033 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 11:32:00.033 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.UserController.getByPage
2020-03-19 11:32:00.034 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=4, index=0, list=[User(userId=5, username=user2, password=null, name=测试用户2, sex=1, header=null, nickname=测试用户2, userEmail=0000000000qq.com, createdTime=2020-03-14 21:16:19, updateTime=2020-03-14 21:16:19, version=null, deleted=null), User(userId=6, username=user3, password=null, name=测试用户3, sex=2, header=null, nickname=测试用户3, userEmail=0000000000qq.com, createdTime=2020-03-14 21:16:41, updateTime=2020-03-14 21:16:41, version=null, deleted=null), User(userId=7, username=user4, password=null, name=测试用户4, sex=2, header=null, nickname=测试用户4, userEmail=222222222qq.com, createdTime=2020-03-14 21:17:59, updateTime=2020-03-14 21:17:59, version=null, deleted=null), User(userId=8, username=user4, password=null, name=测试用户4, sex=2, header=null, nickname=测试用户4, userEmail=222222222qq.com, createdTime=2020-03-14 21:23:51, updateTime=2020-03-14 21:23:51, version=null, deleted=null)], params={}, sortColumn=, sortMethod=asc)]
2020-03-19 11:32:00.186 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 155
2020-03-19 11:32:00.187 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"index":0,"list":[{"createdTime":"2020-03-14 21:16:19","name":"测试用户2","nickname":"测试用户2","sex":1,"updateTime":"2020-03-14 21:16:19","userEmail":"0000000000qq.com","userId":5,"username":"user2"},{"createdTime":"2020-03-14 21:16:41","name":"测试用户3","nickname":"测试用户3","sex":2,"updateTime":"2020-03-14 21:16:41","userEmail":"0000000000qq.com","userId":6,"username":"user3"},{"createdTime":"2020-03-14 21:17:59","name":"测试用户4","nickname":"测试用户4","sex":2,"updateTime":"2020-03-14 21:17:59","userEmail":"222222222qq.com","userId":7,"username":"user4"},{"createdTime":"2020-03-14 21:23:51","name":"测试用户4","nickname":"测试用户4","sex":2,"updateTime":"2020-03-14 21:23:51","userEmail":"222222222qq.com","userId":8,"username":"user4"}],"pageSize":10,"params":{},"sortColumn":"","sortMethod":"asc","totalCount":4,"totalPage":1},"msg":"操作成功！"}
2020-03-19 11:32:04.784 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /admin/getAdmin
2020-03-19 11:32:04.784 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 11:32:04.785 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 11:32:04.785 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.AdminController.getAdmin
2020-03-19 11:32:04.786 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 11:32:04.876 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 92
2020-03-19 11:32:04.877 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"id":1,"name":"张浩","signature":"浮生若梦,为欢几何!","username":"admin"},"msg":"操作成功！"}
2020-03-19 11:32:07.764 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /about/getByPage
2020-03-19 11:32:07.764 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 11:32:07.765 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 11:32:07.765 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.AboutController.getByPage
2020-03-19 11:32:07.766 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, index=0, list=[], params={}, sortColumn=, sortMethod=asc)]
2020-03-19 11:32:07.996 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 232
2020-03-19 11:32:07.997 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"index":0,"list":[{"aboutId":1,"aboutRead":5,"aboutTitle":"修改更新关于我的信息","createdTime":"2020-03-14 10:46:26","enable":1,"updateTime":"2020-03-14 11:00:06"},{"aboutId":2,"aboutRead":0,"aboutTitle":"测试关于我的信息1","createdTime":"2020-03-14 10:47:18","enable":0,"updateTime":"2020-03-14 10:47:18"},{"aboutId":3,"aboutRead":0,"aboutTitle":"测试关于我的信息2","createdTime":"2020-03-14 10:47:24","enable":0,"updateTime":"2020-03-14 10:47:24"}],"pageSize":10,"params":{},"sortColumn":"","sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}
2020-03-19 11:32:10.964 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /blog/getByPage
2020-03-19 11:32:10.964 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 11:32:10.965 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 11:32:10.965 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.BlogController.getByPage
2020-03-19 11:32:10.965 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, index=0, list=[], params={}, sortColumn=, sortMethod=asc)]
2020-03-19 11:32:11.178 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 214
2020-03-19 11:32:11.179 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"index":0,"list":[],"pageSize":10,"params":{},"sortColumn":"","sortMethod":"asc","totalCount":0,"totalPage":0},"msg":"操作成功！"}
2020-03-19 11:32:51.319 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /blog/save
2020-03-19 11:32:51.319 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 11:32:51.321 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 11:32:51.322 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.BlogController.save
2020-03-19 11:32:51.323 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Blog(blogId=, blogTitle=lesson-2.0 反射机制 (Reflection), blogImage=null, blogContent=<h3 id="一-反射" data-source-line="3">一: 反射</h3>
<p data-source-line="5"><strong>JAVA 反射机制是在运行状态中:</strong></p>
<ul data-source-line="6">
<li>对于任意一个类,都能够知道这个类的所有属性和方法;</li>
<li>对于任意一个对象,都能够调用它的任意一个方法和属性;</li>
<li>这种动态的获取信息以及调用对象的方法的功能称为 java 语言的反射机制;</li>
</ul>
<p data-source-line="10"><strong>反射提供的功能:</strong></p>
<ul data-source-line="11">
<li>在运行时判断任意一个对象所需的类</li>
<li>在运行时构造任意一个类的对象</li>
<li>在运行时判断任意一个类所具有的的成员变量和方法</li>
<li>在运行时调用任意一个对象的方法</li>
</ul>
<p data-source-line="16"><strong>反射具体加载过程</strong></p>
<p data-source-line="19"><strong><em>简单实例:</em></strong></p>
<ul data-source-line="20">
<li>首先定义一个Animal,里面定义一些构造函数,方法,变量:</li>
</ul>
<pre data-source-line="21"><code class="hljs"><span class="hljs-keyword">package</span> xyz.fusheng.lesson1.reflection;
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>{
    <span class="hljs-keyword">public</span> String name=<span class="hljs-string">"Dog"</span>;
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age = <span class="hljs-number">30</span>;
    <span class="hljs-comment">// <span class="zh-hans">默认无参构造函数</span></span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Animal</span><span class="hljs-params">()</span> </span>{
    }
    <span class="hljs-comment">// <span class="zh-hans">带参数的构造函数</span></span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Animal</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span></span>{
        System.out.println(name+<span class="hljs-string">","</span>+age);
    }
    <span class="hljs-comment">// <span class="zh-hans">公开</span> <span class="zh-hans">方法</span> <span class="zh-hans">返回类型和参数均有</span></span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">sayName</span><span class="hljs-params">(String name)</span> </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-string">"Hello,"</span> + name;
    }
}
</code></pre>
<ul data-source-line="39">
<li>用反射的方法调用这个类:</li>
</ul>
<pre data-source-line="40"><code class="hljs"><span class="hljs-keyword">package</span> xyz.fusheng.lesson1.reflection;
<span class="hljs-keyword">import</span> java.lang.reflect.Constructor;
<span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;
<span class="hljs-keyword">import</span> java.lang.reflect.Method;

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main1</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException</span>{
        <span class="hljs-comment">//1. <span class="zh-hans">加载类</span>,<span class="zh-hans">指定类的完全限定名</span>: <span class="zh-hans">包名</span>+<span class="zh-hans">类名</span></span>
        Class c1 = Class.forName(<span class="hljs-string">"xyz.fusheng.lesson1.reflection.Animal"</span>);
        System.out.println(c1); <span class="hljs-comment">//<span class="zh-hans">打印</span> c1,<span class="zh-hans">发现值和字节码中的类的名称一样</span></span>
        <span class="hljs-comment">//2. <span class="zh-hans">获取</span>(<span class="zh-hans">反射</span>)<span class="zh-hans">类</span>c1<span class="zh-hans">的公开构造函数</span>,<span class="zh-hans">且参数为</span>null</span>
        Constructor ctor1 = c1.getConstructor();
        <span class="hljs-comment">//3. <span class="zh-hans">构造函数的用途</span>,<span class="zh-hans">就是创建类的对象</span>(<span class="zh-hans">实例</span>)</span>
        <span class="hljs-comment">//<span class="zh-hans">除了私有的构造函数外</span>(<span class="zh-hans">单例模式</span>,<span class="zh-hans">禁止通过构造函数创建类的实例</span>,<span class="zh-hans">保证每个类只有一个实例</span>)</span>
        <span class="hljs-comment">//ctor1.newInstance()<span class="zh-hans">默认生成一个</span>Object<span class="zh-hans">对象</span>,<span class="zh-hans">我门需要转化成我们需要的</span>Animal<span class="zh-hans">对象</span></span>
        Animal a1 = (Animal)ctor1.newInstance();
        <span class="hljs-comment">//4. <span class="zh-hans">通过反射调用</span>Animal<span class="zh-hans">的方法</span></span>
        Method method = c1.getMethod(<span class="hljs-string">"sayName"</span>, String.class);
        String name = (String) method.invoke(a1,<span class="hljs-string">"<span class="zh-hans">兔兔</span>"</span>);
        System.out.println(name);
        <span class="hljs-comment">//5. <span class="zh-hans">直接访问类中的方法</span></span>
        System.out.println(a1.sayName(<span class="hljs-string">"<span class="zh-hans">猫猫</span>"</span>));
        <span class="hljs-comment">//6. <span class="zh-hans">访问类中的变量</span></span>
        System.out.println(a1.name);
    }
}
</code></pre>
<ul data-source-line="68">
<li>--&gt;</li>
</ul>
<pre data-source-line="69"><code class="hljs">class xyz<span class="hljs-selector-class">.fusheng</span><span class="hljs-selector-class">.lesson1</span><span class="hljs-selector-class">.reflection</span><span class="hljs-selector-class">.Animal</span>
Hello,<span class="zh-hans">兔兔</span>
Hello,<span class="zh-hans">猫猫</span>
Dog
</code></pre>
<ul data-source-line="75">
<li>反射大概步骤:</li>
<li>1.通过 Class.forName("全类名")拿到反射入口</li>
<li>2.根据反射入口对象(Class)获取类的各种信息</li>
<li>3.通过反射获取对象的实例,并操作对象</li>
<li>4.在程序执行过程中,动态的决定调用的类,以及方法</li>
</ul>, blogGoods=null, blogRead=null, blogCollection=null, blogType=null, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-03-19 11:32:51.577 ERROR [http-nio-8001-exec-7]o.a.c.c.C.[Tomcat].[localhost].[/].[dispatcherServlet].log:175 -Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'log_params' at row 1
### The error may involve xyz.fusheng.blog.mapper.LogMapper.save-Inline
### The error occurred while setting parameters
### SQL: insert into bl_log(             log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip         ) values (             ?, ?, ?,  ?, ?, ?,             ?, ?         )
### Cause: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'log_params' at row 1
; Data truncation: Data too long for column 'log_params' at row 1; nested exception is com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'log_params' at row 1] with root cause
com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'log_params' at row 1
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:104)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:953)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:370)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3409)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3407)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:498)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:185)
	at sun.reflect.GeneratedMethodAccessor66.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy79.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:278)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:58)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy85.save(Unknown Source)
	at xyz.fusheng.blog.service.impl.LogServiceImpl.save(LogServiceImpl.java:30)
	at xyz.fusheng.blog.aspect.RequestAspect.saveExceptionLog(RequestAspect.java:102)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:626)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:66)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at xyz.fusheng.blog.controller.BlogController$$EnhancerBySpringCGLIB$$9747eaff.save(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-03-19 11:32:51.578 ERROR [http-nio-8001-exec-7]o.a.c.c.C.[Tomcat].[localhost].[/].[dispatcherServlet].log:175 -Servlet.service() for servlet [dispatcherServlet] threw exception
org.apache.shiro.UnavailableSecurityManagerException: No SecurityManager accessible to the calling code, either bound to the org.apache.shiro.util.ThreadContext or as a vm static singleton.  This is an invalid application configuration.
	at org.apache.shiro.SecurityUtils.getSecurityManager(SecurityUtils.java:123)
	at org.apache.shiro.subject.Subject$Builder.<init>(Subject.java:627)
	at org.apache.shiro.SecurityUtils.getSubject(SecurityUtils.java:56)
	at xyz.fusheng.blog.utils.ShiroUtils.getLoginUser(ShiroUtils.java:29)
	at xyz.fusheng.blog.interceptor.LoginInterceptor.preHandle(LoginInterceptor.java:30)
	at org.springframework.web.servlet.HandlerExecutionChain.applyPreHandle(HandlerExecutionChain.java:141)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1035)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-03-19 11:32:51.579 ERROR [http-nio-8001-exec-7]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].log:175 -Exception Processing ErrorPage[errorCode=0, location=/error]
org.springframework.web.util.NestedServletException: Request processing failed; nested exception is org.apache.shiro.UnavailableSecurityManagerException: No SecurityManager accessible to the calling code, either bound to the org.apache.shiro.util.ThreadContext or as a vm static singleton.  This is an invalid application configuration.
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.shiro.UnavailableSecurityManagerException: No SecurityManager accessible to the calling code, either bound to the org.apache.shiro.util.ThreadContext or as a vm static singleton.  This is an invalid application configuration.
	at org.apache.shiro.SecurityUtils.getSecurityManager(SecurityUtils.java:123)
	at org.apache.shiro.subject.Subject$Builder.<init>(Subject.java:627)
	at org.apache.shiro.SecurityUtils.getSubject(SecurityUtils.java:56)
	at xyz.fusheng.blog.utils.ShiroUtils.getLoginUser(ShiroUtils.java:29)
	at xyz.fusheng.blog.interceptor.LoginInterceptor.preHandle(LoginInterceptor.java:30)
	at org.springframework.web.servlet.HandlerExecutionChain.applyPreHandle(HandlerExecutionChain.java:141)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1035)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	... 26 common frames omitted
2020-03-19 11:33:36.453 WARN  [http-nio-8001-exec-8]org.springframework.web.servlet.PageNotFound.noHandlerFound:1251 -No mapping for GET /sockjs-node/info
2020-03-19 11:33:36.454 ERROR [http-nio-8001-exec-8]xyz.fusheng.blog.advice.BlogExceptionAdvice.exceptionHandler:29 -统一异常处理
xyz.fusheng.blog.exception.BlogException: 当前账号未登录！
	at xyz.fusheng.blog.interceptor.LoginInterceptor.preHandle(LoginInterceptor.java:36)
	at org.springframework.web.servlet.HandlerExecutionChain.applyPreHandle(HandlerExecutionChain.java:141)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1035)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:175)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-03-19 11:34:56.039 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /type/listBack
2020-03-19 11:34:56.040 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 11:34:56.041 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 11:34:56.041 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.TypeController.list
2020-03-19 11:34:56.041 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 11:34:56.120 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 81
2020-03-19 11:34:56.121 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":13,"typeName":"个人博客开发文档"},{"enable":1,"typeBlogCount":0,"typeId":14,"typeName":"Spring 专题"},{"enable":1,"typeBlogCount":0,"typeId":15,"typeName":"Spring Boot 专题"},{"enable":1,"typeBlogCount":0,"typeId":16,"typeName":"Spring Cloud 专题"},{"enable":1,"typeBlogCount":0,"typeId":17,"typeName":"MyBatis 专题"},{"enable":1,"typeBlogCount":0,"typeId":18,"typeName":"Linux 专题"},{"enable":1,"typeBlogCount":0,"typeId":19,"typeName":"Security 专题"},{"enable":1,"typeBlogCount":0,"typeId":20,"typeName":"Docker 专题"}],"msg":"操作成功！"}
2020-03-19 11:35:16.131 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /type/get/13
2020-03-19 11:35:16.131 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 11:35:16.132 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 11:35:16.132 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.TypeController.getById
2020-03-19 11:35:16.135 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[13]
2020-03-19 11:35:16.215 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 84
2020-03-19 11:35:16.215 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"enable":1,"typeBlogCount":0,"typeId":13,"typeName":"个人博客开发文档"},"msg":"操作成功！"}
2020-03-19 11:35:30.438 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /blog/getByPage
2020-03-19 11:35:30.439 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 11:35:30.439 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 11:35:30.440 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.BlogController.getByPage
2020-03-19 11:35:30.440 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, index=0, list=[], params={}, sortColumn=, sortMethod=asc)]
2020-03-19 11:35:30.676 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 238
2020-03-19 11:35:30.677 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"index":0,"list":[],"pageSize":10,"params":{},"sortColumn":"","sortMethod":"asc","totalCount":0,"totalPage":0},"msg":"操作成功！"}
2020-03-19 11:36:25.552 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /type/listBack
2020-03-19 11:36:25.553 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 11:36:25.554 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 11:36:25.554 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.TypeController.list
2020-03-19 11:36:25.555 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 11:36:25.653 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 101
2020-03-19 11:36:25.653 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":13,"typeName":"个人博客开发文档"},{"enable":1,"typeBlogCount":0,"typeId":14,"typeName":"Spring 专题"},{"enable":1,"typeBlogCount":0,"typeId":15,"typeName":"Spring Boot 专题"},{"enable":1,"typeBlogCount":0,"typeId":16,"typeName":"Spring Cloud 专题"},{"enable":1,"typeBlogCount":0,"typeId":17,"typeName":"MyBatis 专题"},{"enable":1,"typeBlogCount":0,"typeId":18,"typeName":"Linux 专题"},{"enable":1,"typeBlogCount":0,"typeId":19,"typeName":"Security 专题"},{"enable":1,"typeBlogCount":0,"typeId":20,"typeName":"Docker 专题"}],"msg":"操作成功！"}
2020-03-19 11:52:29.334 INFO  [main]xyz.fusheng.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-UFFICG8 with PID 20792 (started by 25610 in G:\Code_fusheng\SpringBoot+Vue【个人博客】\blog)
2020-03-19 11:52:29.475 INFO  [main]xyz.fusheng.blog.BlogApplication.logStartupProfileInfo:651 -No active profile set, falling back to default profiles: default
2020-03-19 11:52:34.354 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'shiroConfig' of type [xyz.fusheng.blog.config.ShiroConfig$$EnhancerBySpringCGLIB$$8cce990] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:52:34.644 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mybatis-org.mybatis.spring.boot.autoconfigure.MybatisProperties' of type [org.mybatis.spring.boot.autoconfigure.MybatisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:52:34.664 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration' of type [org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$2b4e25d1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:52:34.674 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure$$EnhancerBySpringCGLIB$$1225ca13] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:52:34.674 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-03-19 11:52:34.864 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:52:34.894 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration' of type [com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:52:34.934 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'statFilter' of type [com.alibaba.druid.filter.stat.StatFilter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:52:40.044 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:930 -{dataSource-1} inited
2020-03-19 11:52:40.044 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'dataSource' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceWrapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:52:40.164 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:52:41.534 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:52:41.564 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:52:41.584 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:52:41.594 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminMapper' of type [com.sun.proxy.$Proxy80] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:52:41.594 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminServiceImpl' of type [xyz.fusheng.blog.service.impl.AdminServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:52:41.594 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminRealm' of type [xyz.fusheng.blog.realm.AdminRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:52:41.694 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:52:41.764 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-19 11:52:42.954 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 8001 (http)
2020-03-19 11:52:42.974 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-8001"]
2020-03-19 11:52:42.974 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-03-19 11:52:42.974 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-03-19 11:52:43.154 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-03-19 11:52:43.154 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 13350 ms
2020-03-19 11:52:46.135 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-8001"]
2020-03-19 11:52:46.194 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 8001 (http) with context path ''
2020-03-19 11:52:46.204 INFO  [main]xyz.fusheng.blog.BlogApplication.logStarted:61 -Started BlogApplication in 19.511 seconds (JVM running for 23.11)
2020-03-19 11:54:34.760 INFO  [http-nio-8001-exec-1]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-19 11:54:34.761 INFO  [http-nio-8001-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-03-19 11:54:34.783 INFO  [http-nio-8001-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 21 ms
2020-03-19 11:54:35.011 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /admin/login
2020-03-19 11:54:35.024 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 11:54:35.025 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 0:0:0:0:0:0:0:1
2020-03-19 11:54:35.029 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.AdminController.login
2020-03-19 11:54:35.030 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]
2020-03-19 11:54:35.286 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 275
2020-03-19 11:54:35.401 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"token":"15AE86E44E980B2A1D6B026B05A69BFD"},"msg":"操作成功！"}
2020-03-19 11:57:10.003 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /admin/info
2020-03-19 11:57:10.004 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 11:57:10.005 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 0:0:0:0:0:0:0:1
2020-03-19 11:57:10.006 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.AdminController.getLoginInfo
2020-03-19 11:57:10.007 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 11:57:10.009 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 6
2020-03-19 11:57:10.016 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"name":"张浩","password":"******","signature":"浮生若梦,为欢几何!","username":"admin"},"msg":"操作成功！"}
2020-03-19 12:04:28.911 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /admin/login
2020-03-19 12:04:28.912 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 12:04:28.913 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 12:04:28.914 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.AdminController.login
2020-03-19 12:04:28.915 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]
2020-03-19 12:04:31.187 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 2276
2020-03-19 12:04:31.188 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"token":"3520ABD9388855506C393E7D36C8D572"},"msg":"操作成功！"}
2020-03-19 12:04:31.411 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /admin/info
2020-03-19 12:04:31.412 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 12:04:31.413 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 12:04:31.414 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.AdminController.getLoginInfo
2020-03-19 12:04:31.415 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 12:04:31.416 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 5
2020-03-19 12:04:31.417 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"name":"张浩","password":"******","signature":"浮生若梦,为欢几何!","username":"admin"},"msg":"操作成功！"}
2020-03-19 12:04:31.735 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /type/getList
2020-03-19 12:04:31.736 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 12:04:31.737 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 12:04:31.739 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.TypeController.getList
2020-03-19 12:04:31.740 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 12:04:31.923 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 188
2020-03-19 12:04:31.960 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":[{"typeBlogCount":0,"typeId":13,"typeName":"个人博客开发文档"},{"typeBlogCount":0,"typeId":14,"typeName":"Spring 专题"},{"typeBlogCount":0,"typeId":15,"typeName":"Spring Boot 专题"},{"typeBlogCount":0,"typeId":16,"typeName":"Spring Cloud 专题"},{"typeBlogCount":0,"typeId":17,"typeName":"MyBatis 专题"},{"typeBlogCount":0,"typeId":18,"typeName":"Linux 专题"},{"typeBlogCount":0,"typeId":19,"typeName":"Security 专题"},{"typeBlogCount":0,"typeId":20,"typeName":"Docker 专题"}],"msg":"操作成功！"}
2020-03-19 12:04:46.601 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /type/listBack
2020-03-19 12:04:46.601 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 12:04:46.602 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 12:04:46.603 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.TypeController.list
2020-03-19 12:04:46.604 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 12:04:46.678 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 77
2020-03-19 12:04:46.680 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":13,"typeName":"个人博客开发文档"},{"enable":1,"typeBlogCount":0,"typeId":14,"typeName":"Spring 专题"},{"enable":1,"typeBlogCount":0,"typeId":15,"typeName":"Spring Boot 专题"},{"enable":1,"typeBlogCount":0,"typeId":16,"typeName":"Spring Cloud 专题"},{"enable":1,"typeBlogCount":0,"typeId":17,"typeName":"MyBatis 专题"},{"enable":1,"typeBlogCount":0,"typeId":18,"typeName":"Linux 专题"},{"enable":1,"typeBlogCount":0,"typeId":19,"typeName":"Security 专题"},{"enable":1,"typeBlogCount":0,"typeId":20,"typeName":"Docker 专题"}],"msg":"操作成功！"}
2020-03-19 12:04:52.773 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /blog/getByPage
2020-03-19 12:04:52.774 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 12:04:52.775 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 12:04:52.776 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.BlogController.getByPage
2020-03-19 12:04:52.777 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, index=0, list=[], params={}, sortColumn=, sortMethod=asc)]
2020-03-19 12:04:53.160 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 387
2020-03-19 12:04:53.165 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"index":0,"list":[],"pageSize":10,"params":{},"sortColumn":"","sortMethod":"asc","totalCount":0,"totalPage":0},"msg":"操作成功！"}
2020-03-19 12:06:20.538 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /blog/save
2020-03-19 12:06:20.539 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 12:06:20.541 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 12:06:20.542 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.BlogController.save
2020-03-19 12:06:20.543 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Blog(blogId=, blogTitle=lesson-2.0 反射机制 (Reflection), blogImage=null, blogContent=<p>## lesson-2.0 反射机制 (Reflection)</p>
<p>### 一: 反射</p>
<p>**JAVA 反射机制是在运行状态中:**<br />* 对于任意一个类,都能够知道这个类的所有属性和方法;<br />* 对于任意一个对象,都能够调用它的任意一个方法和属性; <br />* 这种动态的获取信息以及调用对象的方法的功能称为 java 语言的反射机制;</p>
<p>**反射提供的功能:**<br />* 在运行时判断任意一个对象所需的类<br />* 在运行时构造任意一个类的对象<br />* 在运行时判断任意一个类所具有的的成员变量和方法<br />* 在运行时调用任意一个对象的方法</p>
<p>**反射具体加载过程**<br />![image](129D1CDB55284B79BD32008C5D11E63E)</p>
<p>***简单实例:*** <br />* 首先定义一个Animal,里面定义一些构造函数,方法,变量:<br />```java<br />package xyz.fusheng.lesson1.reflection;<br />public class Animal {<br />public String name="Dog";<br />private int age = 30;<br />// 默认无参构造函数<br />public Animal() {<br />}<br />// 带参数的构造函数<br />public Animal(String name, int age){<br />System.out.println(name+","+age);<br />}<br />// 公开 方法 返回类型和参数均有<br />public String sayName(String name) {<br />return "Hello," + name;<br />}<br />}<br />```<br />* 用反射的方法调用这个类:<br />```java<br />package xyz.fusheng.lesson1.reflection;<br />import java.lang.reflect.Constructor;<br />import java.lang.reflect.InvocationTargetException;<br />import java.lang.reflect.Method;</p>
<p>public class Main1 {<br />public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException{<br />//1. 加载类,指定类的完全限定名: 包名+类名<br />Class c1 = Class.forName("xyz.fusheng.lesson1.reflection.Animal");<br />System.out.println(c1); //打印 c1,发现值和字节码中的类的名称一样<br />//2. 获取(反射)类c1的公开构造函数,且参数为null<br />Constructor ctor1 = c1.getConstructor();<br />//3. 构造函数的用途,就是创建类的对象(实例)<br />//除了私有的构造函数外(单例模式,禁止通过构造函数创建类的实例,保证每个类只有一个实例)<br />//ctor1.newInstance()默认生成一个Object对象,我门需要转化成我们需要的Animal对象<br />Animal a1 = (Animal)ctor1.newInstance();<br />//4. 通过反射调用Animal的方法<br />Method method = c1.getMethod("sayName", String.class);<br />String name = (String) method.invoke(a1,"兔兔");<br />System.out.println(name);<br />//5. 直接访问类中的方法<br />System.out.println(a1.sayName("猫猫"));<br />//6. 访问类中的变量<br />System.out.println(a1.name);<br />}<br />}<br />```<br />* --&gt;<br />```<br />class xyz.fusheng.lesson1.reflection.Animal<br />Hello,兔兔<br />Hello,猫猫<br />Dog<br />```<br />* 反射大概步骤: <br />* 1.通过 Class.forName("全类名")拿到反射入口<br />* 2.根据反射入口对象(Class)获取类的各种信息<br />* 3.通过反射获取对象的实例,并操作对象<br />* 4.在程序执行过程中,动态的决定调用的类,以及方法</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=14, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-03-19 12:06:20.659 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 121
2020-03-19 12:06:20.660 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"msg":"添加成功!"}
2020-03-19 12:06:20.800 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /blog/getByPage
2020-03-19 12:06:20.801 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 12:06:20.802 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 12:06:20.802 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.BlogController.getByPage
2020-03-19 12:06:20.803 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, index=0, list=[], params={}, sortColumn=, sortMethod=asc)]
2020-03-19 12:06:21.072 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 272
2020-03-19 12:06:21.081 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1240489759664103424","blogRead":0,"blogTitle":"lesson-2.0 反射机制 (Reflection)","createdTime":"2020-03-19 12:06:19","typeName":"Spring 专题","updateTime":"2020-03-19 12:06:19"}],"pageSize":10,"params":{},"sortColumn":"","sortMethod":"asc","totalCount":1,"totalPage":1},"msg":"操作成功！"}
2020-03-19 12:06:28.358 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /blog/get/1240489759664103424
2020-03-19 12:06:28.360 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 12:06:28.360 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 12:06:28.362 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.BlogController.get
2020-03-19 12:06:28.362 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[1240489759664103424]
2020-03-19 12:06:28.438 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 80
2020-03-19 12:06:28.448 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"<p>## lesson-2.0 反射机制 (Reflection)</p>\n<p>### 一: 反射</p>\n<p>**JAVA 反射机制是在运行状态中:**<br />* 对于任意一个类,都能够知道这个类的所有属性和方法;<br />* 对于任意一个对象,都能够调用它的任意一个方法和属性; <br />* 这种动态的获取信息以及调用对象的方法的功能称为 java 语言的反射机制;</p>\n<p>**反射提供的功能:**<br />* 在运行时判断任意一个对象所需的类<br />* 在运行时构造任意一个类的对象<br />* 在运行时判断任意一个类所具有的的成员变量和方法<br />* 在运行时调用任意一个对象的方法</p>\n<p>**反射具体加载过程**<br />![image](129D1CDB55284B79BD32008C5D11E63E)</p>\n<p>***简单实例:*** <br />* 首先定义一个Animal,里面定义一些构造函数,方法,变量:<br />```java<br />package xyz.fusheng.lesson1.reflection;<br />public class Animal {<br />public String name=\"Dog\";<br />private int age = 30;<br />// 默认无参构造函数<br />public Animal() {<br />}<br />// 带参数的构造函数<br />public Animal(String name, int age){<br />System.out.println(name+\",\"+age);<br />}<br />// 公开 方法 返回类型和参数均有<br />public String sayName(String name) {<br />return \"Hello,\" + name;<br />}<br />}<br />```<br />* 用反射的方法调用这个类:<br />```java<br />package xyz.fusheng.lesson1.reflection;<br />import java.lang.reflect.Constructor;<br />import java.lang.reflect.InvocationTargetException;<br />import java.lang.reflect.Method;</p>\n<p>public class Main1 {<br />public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException{<br />//1. 加载类,指定类的完全限定名: 包名+类名<br />Class c1 = Class.forName(\"xyz.fusheng.lesson1.reflection.Animal\");<br />System.out.println(c1); //打印 c1,发现值和字节码中的类的名称一样<br />//2. 获取(反射)类c1的公开构造函数,且参数为null<br />Constructor ctor1 = c1.getConstructor();<br />//3. 构造函数的用途,就是创建类的对象(实例)<br />//除了私有的构造函数外(单例模式,禁止通过构造函数创建类的实例,保证每个类只有一个实例)<br />//ctor1.newInstance()默认生成一个Object对象,我门需要转化成我们需要的Animal对象<br />Animal a1 = (Animal)ctor1.newInstance();<br />//4. 通过反射调用Animal的方法<br />Method method = c1.getMethod(\"sayName\", String.class);<br />String name = (String) method.invoke(a1,\"兔兔\");<br />System.out.println(name);<br />//5. 直接访问类中的方法<br />System.out.println(a1.sayName(\"猫猫\"));<br />//6. 访问类中的变量<br />System.out.println(a1.name);<br />}<br />}<br />```<br />* --&gt;<br />```<br />class xyz.fusheng.lesson1.reflection.Animal<br />Hello,兔兔<br />Hello,猫猫<br />Dog<br />```<br />* 反射大概步骤: <br />* 1.通过 Class.forName(\"全类名\")拿到反射入口<br />* 2.根据反射入口对象(Class)获取类的各种信息<br />* 3.通过反射获取对象的实例,并操作对象<br />* 4.在程序执行过程中,动态的决定调用的类,以及方法</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>","blogGoods":0,"blogId":"1240489759664103424","blogRead":0,"blogTitle":"lesson-2.0 反射机制 (Reflection)","blogType":14,"createdTime":"2020-03-19 12:06:19","version":1},"msg":"操作成功！"}
2020-03-19 12:06:37.191 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /blog/get/1240489759664103424
2020-03-19 12:06:37.191 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 12:06:37.191 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 12:06:37.192 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.BlogController.get
2020-03-19 12:06:37.192 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[1240489759664103424]
2020-03-19 12:06:37.264 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 73
2020-03-19 12:06:37.265 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"<p>## lesson-2.0 反射机制 (Reflection)</p>\n<p>### 一: 反射</p>\n<p>**JAVA 反射机制是在运行状态中:**<br />* 对于任意一个类,都能够知道这个类的所有属性和方法;<br />* 对于任意一个对象,都能够调用它的任意一个方法和属性; <br />* 这种动态的获取信息以及调用对象的方法的功能称为 java 语言的反射机制;</p>\n<p>**反射提供的功能:**<br />* 在运行时判断任意一个对象所需的类<br />* 在运行时构造任意一个类的对象<br />* 在运行时判断任意一个类所具有的的成员变量和方法<br />* 在运行时调用任意一个对象的方法</p>\n<p>**反射具体加载过程**<br />![image](129D1CDB55284B79BD32008C5D11E63E)</p>\n<p>***简单实例:*** <br />* 首先定义一个Animal,里面定义一些构造函数,方法,变量:<br />```java<br />package xyz.fusheng.lesson1.reflection;<br />public class Animal {<br />public String name=\"Dog\";<br />private int age = 30;<br />// 默认无参构造函数<br />public Animal() {<br />}<br />// 带参数的构造函数<br />public Animal(String name, int age){<br />System.out.println(name+\",\"+age);<br />}<br />// 公开 方法 返回类型和参数均有<br />public String sayName(String name) {<br />return \"Hello,\" + name;<br />}<br />}<br />```<br />* 用反射的方法调用这个类:<br />```java<br />package xyz.fusheng.lesson1.reflection;<br />import java.lang.reflect.Constructor;<br />import java.lang.reflect.InvocationTargetException;<br />import java.lang.reflect.Method;</p>\n<p>public class Main1 {<br />public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException{<br />//1. 加载类,指定类的完全限定名: 包名+类名<br />Class c1 = Class.forName(\"xyz.fusheng.lesson1.reflection.Animal\");<br />System.out.println(c1); //打印 c1,发现值和字节码中的类的名称一样<br />//2. 获取(反射)类c1的公开构造函数,且参数为null<br />Constructor ctor1 = c1.getConstructor();<br />//3. 构造函数的用途,就是创建类的对象(实例)<br />//除了私有的构造函数外(单例模式,禁止通过构造函数创建类的实例,保证每个类只有一个实例)<br />//ctor1.newInstance()默认生成一个Object对象,我门需要转化成我们需要的Animal对象<br />Animal a1 = (Animal)ctor1.newInstance();<br />//4. 通过反射调用Animal的方法<br />Method method = c1.getMethod(\"sayName\", String.class);<br />String name = (String) method.invoke(a1,\"兔兔\");<br />System.out.println(name);<br />//5. 直接访问类中的方法<br />System.out.println(a1.sayName(\"猫猫\"));<br />//6. 访问类中的变量<br />System.out.println(a1.name);<br />}<br />}<br />```<br />* --&gt;<br />```<br />class xyz.fusheng.lesson1.reflection.Animal<br />Hello,兔兔<br />Hello,猫猫<br />Dog<br />```<br />* 反射大概步骤: <br />* 1.通过 Class.forName(\"全类名\")拿到反射入口<br />* 2.根据反射入口对象(Class)获取类的各种信息<br />* 3.通过反射获取对象的实例,并操作对象<br />* 4.在程序执行过程中,动态的决定调用的类,以及方法</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>","blogGoods":0,"blogId":"1240489759664103424","blogRead":0,"blogTitle":"lesson-2.0 反射机制 (Reflection)","blogType":14,"createdTime":"2020-03-19 12:06:19","version":1},"msg":"操作成功！"}
2020-03-19 12:06:54.183 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /blog/update
2020-03-19 12:06:54.184 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : PUT
2020-03-19 12:06:54.184 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 12:06:54.185 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.BlogController.update
2020-03-19 12:06:54.185 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Blog(blogId=1240489759664103424, blogTitle=lesson-2.0 反射机制 (Reflection), blogImage=null, blogContent=<h2 id="lesson-20-反射机制-reflection" data-source-line="1">lesson-2.0 反射机制 (Reflection)</h2>
<h3 id="一-反射" data-source-line="3">一: 反射</h3>
<p data-source-line="5"><strong>JAVA 反射机制是在运行状态中:</strong></p>
<ul data-source-line="6">
<li>对于任意一个类,都能够知道这个类的所有属性和方法;</li>
<li>对于任意一个对象,都能够调用它的任意一个方法和属性;</li>
<li>这种动态的获取信息以及调用对象的方法的功能称为 java 语言的反射机制;</li>
</ul>
<p data-source-line="10"><strong>反射提供的功能:</strong></p>
<ul data-source-line="11">
<li>在运行时判断任意一个对象所需的类</li>
<li>在运行时构造任意一个类的对象</li>
<li>在运行时判断任意一个类所具有的的成员变量和方法</li>
<li>在运行时调用任意一个对象的方法</li>
</ul>
<p data-source-line="16"><strong>反射具体加载过程</strong> <img src="file:///D:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qq464A73A6FE5266563C05A2260725DAB1/384b38e734b44a5a9c89f4851baeea96/clipboard.png?ynotemdtimestamp=1584590739806" alt="image" data-src="129D1CDB55284B79BD32008C5D11E63E" data-ynote-src="129D1CDB55284B79BD32008C5D11E63E" data-processed="129D1CDB55284B79BD32008C5D11E63E" /></p>
<p data-source-line="19"><strong><em>简单实例:</em></strong></p>
<ul data-source-line="20">
<li>首先定义一个Animal,里面定义一些构造函数,方法,变量:</li>
</ul>
<pre data-source-line="21"><code class="hljs"><span class="hljs-keyword">package</span> xyz.fusheng.lesson1.reflection;
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>{
    <span class="hljs-keyword">public</span> String name=<span class="hljs-string">"Dog"</span>;
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age = <span class="hljs-number">30</span>;
    <span class="hljs-comment">// <span class="zh-hans">默认无参构造函数</span></span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Animal</span><span class="hljs-params">()</span> </span>{
    }
    <span class="hljs-comment">// <span class="zh-hans">带参数的构造函数</span></span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Animal</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span></span>{
        System.out.println(name+<span class="hljs-string">","</span>+age);
    }
    <span class="hljs-comment">// <span class="zh-hans">公开</span> <span class="zh-hans">方法</span> <span class="zh-hans">返回类型和参数均有</span></span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">sayName</span><span class="hljs-params">(String name)</span> </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-string">"Hello,"</span> + name;
    }
}
</code></pre>
<ul data-source-line="39">
<li>用反射的方法调用这个类:</li>
</ul>
<pre data-source-line="40"><code class="hljs"><span class="hljs-keyword">package</span> xyz.fusheng.lesson1.reflection;
<span class="hljs-keyword">import</span> java.lang.reflect.Constructor;
<span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;
<span class="hljs-keyword">import</span> java.lang.reflect.Method;

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main1</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException</span>{
        <span class="hljs-comment">//1. <span class="zh-hans">加载类</span>,<span class="zh-hans">指定类的完全限定名</span>: <span class="zh-hans">包名</span>+<span class="zh-hans">类名</span></span>
        Class c1 = Class.forName(<span class="hljs-string">"xyz.fusheng.lesson1.reflection.Animal"</span>);
        System.out.println(c1); <span class="hljs-comment">//<span class="zh-hans">打印</span> c1,<span class="zh-hans">发现值和字节码中的类的名称一样</span></span>
        <span class="hljs-comment">//2. <span class="zh-hans">获取</span>(<span class="zh-hans">反射</span>)<span class="zh-hans">类</span>c1<span class="zh-hans">的公开构造函数</span>,<span class="zh-hans">且参数为</span>null</span>
        Constructor ctor1 = c1.getConstructor();
        <span class="hljs-comment">//3. <span class="zh-hans">构造函数的用途</span>,<span class="zh-hans">就是创建类的对象</span>(<span class="zh-hans">实例</span>)</span>
        <span class="hljs-comment">//<span class="zh-hans">除了私有的构造函数外</span>(<span class="zh-hans">单例模式</span>,<span class="zh-hans">禁止通过构造函数创建类的实例</span>,<span class="zh-hans">保证每个类只有一个实例</span>)</span>
        <span class="hljs-comment">//ctor1.newInstance()<span class="zh-hans">默认生成一个</span>Object<span class="zh-hans">对象</span>,<span class="zh-hans">我门需要转化成我们需要的</span>Animal<span class="zh-hans">对象</span></span>
        Animal a1 = (Animal)ctor1.newInstance();
        <span class="hljs-comment">//4. <span class="zh-hans">通过反射调用</span>Animal<span class="zh-hans">的方法</span></span>
        Method method = c1.getMethod(<span class="hljs-string">"sayName"</span>, String.class);
        String name = (String) method.invoke(a1,<span class="hljs-string">"<span class="zh-hans">兔兔</span>"</span>);
        System.out.println(name);
        <span class="hljs-comment">//5. <span class="zh-hans">直接访问类中的方法</span></span>
        System.out.println(a1.sayName(<span class="hljs-string">"<span class="zh-hans">猫猫</span>"</span>));
        <span class="hljs-comment">//6. <span class="zh-hans">访问类中的变量</span></span>
        System.out.println(a1.name);
    }
}
</code></pre>
<ul data-source-line="68">
<li>--&gt;</li>
</ul>
<pre data-source-line="69"><code class="hljs">class xyz<span class="hljs-selector-class">.fusheng</span><span class="hljs-selector-class">.lesson1</span><span class="hljs-selector-class">.reflection</span><span class="hljs-selector-class">.Animal</span>
Hello,<span class="zh-hans">兔兔</span>
Hello,<span class="zh-hans">猫猫</span>
Dog
</code></pre>
<ul data-source-line="75">
<li>反射大概步骤:</li>
<li>1.通过 Class.forName("全类名")拿到反射入口</li>
<li>2.根据反射入口对象(Class)获取类的各种信息</li>
<li>3.通过反射获取对象的实例,并操作对象</li>
<li>4.在程序执行过程中,动态的决定调用的类,以及方法</li>
</ul>, blogGoods=0, blogRead=0, blogCollection=0, blogType=14, blogRemark=null, blogComment=0, blogSource=null, createdTime=2020-03-19 12:06:19, updateTime=null, version=1, deleted=null)]
2020-03-19 12:06:54.301 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 118
2020-03-19 12:06:54.302 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"msg":"更新成功!"}
2020-03-19 12:06:55.163 ERROR [http-nio-8001-exec-5]o.a.c.c.C.[Tomcat].[localhost].[/].[dispatcherServlet].log:175 -Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'log_params' at row 1
### The error may involve xyz.fusheng.blog.mapper.LogMapper.save-Inline
### The error occurred while setting parameters
### SQL: insert into bl_log(             log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip         ) values (             ?, ?, ?,  ?, ?, ?,             ?, ?         )
### Cause: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'log_params' at row 1
; Data truncation: Data too long for column 'log_params' at row 1; nested exception is com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'log_params' at row 1] with root cause
com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'log_params' at row 1
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:104)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:953)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:370)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3409)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3407)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:498)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:185)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy79.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:278)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:58)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy85.save(Unknown Source)
	at xyz.fusheng.blog.service.impl.LogServiceImpl.save(LogServiceImpl.java:30)
	at xyz.fusheng.blog.aspect.RequestAspect.saveExceptionLog(RequestAspect.java:102)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:626)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:66)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at xyz.fusheng.blog.controller.BlogController$$EnhancerBySpringCGLIB$$fdd5737c.update(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:920)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:663)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-03-19 12:06:55.206 ERROR [http-nio-8001-exec-5]o.a.c.c.C.[Tomcat].[localhost].[/].[dispatcherServlet].log:175 -Servlet.service() for servlet [dispatcherServlet] threw exception
org.apache.shiro.UnavailableSecurityManagerException: No SecurityManager accessible to the calling code, either bound to the org.apache.shiro.util.ThreadContext or as a vm static singleton.  This is an invalid application configuration.
	at org.apache.shiro.SecurityUtils.getSecurityManager(SecurityUtils.java:123)
	at org.apache.shiro.subject.Subject$Builder.<init>(Subject.java:627)
	at org.apache.shiro.SecurityUtils.getSubject(SecurityUtils.java:56)
	at xyz.fusheng.blog.utils.ShiroUtils.getLoginUser(ShiroUtils.java:29)
	at xyz.fusheng.blog.interceptor.LoginInterceptor.preHandle(LoginInterceptor.java:30)
	at org.springframework.web.servlet.HandlerExecutionChain.applyPreHandle(HandlerExecutionChain.java:141)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1035)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:920)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:663)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-03-19 12:06:55.209 ERROR [http-nio-8001-exec-5]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].log:175 -Exception Processing ErrorPage[errorCode=0, location=/error]
org.springframework.web.util.NestedServletException: Request processing failed; nested exception is org.apache.shiro.UnavailableSecurityManagerException: No SecurityManager accessible to the calling code, either bound to the org.apache.shiro.util.ThreadContext or as a vm static singleton.  This is an invalid application configuration.
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:920)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:663)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.shiro.UnavailableSecurityManagerException: No SecurityManager accessible to the calling code, either bound to the org.apache.shiro.util.ThreadContext or as a vm static singleton.  This is an invalid application configuration.
	at org.apache.shiro.SecurityUtils.getSecurityManager(SecurityUtils.java:123)
	at org.apache.shiro.subject.Subject$Builder.<init>(Subject.java:627)
	at org.apache.shiro.SecurityUtils.getSubject(SecurityUtils.java:56)
	at xyz.fusheng.blog.utils.ShiroUtils.getLoginUser(ShiroUtils.java:29)
	at xyz.fusheng.blog.interceptor.LoginInterceptor.preHandle(LoginInterceptor.java:30)
	at org.springframework.web.servlet.HandlerExecutionChain.applyPreHandle(HandlerExecutionChain.java:141)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1035)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	... 26 common frames omitted
2020-03-19 12:07:11.760 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /blog/update
2020-03-19 12:07:11.761 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : PUT
2020-03-19 12:07:11.761 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 12:07:11.762 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.BlogController.update
2020-03-19 12:07:11.762 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Blog(blogId=1240489759664103424, blogTitle=lesson-2.0 反射机制 (Reflection), blogImage=null, blogContent=<h2 id="lesson-20-反射机制-reflection" data-source-line="1">lesson-2.0 反射机制 (Reflection)</h2>
<h3 id="一-反射" data-source-line="3">一: 反射</h3>
<p data-source-line="5"><strong>JAVA 反射机制是在运行状态中:</strong></p>
<ul data-source-line="6">
<li>对于任意一个类,都能够知道这个类的所有属性和方法;</li>
<li>对于任意一个对象,都能够调用它的任意一个方法和属性;</li>
<li>这种动态的获取信息以及调用对象的方法的功能称为 java 语言的反射机制;</li>
</ul>
<p data-source-line="10"><strong>反射提供的功能:</strong></p>
<ul data-source-line="11">
<li>在运行时判断任意一个对象所需的类</li>
<li>在运行时构造任意一个类的对象</li>
<li>在运行时判断任意一个类所具有的的成员变量和方法</li>
<li>在运行时调用任意一个对象的方法</li>
</ul>
<p data-source-line="16"><strong>反射具体加载过程</strong></p>
<p data-source-line="19"><strong><em>简单实例:</em></strong></p>
<ul data-source-line="20">
<li>首先定义一个Animal,里面定义一些构造函数,方法,变量:</li>
</ul>
<pre data-source-line="21"><code class="hljs"><span class="hljs-keyword">package</span> xyz.fusheng.lesson1.reflection;
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>{
    <span class="hljs-keyword">public</span> String name=<span class="hljs-string">"Dog"</span>;
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age = <span class="hljs-number">30</span>;
    <span class="hljs-comment">// <span class="zh-hans">默认无参构造函数</span></span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Animal</span><span class="hljs-params">()</span> </span>{
    }
    <span class="hljs-comment">// <span class="zh-hans">带参数的构造函数</span></span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Animal</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span></span>{
        System.out.println(name+<span class="hljs-string">","</span>+age);
    }
    <span class="hljs-comment">// <span class="zh-hans">公开</span> <span class="zh-hans">方法</span> <span class="zh-hans">返回类型和参数均有</span></span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">sayName</span><span class="hljs-params">(String name)</span> </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-string">"Hello,"</span> + name;
    }
}
</code></pre>
<ul data-source-line="39">
<li>用反射的方法调用这个类:</li>
</ul>
<pre data-source-line="40"><code class="hljs"><span class="hljs-keyword">package</span> xyz.fusheng.lesson1.reflection;
<span class="hljs-keyword">import</span> java.lang.reflect.Constructor;
<span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;
<span class="hljs-keyword">import</span> java.lang.reflect.Method;

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main1</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException</span>{
        <span class="hljs-comment">//1. <span class="zh-hans">加载类</span>,<span class="zh-hans">指定类的完全限定名</span>: <span class="zh-hans">包名</span>+<span class="zh-hans">类名</span></span>
        Class c1 = Class.forName(<span class="hljs-string">"xyz.fusheng.lesson1.reflection.Animal"</span>);
        System.out.println(c1); <span class="hljs-comment">//<span class="zh-hans">打印</span> c1,<span class="zh-hans">发现值和字节码中的类的名称一样</span></span>
        <span class="hljs-comment">//2. <span class="zh-hans">获取</span>(<span class="zh-hans">反射</span>)<span class="zh-hans">类</span>c1<span class="zh-hans">的公开构造函数</span>,<span class="zh-hans">且参数为</span>null</span>
        Constructor ctor1 = c1.getConstructor();
        <span class="hljs-comment">//3. <span class="zh-hans">构造函数的用途</span>,<span class="zh-hans">就是创建类的对象</span>(<span class="zh-hans">实例</span>)</span>
        <span class="hljs-comment">//<span class="zh-hans">除了私有的构造函数外</span>(<span class="zh-hans">单例模式</span>,<span class="zh-hans">禁止通过构造函数创建类的实例</span>,<span class="zh-hans">保证每个类只有一个实例</span>)</span>
        <span class="hljs-comment">//ctor1.newInstance()<span class="zh-hans">默认生成一个</span>Object<span class="zh-hans">对象</span>,<span class="zh-hans">我门需要转化成我们需要的</span>Animal<span class="zh-hans">对象</span></span>
        Animal a1 = (Animal)ctor1.newInstance();
        <span class="hljs-comment">//4. <span class="zh-hans">通过反射调用</span>Animal<span class="zh-hans">的方法</span></span>
        Method method = c1.getMethod(<span class="hljs-string">"sayName"</span>, String.class);
        String name = (String) method.invoke(a1,<span class="hljs-string">"<span class="zh-hans">兔兔</span>"</span>);
        System.out.println(name);
        <span class="hljs-comment">//5. <span class="zh-hans">直接访问类中的方法</span></span>
        System.out.println(a1.sayName(<span class="hljs-string">"<span class="zh-hans">猫猫</span>"</span>));
        <span class="hljs-comment">//6. <span class="zh-hans">访问类中的变量</span></span>
        System.out.println(a1.name);
    }
}
</code></pre>
<ul data-source-line="68">
<li>--&gt;</li>
</ul>
<pre data-source-line="69"><code class="hljs">class xyz<span class="hljs-selector-class">.fusheng</span><span class="hljs-selector-class">.lesson1</span><span class="hljs-selector-class">.reflection</span><span class="hljs-selector-class">.Animal</span>
Hello,<span class="zh-hans">兔兔</span>
Hello,<span class="zh-hans">猫猫</span>
Dog
</code></pre>
<ul data-source-line="75">
<li>反射大概步骤:</li>
<li>1.通过 Class.forName("全类名")拿到反射入口</li>
<li>2.根据反射入口对象(Class)获取类的各种信息</li>
<li>3.通过反射获取对象的实例,并操作对象</li>
<li>4.在程序执行过程中,动态的决定调用的类,以及方法</li>
</ul>, blogGoods=0, blogRead=0, blogCollection=0, blogType=14, blogRemark=null, blogComment=0, blogSource=null, createdTime=2020-03-19 12:06:19, updateTime=null, version=1, deleted=null)]
2020-03-19 12:07:11.980 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 220
2020-03-19 12:07:11.980 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"msg":"更新成功!"}
2020-03-19 12:07:12.218 ERROR [http-nio-8001-exec-7]o.a.c.c.C.[Tomcat].[localhost].[/].[dispatcherServlet].log:175 -Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'log_params' at row 1
### The error may involve xyz.fusheng.blog.mapper.LogMapper.save-Inline
### The error occurred while setting parameters
### SQL: insert into bl_log(             log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip         ) values (             ?, ?, ?,  ?, ?, ?,             ?, ?         )
### Cause: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'log_params' at row 1
; Data truncation: Data too long for column 'log_params' at row 1; nested exception is com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'log_params' at row 1] with root cause
com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'log_params' at row 1
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:104)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:953)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:370)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3409)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3407)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:498)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:185)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy79.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:278)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:58)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy85.save(Unknown Source)
	at xyz.fusheng.blog.service.impl.LogServiceImpl.save(LogServiceImpl.java:30)
	at xyz.fusheng.blog.aspect.RequestAspect.saveExceptionLog(RequestAspect.java:102)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:626)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:66)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at xyz.fusheng.blog.controller.BlogController$$EnhancerBySpringCGLIB$$fdd5737c.update(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:920)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:663)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-03-19 12:07:12.218 ERROR [http-nio-8001-exec-7]o.a.c.c.C.[Tomcat].[localhost].[/].[dispatcherServlet].log:175 -Servlet.service() for servlet [dispatcherServlet] threw exception
org.apache.shiro.UnavailableSecurityManagerException: No SecurityManager accessible to the calling code, either bound to the org.apache.shiro.util.ThreadContext or as a vm static singleton.  This is an invalid application configuration.
	at org.apache.shiro.SecurityUtils.getSecurityManager(SecurityUtils.java:123)
	at org.apache.shiro.subject.Subject$Builder.<init>(Subject.java:627)
	at org.apache.shiro.SecurityUtils.getSubject(SecurityUtils.java:56)
	at xyz.fusheng.blog.utils.ShiroUtils.getLoginUser(ShiroUtils.java:29)
	at xyz.fusheng.blog.interceptor.LoginInterceptor.preHandle(LoginInterceptor.java:30)
	at org.springframework.web.servlet.HandlerExecutionChain.applyPreHandle(HandlerExecutionChain.java:141)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1035)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:920)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:663)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-03-19 12:07:12.218 ERROR [http-nio-8001-exec-7]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].log:175 -Exception Processing ErrorPage[errorCode=0, location=/error]
org.springframework.web.util.NestedServletException: Request processing failed; nested exception is org.apache.shiro.UnavailableSecurityManagerException: No SecurityManager accessible to the calling code, either bound to the org.apache.shiro.util.ThreadContext or as a vm static singleton.  This is an invalid application configuration.
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:920)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:663)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.shiro.UnavailableSecurityManagerException: No SecurityManager accessible to the calling code, either bound to the org.apache.shiro.util.ThreadContext or as a vm static singleton.  This is an invalid application configuration.
	at org.apache.shiro.SecurityUtils.getSecurityManager(SecurityUtils.java:123)
	at org.apache.shiro.subject.Subject$Builder.<init>(Subject.java:627)
	at org.apache.shiro.SecurityUtils.getSubject(SecurityUtils.java:56)
	at xyz.fusheng.blog.utils.ShiroUtils.getLoginUser(ShiroUtils.java:29)
	at xyz.fusheng.blog.interceptor.LoginInterceptor.preHandle(LoginInterceptor.java:30)
	at org.springframework.web.servlet.HandlerExecutionChain.applyPreHandle(HandlerExecutionChain.java:141)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1035)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	... 26 common frames omitted
2020-03-19 12:07:30.597 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /blog/get/1240489759664103424
2020-03-19 12:07:30.599 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 12:07:30.599 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 12:07:30.599 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.BlogController.get
2020-03-19 12:07:30.600 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[1240489759664103424]
2020-03-19 12:07:30.674 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 77
2020-03-19 12:07:30.677 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"<h2 id=\"lesson-20-反射机制-reflection\" data-source-line=\"1\">lesson-2.0 反射机制 (Reflection)</h2>\n<h3 id=\"一-反射\" data-source-line=\"3\">一: 反射</h3>\n<p data-source-line=\"5\"><strong>JAVA 反射机制是在运行状态中:</strong></p>\n<ul data-source-line=\"6\">\n<li>对于任意一个类,都能够知道这个类的所有属性和方法;</li>\n<li>对于任意一个对象,都能够调用它的任意一个方法和属性;</li>\n<li>这种动态的获取信息以及调用对象的方法的功能称为 java 语言的反射机制;</li>\n</ul>\n<p data-source-line=\"10\"><strong>反射提供的功能:</strong></p>\n<ul data-source-line=\"11\">\n<li>在运行时判断任意一个对象所需的类</li>\n<li>在运行时构造任意一个类的对象</li>\n<li>在运行时判断任意一个类所具有的的成员变量和方法</li>\n<li>在运行时调用任意一个对象的方法</li>\n</ul>\n<p data-source-line=\"16\"><strong>反射具体加载过程</strong> <img src=\"file:///D:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qq464A73A6FE5266563C05A2260725DAB1/384b38e734b44a5a9c89f4851baeea96/clipboard.png?ynotemdtimestamp=1584590739806\" alt=\"image\" data-src=\"129D1CDB55284B79BD32008C5D11E63E\" data-ynote-src=\"129D1CDB55284B79BD32008C5D11E63E\" data-processed=\"129D1CDB55284B79BD32008C5D11E63E\" /></p>\n<p data-source-line=\"19\"><strong><em>简单实例:</em></strong></p>\n<ul data-source-line=\"20\">\n<li>首先定义一个Animal,里面定义一些构造函数,方法,变量:</li>\n</ul>\n<pre data-source-line=\"21\"><code class=\"hljs\"><span class=\"hljs-keyword\">package</span> xyz.fusheng.lesson1.reflection;\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Animal</span> </span>{\n    <span class=\"hljs-keyword\">public</span> String name=<span class=\"hljs-string\">\"Dog\"</span>;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> age = <span class=\"hljs-number\">30</span>;\n    <span class=\"hljs-comment\">// <span class=\"zh-hans\">默认无参构造函数</span></span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Animal</span><span class=\"hljs-params\">()</span> </span>{\n    }\n    <span class=\"hljs-comment\">// <span class=\"zh-hans\">带参数的构造函数</span></span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Animal</span><span class=\"hljs-params\">(String name, <span class=\"hljs-keyword\">int</span> age)</span></span>{\n        System.out.println(name+<span class=\"hljs-string\">\",\"</span>+age);\n    }\n    <span class=\"hljs-comment\">// <span class=\"zh-hans\">公开</span> <span class=\"zh-hans\">方法</span> <span class=\"zh-hans\">返回类型和参数均有</span></span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">sayName</span><span class=\"hljs-params\">(String name)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Hello,\"</span> + name;\n    }\n}\n</code></pre>\n<ul data-source-line=\"39\">\n<li>用反射的方法调用这个类:</li>\n</ul>\n<pre data-source-line=\"40\"><code class=\"hljs\"><span class=\"hljs-keyword\">package</span> xyz.fusheng.lesson1.reflection;\n<span class=\"hljs-keyword\">import</span> java.lang.reflect.Constructor;\n<span class=\"hljs-keyword\">import</span> java.lang.reflect.InvocationTargetException;\n<span class=\"hljs-keyword\">import</span> java.lang.reflect.Method;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Main1</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException</span>{\n        <span class=\"hljs-comment\">//1. <span class=\"zh-hans\">加载类</span>,<span class=\"zh-hans\">指定类的完全限定名</span>: <span class=\"zh-hans\">包名</span>+<span class=\"zh-hans\">类名</span></span>\n        Class c1 = Class.forName(<span class=\"hljs-string\">\"xyz.fusheng.lesson1.reflection.Animal\"</span>);\n        System.out.println(c1); <span class=\"hljs-comment\">//<span class=\"zh-hans\">打印</span> c1,<span class=\"zh-hans\">发现值和字节码中的类的名称一样</span></span>\n        <span class=\"hljs-comment\">//2. <span class=\"zh-hans\">获取</span>(<span class=\"zh-hans\">反射</span>)<span class=\"zh-hans\">类</span>c1<span class=\"zh-hans\">的公开构造函数</span>,<span class=\"zh-hans\">且参数为</span>null</span>\n        Constructor ctor1 = c1.getConstructor();\n        <span class=\"hljs-comment\">//3. <span class=\"zh-hans\">构造函数的用途</span>,<span class=\"zh-hans\">就是创建类的对象</span>(<span class=\"zh-hans\">实例</span>)</span>\n        <span class=\"hljs-comment\">//<span class=\"zh-hans\">除了私有的构造函数外</span>(<span class=\"zh-hans\">单例模式</span>,<span class=\"zh-hans\">禁止通过构造函数创建类的实例</span>,<span class=\"zh-hans\">保证每个类只有一个实例</span>)</span>\n        <span class=\"hljs-comment\">//ctor1.newInstance()<span class=\"zh-hans\">默认生成一个</span>Object<span class=\"zh-hans\">对象</span>,<span class=\"zh-hans\">我门需要转化成我们需要的</span>Animal<span class=\"zh-hans\">对象</span></span>\n        Animal a1 = (Animal)ctor1.newInstance();\n        <span class=\"hljs-comment\">//4. <span class=\"zh-hans\">通过反射调用</span>Animal<span class=\"zh-hans\">的方法</span></span>\n        Method method = c1.getMethod(<span class=\"hljs-string\">\"sayName\"</span>, String.class);\n        String name = (String) method.invoke(a1,<span class=\"hljs-string\">\"<span class=\"zh-hans\">兔兔</span>\"</span>);\n        System.out.println(name);\n        <span class=\"hljs-comment\">//5. <span class=\"zh-hans\">直接访问类中的方法</span></span>\n        System.out.println(a1.sayName(<span class=\"hljs-string\">\"<span class=\"zh-hans\">猫猫</span>\"</span>));\n        <span class=\"hljs-comment\">//6. <span class=\"zh-hans\">访问类中的变量</span></span>\n        System.out.println(a1.name);\n    }\n}\n</code></pre>\n<ul data-source-line=\"68\">\n<li>--&gt;</li>\n</ul>\n<pre data-source-line=\"69\"><code class=\"hljs\">class xyz<span class=\"hljs-selector-class\">.fusheng</span><span class=\"hljs-selector-class\">.lesson1</span><span class=\"hljs-selector-class\">.reflection</span><span class=\"hljs-selector-class\">.Animal</span>\nHello,<span class=\"zh-hans\">兔兔</span>\nHello,<span class=\"zh-hans\">猫猫</span>\nDog\n</code></pre>\n<ul data-source-line=\"75\">\n<li>反射大概步骤:</li>\n<li>1.通过 Class.forName(\"全类名\")拿到反射入口</li>\n<li>2.根据反射入口对象(Class)获取类的各种信息</li>\n<li>3.通过反射获取对象的实例,并操作对象</li>\n<li>4.在程序执行过程中,动态的决定调用的类,以及方法</li>\n</ul>","blogGoods":0,"blogId":"1240489759664103424","blogRead":0,"blogTitle":"lesson-2.0 反射机制 (Reflection)","blogType":14,"createdTime":"2020-03-19 12:06:19","version":2},"msg":"操作成功！"}
2020-03-19 12:08:54.933 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /blog/get/1240489759664103424
2020-03-19 12:08:54.934 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 12:08:54.935 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 12:08:54.935 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.BlogController.get
2020-03-19 12:08:54.936 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[1240489759664103424]
2020-03-19 12:08:55.023 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 90
2020-03-19 12:08:55.024 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"<h2 id=\"lesson-20-反射机制-reflection\" data-source-line=\"1\">lesson-2.0 反射机制 (Reflection)</h2>\n<h3 id=\"一-反射\" data-source-line=\"3\">一: 反射</h3>\n<p data-source-line=\"5\"><strong>JAVA 反射机制是在运行状态中:</strong></p>\n<ul data-source-line=\"6\">\n<li>对于任意一个类,都能够知道这个类的所有属性和方法;</li>\n<li>对于任意一个对象,都能够调用它的任意一个方法和属性;</li>\n<li>这种动态的获取信息以及调用对象的方法的功能称为 java 语言的反射机制;</li>\n</ul>\n<p data-source-line=\"10\"><strong>反射提供的功能:</strong></p>\n<ul data-source-line=\"11\">\n<li>在运行时判断任意一个对象所需的类</li>\n<li>在运行时构造任意一个类的对象</li>\n<li>在运行时判断任意一个类所具有的的成员变量和方法</li>\n<li>在运行时调用任意一个对象的方法</li>\n</ul>\n<p data-source-line=\"16\"><strong>反射具体加载过程</strong> <img src=\"file:///D:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qq464A73A6FE5266563C05A2260725DAB1/384b38e734b44a5a9c89f4851baeea96/clipboard.png?ynotemdtimestamp=1584590739806\" alt=\"image\" data-src=\"129D1CDB55284B79BD32008C5D11E63E\" data-ynote-src=\"129D1CDB55284B79BD32008C5D11E63E\" data-processed=\"129D1CDB55284B79BD32008C5D11E63E\" /></p>\n<p data-source-line=\"19\"><strong><em>简单实例:</em></strong></p>\n<ul data-source-line=\"20\">\n<li>首先定义一个Animal,里面定义一些构造函数,方法,变量:</li>\n</ul>\n<pre data-source-line=\"21\"><code class=\"hljs\"><span class=\"hljs-keyword\">package</span> xyz.fusheng.lesson1.reflection;\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Animal</span> </span>{\n    <span class=\"hljs-keyword\">public</span> String name=<span class=\"hljs-string\">\"Dog\"</span>;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> age = <span class=\"hljs-number\">30</span>;\n    <span class=\"hljs-comment\">// <span class=\"zh-hans\">默认无参构造函数</span></span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Animal</span><span class=\"hljs-params\">()</span> </span>{\n    }\n    <span class=\"hljs-comment\">// <span class=\"zh-hans\">带参数的构造函数</span></span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Animal</span><span class=\"hljs-params\">(String name, <span class=\"hljs-keyword\">int</span> age)</span></span>{\n        System.out.println(name+<span class=\"hljs-string\">\",\"</span>+age);\n    }\n    <span class=\"hljs-comment\">// <span class=\"zh-hans\">公开</span> <span class=\"zh-hans\">方法</span> <span class=\"zh-hans\">返回类型和参数均有</span></span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">sayName</span><span class=\"hljs-params\">(String name)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Hello,\"</span> + name;\n    }\n}\n</code></pre>\n<ul data-source-line=\"39\">\n<li>用反射的方法调用这个类:</li>\n</ul>\n<pre data-source-line=\"40\"><code class=\"hljs\"><span class=\"hljs-keyword\">package</span> xyz.fusheng.lesson1.reflection;\n<span class=\"hljs-keyword\">import</span> java.lang.reflect.Constructor;\n<span class=\"hljs-keyword\">import</span> java.lang.reflect.InvocationTargetException;\n<span class=\"hljs-keyword\">import</span> java.lang.reflect.Method;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Main1</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException</span>{\n        <span class=\"hljs-comment\">//1. <span class=\"zh-hans\">加载类</span>,<span class=\"zh-hans\">指定类的完全限定名</span>: <span class=\"zh-hans\">包名</span>+<span class=\"zh-hans\">类名</span></span>\n        Class c1 = Class.forName(<span class=\"hljs-string\">\"xyz.fusheng.lesson1.reflection.Animal\"</span>);\n        System.out.println(c1); <span class=\"hljs-comment\">//<span class=\"zh-hans\">打印</span> c1,<span class=\"zh-hans\">发现值和字节码中的类的名称一样</span></span>\n        <span class=\"hljs-comment\">//2. <span class=\"zh-hans\">获取</span>(<span class=\"zh-hans\">反射</span>)<span class=\"zh-hans\">类</span>c1<span class=\"zh-hans\">的公开构造函数</span>,<span class=\"zh-hans\">且参数为</span>null</span>\n        Constructor ctor1 = c1.getConstructor();\n        <span class=\"hljs-comment\">//3. <span class=\"zh-hans\">构造函数的用途</span>,<span class=\"zh-hans\">就是创建类的对象</span>(<span class=\"zh-hans\">实例</span>)</span>\n        <span class=\"hljs-comment\">//<span class=\"zh-hans\">除了私有的构造函数外</span>(<span class=\"zh-hans\">单例模式</span>,<span class=\"zh-hans\">禁止通过构造函数创建类的实例</span>,<span class=\"zh-hans\">保证每个类只有一个实例</span>)</span>\n        <span class=\"hljs-comment\">//ctor1.newInstance()<span class=\"zh-hans\">默认生成一个</span>Object<span class=\"zh-hans\">对象</span>,<span class=\"zh-hans\">我门需要转化成我们需要的</span>Animal<span class=\"zh-hans\">对象</span></span>\n        Animal a1 = (Animal)ctor1.newInstance();\n        <span class=\"hljs-comment\">//4. <span class=\"zh-hans\">通过反射调用</span>Animal<span class=\"zh-hans\">的方法</span></span>\n        Method method = c1.getMethod(<span class=\"hljs-string\">\"sayName\"</span>, String.class);\n        String name = (String) method.invoke(a1,<span class=\"hljs-string\">\"<span class=\"zh-hans\">兔兔</span>\"</span>);\n        System.out.println(name);\n        <span class=\"hljs-comment\">//5. <span class=\"zh-hans\">直接访问类中的方法</span></span>\n        System.out.println(a1.sayName(<span class=\"hljs-string\">\"<span class=\"zh-hans\">猫猫</span>\"</span>));\n        <span class=\"hljs-comment\">//6. <span class=\"zh-hans\">访问类中的变量</span></span>\n        System.out.println(a1.name);\n    }\n}\n</code></pre>\n<ul data-source-line=\"68\">\n<li>--&gt;</li>\n</ul>\n<pre data-source-line=\"69\"><code class=\"hljs\">class xyz<span class=\"hljs-selector-class\">.fusheng</span><span class=\"hljs-selector-class\">.lesson1</span><span class=\"hljs-selector-class\">.reflection</span><span class=\"hljs-selector-class\">.Animal</span>\nHello,<span class=\"zh-hans\">兔兔</span>\nHello,<span class=\"zh-hans\">猫猫</span>\nDog\n</code></pre>\n<ul data-source-line=\"75\">\n<li>反射大概步骤:</li>\n<li>1.通过 Class.forName(\"全类名\")拿到反射入口</li>\n<li>2.根据反射入口对象(Class)获取类的各种信息</li>\n<li>3.通过反射获取对象的实例,并操作对象</li>\n<li>4.在程序执行过程中,动态的决定调用的类,以及方法</li>\n</ul>","blogGoods":0,"blogId":"1240489759664103424","blogRead":0,"blogTitle":"lesson-2.0 反射机制 (Reflection)","blogType":14,"createdTime":"2020-03-19 12:06:19","version":2},"msg":"操作成功！"}
2020-03-19 12:10:28.480 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /blog/save
2020-03-19 12:10:28.481 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 12:10:28.481 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 12:10:28.481 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.BlogController.save
2020-03-19 12:10:28.482 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Blog(blogId=, blogTitle=lesson-2.1 动态代理 (Dynamic Proxy), blogImage=null, blogContent=<h3 id="lesson-21-动态代理-dynamic-proxy" data-source-line="1">lesson-2.1 动态代理 (Dynamic Proxy)</h3>
<p data-source-line="3"><em>为其他对象提供一个代理以控制对某个对象的访问。代理类主要负责为委托了（真实对象）预处理消息、过滤消息、传递消息给委托类，代理类不现实具体服务，而是利用委托类 来完成服务，并将执行结果封装处理。 其实就是代理类为被代理类预处理消息、过滤消息并在此之后将消息转发给被代理类， 之后还能进行消息的后置处理。代理类和被代理类通常会存在关联关系(即上面提到的持有 的被带离对象的引用)，代理类本身不实现服务，而是通过调用被代理类中的方法来提供服务</em></p>
<p data-source-line="5"><strong><em>代理模式类图如下:</em></strong></p>
<p data-source-line="8"><strong><em>代理模式---实际案例</em></strong><br />某人得了流感,只有护士和医生能够接触,此时,医院设置了保安控制是否可以访问这个人,有保安决定:</p>
<ul data-source-line="11">
<li>首先定义一个接触病人的接口:</li>
</ul>
<pre data-source-line="12"><code class="hljs"><span class="hljs-keyword">package</span> xyz.fusheng.lesson1.agent;

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">PatientProtectInterface</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">showDetails</span><span class="hljs-params">()</span></span>;
}

</code></pre>
<ul data-source-line="21">
<li>然后,病人和代理保安分别继承该接口:</li>
</ul>
<pre data-source-line="22"><code class="hljs"><span class="hljs-keyword">package</span> xyz.fusheng.lesson1.agent;

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Patient</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">PatientProtectInterface</span></span>{
    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showDetails</span><span class="hljs-params">()</span> </span>{
        System.out.println(<span class="hljs-string">"<span class="zh-hans">检查病人</span>,<span class="zh-hans">病人情况正常</span>"</span>);
    }
}
</code></pre>
<ul data-source-line="32">
<li>作为代理的保安:</li>
</ul>
<pre data-source-line="33"><code class="hljs"><span class="hljs-keyword">package</span> xyz.fusheng.lesson1.agent;

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PatientGuardProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">PatientProtectInterface</span> </span>{

    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> visitorCode;
    <span class="hljs-keyword">private</span> Patient doctor = <span class="hljs-keyword">new</span> Patient();

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showDetails</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.visitorCode == <span class="hljs-number">1</span>){
            System.out.println(<span class="hljs-string">"<span class="zh-hans">您可以拜访病人</span>"</span>);
            doctor.showDetails();
        }<span class="hljs-keyword">else</span>{
            System.out.println(<span class="hljs-string">"<span class="zh-hans">您不可以拜访病人</span>"</span>);
        }
    }

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">assignVisitorCode</span><span class="hljs-params">(String profession)</span></span>{
        <span class="hljs-keyword">if</span> (<span class="hljs-string">"<span class="zh-hans">医生</span>"</span>.equals(profession) || <span class="hljs-string">"<span class="zh-hans">护士</span>"</span>.equals(profession)){
            visitorCode = <span class="hljs-number">1</span>;
        }<span class="hljs-keyword">else</span>{
            visitorCode = <span class="hljs-number">0</span>;
        }
    }
}
</code></pre>
<ul data-source-line="61">
<li>测试代码:</li>
</ul>
<pre data-source-line="62"><code class="hljs"><span class="hljs-keyword">package</span> xyz.fusheng.lesson1.agent;

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainTest</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
        PatientGuardProxy patientGuardProxy = <span class="hljs-keyword">new</span> PatientGuardProxy();
        patientGuardProxy.assignVisitorCode(<span class="hljs-string">"<span class="zh-hans">医生</span>"</span>);
        patientGuardProxy.showDetails();;
    }
}
</code></pre>
<ul data-source-line="73">
<li>--&gt;</li>
</ul>
<pre data-source-line="74"><code class="hljs"><span class="zh-hans">您可以拜访病人</span>
<span class="zh-hans">检查病人</span>,<span class="zh-hans">病人情况正常</span>
</code></pre>
<p data-source-line="78"><strong><em>代理类调用时，被代理类被传递给了代理类 HelloProxy，代理类在执行具体方法时通 过所持用的被代理类完成调用。 使用静态代理很容易就完成了对一个类的代理操作。但是静态代理的缺点也暴露了出来： 由于代理只能为一个类服务，如果需要代理的类很多，那么就需要编写大量的代理类，比较 繁琐。</em></strong></p>
<p data-source-line="80"><strong><em>动态代理---实际案例</em></strong></p>
<p data-source-line="82">利用反射机制在运行时创建代理类。接口、被代理类不变，我们构建一个 handler 类来 实现 InvocationHandler 接口。</p>
<pre data-source-line="84"><code class="hljs"><span class="hljs-keyword">package</span> xyz.fusheng.lesson1.agent;

<span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;
<span class="hljs-keyword">import</span> java.lang.reflect.Method;

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span> </span>{

    <span class="hljs-keyword">private</span> Object object;
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> visitorCode;
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ProxyHandler</span><span class="hljs-params">(Object object, <span class="hljs-keyword">int</span> visitorCode)</span></span>{
        <span class="hljs-keyword">this</span>.object =object;
        <span class="hljs-keyword">this</span>.visitorCode = visitorCode;
    }

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>{
        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.visitorCode == <span class="hljs-number">1</span>){
            System.out.println(<span class="hljs-string">"<span class="zh-hans">您可以拜访病人</span>"</span>);
            method.invoke(object, args);
        }<span class="hljs-keyword">else</span>{
            System.out.println(<span class="hljs-string">"n<span class="zh-hans">您不可以拜访病人</span>"</span>);
        }
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;
    }
}
</code></pre>
<ul data-source-line="111">
<li>测试代码:</li>
</ul>
<pre data-source-line="112"><code class="hljs"><span class="hljs-keyword">package</span> xyz.fusheng.lesson1.agent;

<span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;
<span class="hljs-keyword">import</span> java.lang.reflect.Proxy;

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainTest2</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
        PatientProtectInterface patient = <span class="hljs-keyword">new</span> Patient();
        InvocationHandler handler = <span class="hljs-keyword">new</span> ProxyHandler(patient, <span class="hljs-number">1</span>);
        PatientProtectInterface proxyHello = (PatientProtectInterface) Proxy.newProxyInstance(patient.getClass().getClassLoader(), patient.getClass().getInterfaces(),handler);
        proxyHello.showDetails();
    }
}
</code></pre>
<ul data-source-line="127">
<li>--&gt;</li>
</ul>
<pre data-source-line="128"><code class="hljs"><span class="zh-hans">您可以拜访病人</span>
<span class="zh-hans">检查病人</span>,<span class="zh-hans">病人情况正常</span></code></pre>, blogGoods=null, blogRead=null, blogCollection=null, blogType=14, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-03-19 12:10:28.595 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 115
2020-03-19 12:10:28.596 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"msg":"添加成功!"}
2020-03-19 12:10:28.750 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /blog/getByPage
2020-03-19 12:10:28.750 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 12:10:28.751 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 12:10:28.751 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.BlogController.getByPage
2020-03-19 12:10:28.752 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=1, index=0, list=[BlogVo(blogId=1240489759664103424, blogTitle=lesson-2.0 反射机制 (Reflection), blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=Spring 专题, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-03-19 12:06:19, updateTime=2020-03-19 12:06:19)], params={}, sortColumn=, sortMethod=asc)]
2020-03-19 12:10:28.985 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 236
2020-03-19 12:10:28.985 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1240489759664103424","blogRead":0,"blogTitle":"lesson-2.0 反射机制 (Reflection)","createdTime":"2020-03-19 12:06:19","typeName":"Spring 专题","updateTime":"2020-03-19 12:06:53"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1240490799587254272","blogRead":0,"blogTitle":"lesson-2.1 动态代理 (Dynamic Proxy)","createdTime":"2020-03-19 12:10:27","typeName":"Spring 专题","updateTime":"2020-03-19 12:10:27"}],"pageSize":10,"params":{},"sortColumn":"","sortMethod":"asc","totalCount":2,"totalPage":1},"msg":"操作成功！"}
2020-03-19 12:10:38.428 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /type/listBack
2020-03-19 12:10:38.429 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 12:10:38.430 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 12:10:38.430 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.TypeController.list
2020-03-19 12:10:38.431 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 12:10:38.501 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 73
2020-03-19 12:10:38.502 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":13,"typeName":"个人博客开发文档"},{"enable":1,"typeBlogCount":0,"typeId":14,"typeName":"Spring 专题"},{"enable":1,"typeBlogCount":0,"typeId":15,"typeName":"Spring Boot 专题"},{"enable":1,"typeBlogCount":0,"typeId":16,"typeName":"Spring Cloud 专题"},{"enable":1,"typeBlogCount":0,"typeId":17,"typeName":"MyBatis 专题"},{"enable":1,"typeBlogCount":0,"typeId":18,"typeName":"Linux 专题"},{"enable":1,"typeBlogCount":0,"typeId":19,"typeName":"Security 专题"},{"enable":1,"typeBlogCount":0,"typeId":20,"typeName":"Docker 专题"}],"msg":"操作成功！"}
2020-03-19 12:10:43.910 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /admin/info
2020-03-19 12:10:43.910 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 12:10:43.911 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 12:10:43.911 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.AdminController.getLoginInfo
2020-03-19 12:10:43.912 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 12:10:43.912 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 3
2020-03-19 12:10:43.913 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"name":"张浩","password":"******","signature":"浮生若梦,为欢几何!","username":"admin"},"msg":"操作成功！"}
2020-03-19 12:10:44.188 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /type/getList
2020-03-19 12:10:44.189 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /type/listBack
2020-03-19 12:10:44.190 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 12:10:44.191 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 12:10:44.192 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.TypeController.list
2020-03-19 12:10:44.194 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 12:10:44.189 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 12:10:44.195 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 12:10:44.195 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.TypeController.getList
2020-03-19 12:10:44.196 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 12:10:44.265 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 76
2020-03-19 12:10:44.266 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":13,"typeName":"个人博客开发文档"},{"enable":1,"typeBlogCount":0,"typeId":14,"typeName":"Spring 专题"},{"enable":1,"typeBlogCount":0,"typeId":15,"typeName":"Spring Boot 专题"},{"enable":1,"typeBlogCount":0,"typeId":16,"typeName":"Spring Cloud 专题"},{"enable":1,"typeBlogCount":0,"typeId":17,"typeName":"MyBatis 专题"},{"enable":1,"typeBlogCount":0,"typeId":18,"typeName":"Linux 专题"},{"enable":1,"typeBlogCount":0,"typeId":19,"typeName":"Security 专题"},{"enable":1,"typeBlogCount":0,"typeId":20,"typeName":"Docker 专题"}],"msg":"操作成功！"}
2020-03-19 12:10:45.265 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 1077
2020-03-19 12:10:45.266 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":[{"typeBlogCount":0,"typeId":13,"typeName":"个人博客开发文档"},{"typeBlogCount":0,"typeId":14,"typeName":"Spring 专题"},{"typeBlogCount":0,"typeId":15,"typeName":"Spring Boot 专题"},{"typeBlogCount":0,"typeId":16,"typeName":"Spring Cloud 专题"},{"typeBlogCount":0,"typeId":17,"typeName":"MyBatis 专题"},{"typeBlogCount":0,"typeId":18,"typeName":"Linux 专题"},{"typeBlogCount":0,"typeId":19,"typeName":"Security 专题"},{"typeBlogCount":0,"typeId":20,"typeName":"Docker 专题"}],"msg":"操作成功！"}
2020-03-19 12:11:26.503 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /type/get/14
2020-03-19 12:11:26.505 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 12:11:26.507 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 12:11:26.507 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.TypeController.getById
2020-03-19 12:11:26.507 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[14]
2020-03-19 12:11:26.581 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 78
2020-03-19 12:11:26.582 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"enable":1,"typeBlogCount":0,"typeId":14,"typeName":"Spring 专题"},"msg":"操作成功！"}
2020-03-19 12:11:30.403 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /blog/getByPage
2020-03-19 12:11:30.404 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 12:11:30.405 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 12:11:30.405 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.BlogController.getByPage
2020-03-19 12:11:30.406 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, index=0, list=[], params={}, sortColumn=, sortMethod=asc)]
2020-03-19 12:11:30.605 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 202
2020-03-19 12:11:30.606 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1240489759664103424","blogRead":0,"blogTitle":"lesson-2.0 反射机制 (Reflection)","createdTime":"2020-03-19 12:06:19","typeName":"Spring 专题","updateTime":"2020-03-19 12:06:53"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1240490799587254272","blogRead":0,"blogTitle":"lesson-2.1 动态代理 (Dynamic Proxy)","createdTime":"2020-03-19 12:10:27","typeName":"Spring 专题","updateTime":"2020-03-19 12:10:27"}],"pageSize":10,"params":{},"sortColumn":"","sortMethod":"asc","totalCount":2,"totalPage":1},"msg":"操作成功！"}
2020-03-19 12:12:14.133 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /blog/save
2020-03-19 12:12:14.134 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 12:12:14.134 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 12:12:14.135 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.BlogController.save
2020-03-19 12:12:14.135 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Blog(blogId=, blogTitle=lesson-2.2 依赖倒置 (Dependency Inversion), blogImage=null, blogContent=<h3 id="lesson-22-依赖倒置-dependency-inversion" data-source-line="1">lesson-2.2 依赖倒置 (Dependency Inversion)</h3>
<blockquote data-source-line="4">
<p>依赖倒置原则（Dependence Inversion Principle）是程序要依赖于抽象接口，不要依赖于具体实现。简单的说就是要求对抽象进行编程，不要对实现进行编程，这样就降低了客户与实现模块间的耦合。</p>
</blockquote>
<blockquote data-source-line="6">
<p>面向过程的开发，上层调用下层，上层依赖于下层，当下层剧烈变动时上层也要跟着变动，这就会导致模块的复用性降低而且大大提高了开发的成本。</p>
</blockquote>
<blockquote data-source-line="8">
<p>面向对象的开发很好的解决了这个问题，一般情况下抽象的变化概率很小，让用户程序依赖于抽象，实现的细节也依赖于抽象。即使实现细节不断变动，只要抽象不变，客户程序就不需要变化。这大大降低了客户程序与实现细节的耦合度。</p>
</blockquote>
<p data-source-line="10"><strong>实际案例</strong></p>
<p data-source-line="12">假设我们设计一辆汽车：先设计轮子，然后根据轮子大小设计底盘，接着根据底盘设计 车身，最后根据车身设计好整个汽车。这里就出现了一个&ldquo;依赖&rdquo;关系：汽车依赖车身，车 身依赖底盘，底盘依赖轮子。 <img src="file:///D:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qq464A73A6FE5266563C05A2260725DAB1/671ec299486946d0a76d21846b5a8fdb/clipboard.png?ynotemdtimestamp=1584590739806" alt="image" data-src="F20D4437F1D940F4BF03FD1C053C8292" data-ynote-src="F20D4437F1D940F4BF03FD1C053C8292" data-processed="F20D4437F1D940F4BF03FD1C053C8292" />这样的设计看起来没问题，但是可维护性却很低。假设设计完工之后，上司却突然说 根据市场需求的变动，要我们把车子的轮子设计都改大一码。这下我们就蛋疼了：因为我们 是根据轮子的尺寸设计的底盘，轮子的尺寸一改，底盘的设计就得修改。<br />同样因为我们是根据底盘设计的车身，那么车身也得改，同理汽车设计也得改&mdash;&mdash;整 个设计几乎都得改！我们现在换一种思路。我们先设计汽车的大概样子，然后根据汽车的样 子来设计车身，根据车身来设计底盘，最后根据底盘来设计轮子。这时候，依赖关系就倒置 过来了：轮子依赖底盘， 底盘依赖车身， 车身依赖汽车。 <img src="file:///D:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qq464A73A6FE5266563C05A2260725DAB1/5af142d8df154b27a0a8b376d2405abc/clipboard.png?ynotemdtimestamp=1584590739806" alt="image" data-src="BFB4327137244086ADE96E62A24DEAE0" data-ynote-src="BFB4327137244086ADE96E62A24DEAE0" data-processed="BFB4327137244086ADE96E62A24DEAE0" />这时候，上司再说要改动轮子的设计，我们就只需要改动轮子的设计，而不需要动底盘， 车身，汽车的设计了。这就是依赖倒置原则&mdash;&mdash;把原本的高层建筑依赖底层建筑&ldquo;倒置&rdquo;过 来，变成底层建筑依赖高层建筑。高层建筑决定需要什么，底层去实现这样的需求，但是 高层并不用管底层是怎么实现的。这样就不会出现前面的&ldquo;牵一发动全身&rdquo;的情况。</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=null, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-03-19 12:12:14.412 ERROR [http-nio-8001-exec-8]o.a.c.c.C.[Tomcat].[localhost].[/].[dispatcherServlet].log:175 -Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: java.sql.SQLIntegrityConstraintViolationException: Column 'blog_type' cannot be null
### The error may involve xyz.fusheng.blog.mapper.BlogMapper.save-Inline
### The error occurred while setting parameters
### SQL: insert into bl_blog(             blog_id, blog_title,blog_image, blog_content, blog_type, blog_remark, blog_source         ) values (             ?, ?, ?, ?, ?, ?, ?         )
### Cause: java.sql.SQLIntegrityConstraintViolationException: Column 'blog_type' cannot be null
; Column 'blog_type' cannot be null; nested exception is java.sql.SQLIntegrityConstraintViolationException: Column 'blog_type' cannot be null] with root cause
java.sql.SQLIntegrityConstraintViolationException: Column 'blog_type' cannot be null
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:953)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:370)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3409)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3407)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:498)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:185)
	at sun.reflect.GeneratedMethodAccessor75.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy79.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:278)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:58)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy93.save(Unknown Source)
	at xyz.fusheng.blog.service.impl.BlogServiceImpl.save(BlogServiceImpl.java:42)
	at xyz.fusheng.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$4f70dde1.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:685)
	at xyz.fusheng.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$3d6a345e.save(<generated>)
	at xyz.fusheng.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$4f70dde1.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:685)
	at xyz.fusheng.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$38b532b2.save(<generated>)
	at xyz.fusheng.blog.controller.BlogController.save(BlogController.java:37)
	at xyz.fusheng.blog.controller.BlogController$$FastClassBySpringCGLIB$$a7ebadad.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at sun.reflect.GeneratedMethodAccessor84.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at xyz.fusheng.blog.controller.BlogController$$EnhancerBySpringCGLIB$$fdd5737c.save(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-03-19 12:12:14.415 ERROR [http-nio-8001-exec-8]o.a.c.c.C.[Tomcat].[localhost].[/].[dispatcherServlet].log:175 -Servlet.service() for servlet [dispatcherServlet] threw exception
org.apache.shiro.UnavailableSecurityManagerException: No SecurityManager accessible to the calling code, either bound to the org.apache.shiro.util.ThreadContext or as a vm static singleton.  This is an invalid application configuration.
	at org.apache.shiro.SecurityUtils.getSecurityManager(SecurityUtils.java:123)
	at org.apache.shiro.subject.Subject$Builder.<init>(Subject.java:627)
	at org.apache.shiro.SecurityUtils.getSubject(SecurityUtils.java:56)
	at xyz.fusheng.blog.utils.ShiroUtils.getLoginUser(ShiroUtils.java:29)
	at xyz.fusheng.blog.interceptor.LoginInterceptor.preHandle(LoginInterceptor.java:30)
	at org.springframework.web.servlet.HandlerExecutionChain.applyPreHandle(HandlerExecutionChain.java:141)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1035)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-03-19 12:12:14.416 ERROR [http-nio-8001-exec-8]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].log:175 -Exception Processing ErrorPage[errorCode=0, location=/error]
org.springframework.web.util.NestedServletException: Request processing failed; nested exception is org.apache.shiro.UnavailableSecurityManagerException: No SecurityManager accessible to the calling code, either bound to the org.apache.shiro.util.ThreadContext or as a vm static singleton.  This is an invalid application configuration.
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.shiro.UnavailableSecurityManagerException: No SecurityManager accessible to the calling code, either bound to the org.apache.shiro.util.ThreadContext or as a vm static singleton.  This is an invalid application configuration.
	at org.apache.shiro.SecurityUtils.getSecurityManager(SecurityUtils.java:123)
	at org.apache.shiro.subject.Subject$Builder.<init>(Subject.java:627)
	at org.apache.shiro.SecurityUtils.getSubject(SecurityUtils.java:56)
	at xyz.fusheng.blog.utils.ShiroUtils.getLoginUser(ShiroUtils.java:29)
	at xyz.fusheng.blog.interceptor.LoginInterceptor.preHandle(LoginInterceptor.java:30)
	at org.springframework.web.servlet.HandlerExecutionChain.applyPreHandle(HandlerExecutionChain.java:141)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1035)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	... 26 common frames omitted
2020-03-19 12:12:26.944 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /admin/info
2020-03-19 12:12:26.946 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 12:12:26.947 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 12:12:26.948 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.AdminController.getLoginInfo
2020-03-19 12:12:26.949 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 12:12:26.950 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 6
2020-03-19 12:12:26.951 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"name":"张浩","password":"******","signature":"浮生若梦,为欢几何!","username":"admin"},"msg":"操作成功！"}
2020-03-19 12:12:27.338 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /blog/getByPage
2020-03-19 12:12:27.339 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 12:12:27.339 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 12:12:27.340 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.BlogController.getByPage
2020-03-19 12:12:27.341 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, index=0, list=[], params={}, sortColumn=, sortMethod=asc)]
2020-03-19 12:12:27.386 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /type/getList
2020-03-19 12:12:27.386 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 12:12:27.387 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 12:12:27.387 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.TypeController.getList
2020-03-19 12:12:27.389 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 12:12:27.495 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 109
2020-03-19 12:12:27.496 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":[{"typeBlogCount":0,"typeId":13,"typeName":"个人博客开发文档"},{"typeBlogCount":0,"typeId":14,"typeName":"Spring 专题"},{"typeBlogCount":0,"typeId":15,"typeName":"Spring Boot 专题"},{"typeBlogCount":0,"typeId":16,"typeName":"Spring Cloud 专题"},{"typeBlogCount":0,"typeId":17,"typeName":"MyBatis 专题"},{"typeBlogCount":0,"typeId":18,"typeName":"Linux 专题"},{"typeBlogCount":0,"typeId":19,"typeName":"Security 专题"},{"typeBlogCount":0,"typeId":20,"typeName":"Docker 专题"}],"msg":"操作成功！"}
2020-03-19 12:12:27.647 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 309
2020-03-19 12:12:27.647 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1240489759664103424","blogRead":0,"blogTitle":"lesson-2.0 反射机制 (Reflection)","createdTime":"2020-03-19 12:06:19","typeName":"Spring 专题","updateTime":"2020-03-19 12:06:53"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1240490799587254272","blogRead":0,"blogTitle":"lesson-2.1 动态代理 (Dynamic Proxy)","createdTime":"2020-03-19 12:10:27","typeName":"Spring 专题","updateTime":"2020-03-19 12:10:27"}],"pageSize":10,"params":{},"sortColumn":"","sortMethod":"asc","totalCount":2,"totalPage":1},"msg":"操作成功！"}
2020-03-19 12:12:58.878 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /blog/save
2020-03-19 12:12:58.879 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 12:12:58.879 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 12:12:58.880 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.BlogController.save
2020-03-19 12:12:58.880 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Blog(blogId=, blogTitle=lesson-2.2 依赖倒置 (Dependency Inversion), blogImage=null, blogContent=<h3 id="lesson-22-依赖倒置-dependency-inversion" data-source-line="1">lesson-2.2 依赖倒置 (Dependency Inversion)</h3>
<blockquote data-source-line="4">
<p>依赖倒置原则（Dependence Inversion Principle）是程序要依赖于抽象接口，不要依赖于具体实现。简单的说就是要求对抽象进行编程，不要对实现进行编程，这样就降低了客户与实现模块间的耦合。</p>
</blockquote>
<blockquote data-source-line="6">
<p>面向过程的开发，上层调用下层，上层依赖于下层，当下层剧烈变动时上层也要跟着变动，这就会导致模块的复用性降低而且大大提高了开发的成本。</p>
</blockquote>
<blockquote data-source-line="8">
<p>面向对象的开发很好的解决了这个问题，一般情况下抽象的变化概率很小，让用户程序依赖于抽象，实现的细节也依赖于抽象。即使实现细节不断变动，只要抽象不变，客户程序就不需要变化。这大大降低了客户程序与实现细节的耦合度。</p>
</blockquote>
<p data-source-line="10"><strong>实际案例</strong></p>
<p data-source-line="12">假设我们设计一辆汽车：先设计轮子，然后根据轮子大小设计底盘，接着根据底盘设计 车身，最后根据车身设计好整个汽车。这里就出现了一个&ldquo;依赖&rdquo;关系：汽车依赖车身，车 身依赖底盘，底盘依赖轮子。 <img src="file:///D:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qq464A73A6FE5266563C05A2260725DAB1/671ec299486946d0a76d21846b5a8fdb/clipboard.png?ynotemdtimestamp=1584590739806" alt="image" data-src="F20D4437F1D940F4BF03FD1C053C8292" data-ynote-src="F20D4437F1D940F4BF03FD1C053C8292" data-processed="F20D4437F1D940F4BF03FD1C053C8292" />这样的设计看起来没问题，但是可维护性却很低。假设设计完工之后，上司却突然说 根据市场需求的变动，要我们把车子的轮子设计都改大一码。这下我们就蛋疼了：因为我们 是根据轮子的尺寸设计的底盘，轮子的尺寸一改，底盘的设计就得修改。<br />同样因为我们是根据底盘设计的车身，那么车身也得改，同理汽车设计也得改&mdash;&mdash;整 个设计几乎都得改！我们现在换一种思路。我们先设计汽车的大概样子，然后根据汽车的样 子来设计车身，根据车身来设计底盘，最后根据底盘来设计轮子。这时候，依赖关系就倒置 过来了：轮子依赖底盘， 底盘依赖车身， 车身依赖汽车。 <img src="file:///D:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qq464A73A6FE5266563C05A2260725DAB1/5af142d8df154b27a0a8b376d2405abc/clipboard.png?ynotemdtimestamp=1584590739806" alt="image" data-src="BFB4327137244086ADE96E62A24DEAE0" data-ynote-src="BFB4327137244086ADE96E62A24DEAE0" data-processed="BFB4327137244086ADE96E62A24DEAE0" />这时候，上司再说要改动轮子的设计，我们就只需要改动轮子的设计，而不需要动底盘， 车身，汽车的设计了。这就是依赖倒置原则&mdash;&mdash;把原本的高层建筑依赖底层建筑&ldquo;倒置&rdquo;过 来，变成底层建筑依赖高层建筑。高层建筑决定需要什么，底层去实现这样的需求，但是 高层并不用管底层是怎么实现的。这样就不会出现前面的&ldquo;牵一发动全身&rdquo;的情况。</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=14, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-03-19 12:12:58.988 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 110
2020-03-19 12:12:58.989 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"msg":"添加成功!"}
2020-03-19 12:12:59.139 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /blog/getByPage
2020-03-19 12:12:59.140 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 12:12:59.140 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 12:12:59.140 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.BlogController.getByPage
2020-03-19 12:12:59.141 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=2, index=0, list=[BlogVo(blogId=1240489759664103424, blogTitle=lesson-2.0 反射机制 (Reflection), blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=Spring 专题, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-03-19 12:06:19, updateTime=2020-03-19 12:06:53), BlogVo(blogId=1240490799587254272, blogTitle=lesson-2.1 动态代理 (Dynamic Proxy), blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=Spring 专题, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-03-19 12:10:27, updateTime=2020-03-19 12:10:27)], params={}, sortColumn=, sortMethod=asc)]
2020-03-19 12:12:59.347 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 208
2020-03-19 12:12:59.349 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1240489759664103424","blogRead":0,"blogTitle":"lesson-2.0 反射机制 (Reflection)","createdTime":"2020-03-19 12:06:19","typeName":"Spring 专题","updateTime":"2020-03-19 12:06:53"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1240490799587254272","blogRead":0,"blogTitle":"lesson-2.1 动态代理 (Dynamic Proxy)","createdTime":"2020-03-19 12:10:27","typeName":"Spring 专题","updateTime":"2020-03-19 12:10:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1240491430402187264","blogRead":0,"blogTitle":"lesson-2.2 依赖倒置 (Dependency Inversion)","createdTime":"2020-03-19 12:12:58","typeName":"Spring 专题","updateTime":"2020-03-19 12:12:58"}],"pageSize":10,"params":{},"sortColumn":"","sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}
2020-03-19 12:14:57.332 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /about/getByPage
2020-03-19 12:14:57.333 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 12:14:57.334 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 12:14:57.334 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.AboutController.getByPage
2020-03-19 12:14:57.334 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, index=0, list=[], params={}, sortColumn=, sortMethod=asc)]
2020-03-19 12:14:57.499 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 167
2020-03-19 12:14:57.502 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"index":0,"list":[{"aboutId":1,"aboutRead":5,"aboutTitle":"修改更新关于我的信息","createdTime":"2020-03-14 10:46:26","enable":1,"updateTime":"2020-03-14 11:00:06"},{"aboutId":2,"aboutRead":0,"aboutTitle":"测试关于我的信息1","createdTime":"2020-03-14 10:47:18","enable":0,"updateTime":"2020-03-14 10:47:18"},{"aboutId":3,"aboutRead":0,"aboutTitle":"测试关于我的信息2","createdTime":"2020-03-14 10:47:24","enable":0,"updateTime":"2020-03-14 10:47:24"}],"pageSize":10,"params":{},"sortColumn":"","sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}
2020-03-19 12:15:00.534 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /about/get/1
2020-03-19 12:15:00.534 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 12:15:00.535 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 12:15:00.535 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.AboutController.get
2020-03-19 12:15:00.535 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[1]
2020-03-19 12:15:00.626 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 93
2020-03-19 12:15:00.627 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"aboutContent":"修改后的测试内容1","aboutId":1,"aboutRead":5,"aboutTitle":"修改更新关于我的信息","createdTime":"2020-03-14 10:46:26","updateTime":"2020-03-14 11:00:06","version":10},"msg":"操作成功！"}
2020-03-19 12:15:07.853 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /about/get/1
2020-03-19 12:15:07.854 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 12:15:07.855 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 12:15:07.856 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.AboutController.get
2020-03-19 12:15:07.857 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[1]
2020-03-19 12:15:07.933 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 80
2020-03-19 12:15:07.934 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"aboutContent":"修改后的测试内容1","aboutId":1,"aboutRead":5,"aboutTitle":"修改更新关于我的信息","createdTime":"2020-03-14 10:46:26","updateTime":"2020-03-14 11:00:06","version":10},"msg":"操作成功！"}
2020-03-19 12:15:11.305 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /admin/info
2020-03-19 12:15:11.308 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 12:15:11.309 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 12:15:11.309 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.AdminController.getLoginInfo
2020-03-19 12:15:11.310 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 12:15:11.312 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 7
2020-03-19 12:15:11.313 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"name":"张浩","password":"******","signature":"浮生若梦,为欢几何!","username":"admin"},"msg":"操作成功！"}
2020-03-19 12:15:11.635 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /type/getList
2020-03-19 12:15:11.636 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /about/getByPage
2020-03-19 12:15:11.637 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 12:15:11.636 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 12:15:11.638 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 12:15:11.639 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.TypeController.getList
2020-03-19 12:15:11.640 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 12:15:11.639 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 12:15:11.642 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.AboutController.getByPage
2020-03-19 12:15:11.643 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, index=0, list=[], params={}, sortColumn=, sortMethod=asc)]
2020-03-19 12:15:11.708 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 73
2020-03-19 12:15:11.709 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":[{"typeBlogCount":0,"typeId":13,"typeName":"个人博客开发文档"},{"typeBlogCount":0,"typeId":14,"typeName":"Spring 专题"},{"typeBlogCount":0,"typeId":15,"typeName":"Spring Boot 专题"},{"typeBlogCount":0,"typeId":16,"typeName":"Spring Cloud 专题"},{"typeBlogCount":0,"typeId":17,"typeName":"MyBatis 专题"},{"typeBlogCount":0,"typeId":18,"typeName":"Linux 专题"},{"typeBlogCount":0,"typeId":19,"typeName":"Security 专题"},{"typeBlogCount":0,"typeId":20,"typeName":"Docker 专题"}],"msg":"操作成功！"}
2020-03-19 12:15:11.786 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 150
2020-03-19 12:15:11.786 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"index":0,"list":[{"aboutId":1,"aboutRead":5,"aboutTitle":"修改更新关于我的信息","createdTime":"2020-03-14 10:46:26","enable":1,"updateTime":"2020-03-14 11:00:06"},{"aboutId":2,"aboutRead":0,"aboutTitle":"测试关于我的信息1","createdTime":"2020-03-14 10:47:18","enable":0,"updateTime":"2020-03-14 10:47:18"},{"aboutId":3,"aboutRead":0,"aboutTitle":"测试关于我的信息2","createdTime":"2020-03-14 10:47:24","enable":0,"updateTime":"2020-03-14 10:47:24"}],"pageSize":10,"params":{},"sortColumn":"","sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}
2020-03-19 12:15:17.479 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /type/listBack
2020-03-19 12:15:17.480 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 12:15:17.480 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 12:15:17.481 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.TypeController.list
2020-03-19 12:15:17.481 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 12:15:17.550 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 71
2020-03-19 12:15:17.551 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":13,"typeName":"个人博客开发文档"},{"enable":1,"typeBlogCount":0,"typeId":14,"typeName":"Spring 专题"},{"enable":1,"typeBlogCount":0,"typeId":15,"typeName":"Spring Boot 专题"},{"enable":1,"typeBlogCount":0,"typeId":16,"typeName":"Spring Cloud 专题"},{"enable":1,"typeBlogCount":0,"typeId":17,"typeName":"MyBatis 专题"},{"enable":1,"typeBlogCount":0,"typeId":18,"typeName":"Linux 专题"},{"enable":1,"typeBlogCount":0,"typeId":19,"typeName":"Security 专题"},{"enable":1,"typeBlogCount":0,"typeId":20,"typeName":"Docker 专题"}],"msg":"操作成功！"}
2020-03-19 12:17:40.647 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /type/listBack
2020-03-19 12:17:40.648 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 12:17:40.649 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 0:0:0:0:0:0:0:1
2020-03-19 12:17:40.649 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.TypeController.list
2020-03-19 12:17:40.649 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 12:17:40.725 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 78
2020-03-19 12:17:40.726 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":13,"typeName":"个人博客开发文档"},{"enable":1,"typeBlogCount":0,"typeId":14,"typeName":"Spring 专题"},{"enable":1,"typeBlogCount":0,"typeId":15,"typeName":"Spring Boot 专题"},{"enable":1,"typeBlogCount":0,"typeId":16,"typeName":"Spring Cloud 专题"},{"enable":1,"typeBlogCount":0,"typeId":17,"typeName":"MyBatis 专题"},{"enable":1,"typeBlogCount":0,"typeId":18,"typeName":"Linux 专题"},{"enable":1,"typeBlogCount":0,"typeId":19,"typeName":"Security 专题"},{"enable":1,"typeBlogCount":0,"typeId":20,"typeName":"Docker 专题"}],"msg":"操作成功！"}
2020-03-19 12:44:44.473 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /blog/getByPage
2020-03-19 12:44:44.475 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 12:44:44.475 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 12:44:44.476 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.BlogController.getByPage
2020-03-19 12:44:44.479 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, index=0, list=[], params={}, sortColumn=, sortMethod=asc)]
2020-03-19 12:44:46.716 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 2243
2020-03-19 12:44:46.717 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1240489759664103424","blogRead":0,"blogTitle":"lesson-2.0 反射机制 (Reflection)","createdTime":"2020-03-19 12:06:19","typeName":"Spring 专题","updateTime":"2020-03-19 12:06:53"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1240490799587254272","blogRead":0,"blogTitle":"lesson-2.1 动态代理 (Dynamic Proxy)","createdTime":"2020-03-19 12:10:27","typeName":"Spring 专题","updateTime":"2020-03-19 12:10:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1240491430402187264","blogRead":0,"blogTitle":"lesson-2.2 依赖倒置 (Dependency Inversion)","createdTime":"2020-03-19 12:12:58","typeName":"Spring 专题","updateTime":"2020-03-19 12:12:58"}],"pageSize":10,"params":{},"sortColumn":"","sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}
2020-03-19 12:44:47.829 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /about/getByPage
2020-03-19 12:44:47.830 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 12:44:47.830 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 12:44:47.831 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.AboutController.getByPage
2020-03-19 12:44:47.831 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, index=0, list=[], params={}, sortColumn=, sortMethod=asc)]
2020-03-19 12:44:47.989 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 159
2020-03-19 12:44:47.989 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"index":0,"list":[{"aboutId":1,"aboutRead":5,"aboutTitle":"修改更新关于我的信息","createdTime":"2020-03-14 10:46:26","enable":1,"updateTime":"2020-03-14 11:00:06"},{"aboutId":2,"aboutRead":0,"aboutTitle":"测试关于我的信息1","createdTime":"2020-03-14 10:47:18","enable":0,"updateTime":"2020-03-14 10:47:18"},{"aboutId":3,"aboutRead":0,"aboutTitle":"测试关于我的信息2","createdTime":"2020-03-14 10:47:24","enable":0,"updateTime":"2020-03-14 10:47:24"}],"pageSize":10,"params":{},"sortColumn":"","sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}
2020-03-19 12:44:49.976 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /blog/getByPage
2020-03-19 12:44:49.977 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 12:44:49.978 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 12:44:49.979 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.BlogController.getByPage
2020-03-19 12:44:49.979 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, index=0, list=[], params={}, sortColumn=, sortMethod=asc)]
2020-03-19 12:44:50.197 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 221
2020-03-19 12:44:50.198 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1240489759664103424","blogRead":0,"blogTitle":"lesson-2.0 反射机制 (Reflection)","createdTime":"2020-03-19 12:06:19","typeName":"Spring 专题","updateTime":"2020-03-19 12:06:53"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1240490799587254272","blogRead":0,"blogTitle":"lesson-2.1 动态代理 (Dynamic Proxy)","createdTime":"2020-03-19 12:10:27","typeName":"Spring 专题","updateTime":"2020-03-19 12:10:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1240491430402187264","blogRead":0,"blogTitle":"lesson-2.2 依赖倒置 (Dependency Inversion)","createdTime":"2020-03-19 12:12:58","typeName":"Spring 专题","updateTime":"2020-03-19 12:12:58"}],"pageSize":10,"params":{},"sortColumn":"","sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}
2020-03-19 12:44:51.837 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /type/listBack
2020-03-19 12:44:51.838 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 12:44:51.838 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 12:44:51.839 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.TypeController.list
2020-03-19 12:44:51.839 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 12:44:51.916 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 79
2020-03-19 12:44:51.917 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":13,"typeName":"个人博客开发文档"},{"enable":1,"typeBlogCount":0,"typeId":14,"typeName":"Spring 专题"},{"enable":1,"typeBlogCount":0,"typeId":15,"typeName":"Spring Boot 专题"},{"enable":1,"typeBlogCount":0,"typeId":16,"typeName":"Spring Cloud 专题"},{"enable":1,"typeBlogCount":0,"typeId":17,"typeName":"MyBatis 专题"},{"enable":1,"typeBlogCount":0,"typeId":18,"typeName":"Linux 专题"},{"enable":1,"typeBlogCount":0,"typeId":19,"typeName":"Security 专题"},{"enable":1,"typeBlogCount":0,"typeId":20,"typeName":"Docker 专题"}],"msg":"操作成功！"}
2020-03-19 13:08:41.440 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /log/getByPage
2020-03-19 13:08:41.440 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 13:08:41.441 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 13:08:41.442 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.LogController.getByPage
2020-03-19 13:08:41.442 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, index=0, list=[], params={}, sortColumn=, sortMethod=asc)]
2020-03-19 13:08:43.696 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 2256
2020-03-19 13:08:43.716 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"index":0,"list":[{"createdTime":"2020-03-12 13:59:30","logId":5,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"B060099F82EDCCC195D1C76F328F682D\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":117,"logUrl":"/admin/login"},{"createdTime":"2020-03-12 14:03:21","logId":6,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"B060099F82EDCCC195D1C76F328F682D\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":86,"logUrl":"/admin/login"},{"createdTime":"2020-03-12 14:05:00","logId":7,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"B060099F82EDCCC195D1C76F328F682D\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":84,"logUrl":"/admin/login"},{"createdTime":"2020-03-12 14:06:16","logId":8,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"B060099F82EDCCC195D1C76F328F682D\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":87,"logUrl":"/admin/login"},{"createdTime":"2020-03-12 14:08:47","logId":9,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"B060099F82EDCCC195D1C76F328F682D\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":86,"logUrl":"/admin/login"},{"createdTime":"2020-03-12 14:10:57","logId":10,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"B060099F82EDCCC195D1C76F328F682D\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":97,"logUrl":"/admin/login"},{"createdTime":"2020-03-12 14:16:59","logId":11,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"A5287CE0FE32C5A9B9406425EF5D7CAB\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":197,"logUrl":"/admin/login"},{"createdTime":"2020-03-12 14:23:00","logId":12,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"A5287CE0FE32C5A9B9406425EF5D7CAB\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":2096,"logUrl":"/admin/login"},{"createdTime":"2020-03-12 14:46:17","logId":13,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"A5287CE0FE32C5A9B9406425EF5D7CAB\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":2095,"logUrl":"/admin/login"},{"createdTime":"2020-03-12 14:49:50","logId":14,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"5462B32F5F25E428DF97B1A77DB5CF14\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":98,"logUrl":"/admin/login"}],"pageSize":10,"params":{},"sortColumn":"","sortMethod":"asc","totalCount":328,"totalPage":33},"msg":"操作成功！"}
2020-03-19 13:08:47.952 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /log/getByPage
2020-03-19 13:08:47.953 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 13:08:47.953 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 13:08:47.953 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.LogController.getByPage
2020-03-19 13:08:47.954 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Page(currentPage=2, pageSize=10, totalPage=33, totalCount=328, index=10, list=[Log(logId=5, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=117, logResult={"code":20000,"data":{"token":"B060099F82EDCCC195D1C76F328F682D"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 13:59:30), Log(logId=6, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=86, logResult={"code":20000,"data":{"token":"B060099F82EDCCC195D1C76F328F682D"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 14:03:21), Log(logId=7, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=84, logResult={"code":20000,"data":{"token":"B060099F82EDCCC195D1C76F328F682D"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 14:05:00), Log(logId=8, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=87, logResult={"code":20000,"data":{"token":"B060099F82EDCCC195D1C76F328F682D"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 14:06:16), Log(logId=9, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=86, logResult={"code":20000,"data":{"token":"B060099F82EDCCC195D1C76F328F682D"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 14:08:47), Log(logId=10, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=97, logResult={"code":20000,"data":{"token":"B060099F82EDCCC195D1C76F328F682D"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 14:10:57), Log(logId=11, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=197, logResult={"code":20000,"data":{"token":"A5287CE0FE32C5A9B9406425EF5D7CAB"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 14:16:59), Log(logId=12, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=2096, logResult={"code":20000,"data":{"token":"A5287CE0FE32C5A9B9406425EF5D7CAB"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 14:23:00), Log(logId=13, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=2095, logResult={"code":20000,"data":{"token":"A5287CE0FE32C5A9B9406425EF5D7CAB"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 14:46:17), Log(logId=14, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=98, logResult={"code":20000,"data":{"token":"5462B32F5F25E428DF97B1A77DB5CF14"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 14:49:50)], params={}, sortColumn=, sortMethod=asc)]
2020-03-19 13:08:48.157 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 205
2020-03-19 13:08:48.159 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"index":10,"list":[{"createdTime":"2020-03-12 14:53:47","logId":15,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"5462B32F5F25E428DF97B1A77DB5CF14\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":108,"logUrl":"/admin/login"},{"createdTime":"2020-03-12 14:57:05","logId":16,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"5462B32F5F25E428DF97B1A77DB5CF14\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":111,"logUrl":"/admin/login"},{"createdTime":"2020-03-12 14:58:51","logId":17,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"5462B32F5F25E428DF97B1A77DB5CF14\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":94,"logUrl":"/admin/login"},{"createdTime":"2020-03-12 15:03:35","logId":18,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"5462B32F5F25E428DF97B1A77DB5CF14\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":2099,"logUrl":"/admin/login"},{"createdTime":"2020-03-12 15:06:24","logId":19,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"FD2207DECC0777BD82EFFDC7BAF118E5\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":350,"logUrl":"/admin/login"},{"createdTime":"2020-03-12 15:37:06","logId":20,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"000D96BCE9C02C801ED7517BAEBFB47E\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":276,"logUrl":"/admin/login"},{"createdTime":"2020-03-12 15:42:22","logId":21,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"000D96BCE9C02C801ED7517BAEBFB47E\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":2094,"logUrl":"/admin/login"},{"createdTime":"2020-03-12 15:48:26","logId":22,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"2FC62460C121F7219CBD2CD83E8A5D52\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":210,"logUrl":"/admin/login"},{"createdTime":"2020-03-12 15:49:27","logId":23,"logIp":"0:0:0:0:0:0:0:1","logMethod":"GET","logParams":"[1]","logResult":"{\"code\":20000,\"msg\":\"操作成功！\"}","logStatus":1,"logTime":11,"logUrl":"/test/testException/1"},{"createdTime":"2020-03-12 15:57:05","logId":24,"logIp":"0:0:0:0:0:0:0:1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":{\"name\":\"张浩\",\"password\":\"\",\"signature\":\"浮生若梦,为欢几何\",\"username\":\"admin\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":5,"logUrl":"/admin/info"}],"pageSize":10,"params":{},"sortColumn":"","sortMethod":"asc","totalCount":329,"totalPage":33},"msg":"操作成功！"}
2020-03-19 13:08:49.964 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /log/getByPage
2020-03-19 13:08:49.965 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 13:08:49.965 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 13:08:49.966 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.LogController.getByPage
2020-03-19 13:08:49.966 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Page(currentPage=3, pageSize=10, totalPage=33, totalCount=329, index=20, list=[Log(logId=15, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=108, logResult={"code":20000,"data":{"token":"5462B32F5F25E428DF97B1A77DB5CF14"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 14:53:47), Log(logId=16, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=111, logResult={"code":20000,"data":{"token":"5462B32F5F25E428DF97B1A77DB5CF14"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 14:57:05), Log(logId=17, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=94, logResult={"code":20000,"data":{"token":"5462B32F5F25E428DF97B1A77DB5CF14"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 14:58:51), Log(logId=18, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=2099, logResult={"code":20000,"data":{"token":"5462B32F5F25E428DF97B1A77DB5CF14"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 15:03:35), Log(logId=19, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=350, logResult={"code":20000,"data":{"token":"FD2207DECC0777BD82EFFDC7BAF118E5"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 15:06:24), Log(logId=20, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=276, logResult={"code":20000,"data":{"token":"000D96BCE9C02C801ED7517BAEBFB47E"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 15:37:06), Log(logId=21, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=2094, logResult={"code":20000,"data":{"token":"000D96BCE9C02C801ED7517BAEBFB47E"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 15:42:22), Log(logId=22, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=210, logResult={"code":20000,"data":{"token":"2FC62460C121F7219CBD2CD83E8A5D52"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 15:48:26), Log(logId=23, logUrl=/test/testException/1, logParams=[1], logStatus=1, logMessage=null, logMethod=GET, logTime=11, logResult={"code":20000,"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 15:49:27), Log(logId=24, logUrl=/admin/info, logParams=[], logStatus=1, logMessage=null, logMethod=GET, logTime=5, logResult={"code":20000,"data":{"name":"张浩","password":"","signature":"浮生若梦,为欢几何","username":"admin"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 15:57:05)], params={}, sortColumn=, sortMethod=asc)]
2020-03-19 13:08:50.113 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 149
2020-03-19 13:08:50.114 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"index":20,"list":[{"createdTime":"2020-03-12 15:58:40","logId":25,"logIp":"0:0:0:0:0:0:0:1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":{\"name\":\"张浩\",\"password\":\"\",\"signature\":\"浮生若梦,为欢几何\",\"username\":\"admin\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":8,"logUrl":"/admin/info"},{"createdTime":"2020-03-12 22:53:34","logId":26,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"BBFB3D9A22F61771AABAAFB91455A656\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":257,"logUrl":"/admin/login"},{"createdTime":"2020-03-12 22:54:29","logId":27,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Type(typeId=null, typeName=Spring Boot, typeBlogCount=null, enable=null, deleted=null)]","logResult":"{\"code\":20000,\"msg\":\"添加成功!\"}","logStatus":1,"logTime":209,"logUrl":"/type/save"},{"createdTime":"2020-03-12 23:01:06","logId":28,"logIp":"0:0:0:0:0:0:0:1","logMessage":"xyz.fusheng.blog.exception.BlogException: 该分类类型已经存在!\n\tat xyz.fusheng.blog.service.impl.TypeServiceImpl.save(TypeServiceImpl.java:34)\n\tat xyz.fusheng.blog.controller.TypeController.save(TypeController.java:31)\n\tat xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)\n\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\n\tat xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$866d35f4.save(<generated>)\n","logMethod":"POST","logParams":"[Type(typeId=null, typeName=Spring Boot, typeBlogCount=null, enable=null, deleted=null)]","logStatus":0,"logTime":0,"logUrl":"/type/save"},{"createdTime":"2020-03-12 23:04:54","logId":29,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"C83ED7DE1CE7AA48E9FA9DAF210140D4\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":191,"logUrl":"/admin/login"},{"createdTime":"2020-03-12 23:05:16","logId":30,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Type(typeId=null, typeName=Java, typeBlogCount=null, enable=null, deleted=null)]","logResult":"{\"code\":20000,\"msg\":\"添加成功!\"}","logStatus":1,"logTime":199,"logUrl":"/type/save"},{"createdTime":"2020-03-12 23:05:32","logId":31,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Type(typeId=null, typeName=Spring 全家桶, typeBlogCount=null, enable=null, deleted=null)]","logResult":"{\"code\":20000,\"msg\":\"添加成功!\"}","logStatus":1,"logTime":189,"logUrl":"/type/save"},{"createdTime":"2020-03-12 23:06:54","logId":32,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Type(typeId=null, typeName=项目开发笔记, typeBlogCount=null, enable=null, deleted=null)]","logResult":"{\"code\":20000,\"msg\":\"添加成功!\"}","logStatus":1,"logTime":196,"logUrl":"/type/save"},{"createdTime":"2020-03-12 23:07:19","logId":33,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Type(typeId=null, typeName=MyBatis 专题, typeBlogCount=null, enable=null, deleted=null)]","logResult":"{\"code\":20000,\"msg\":\"添加成功!\"}","logStatus":1,"logTime":218,"logUrl":"/type/save"},{"createdTime":"2020-03-12 23:07:32","logId":34,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Type(typeId=null, typeName=Linux 专题, typeBlogCount=null, enable=null, deleted=null)]","logResult":"{\"code\":20000,\"msg\":\"添加成功!\"}","logStatus":1,"logTime":196,"logUrl":"/type/save"}],"pageSize":10,"params":{},"sortColumn":"","sortMethod":"asc","totalCount":330,"totalPage":33},"msg":"操作成功！"}
2020-03-19 13:08:51.643 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /log/getByPage
2020-03-19 13:08:51.644 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 13:08:51.644 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 13:08:51.644 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.LogController.getByPage
2020-03-19 13:08:51.645 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Page(currentPage=4, pageSize=10, totalPage=33, totalCount=330, index=30, list=[Log(logId=25, logUrl=/admin/info, logParams=[], logStatus=1, logMessage=null, logMethod=GET, logTime=8, logResult={"code":20000,"data":{"name":"张浩","password":"","signature":"浮生若梦,为欢几何","username":"admin"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 15:58:40), Log(logId=26, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=257, logResult={"code":20000,"data":{"token":"BBFB3D9A22F61771AABAAFB91455A656"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 22:53:34), Log(logId=27, logUrl=/type/save, logParams=[Type(typeId=null, typeName=Spring Boot, typeBlogCount=null, enable=null, deleted=null)], logStatus=1, logMessage=null, logMethod=POST, logTime=209, logResult={"code":20000,"msg":"添加成功!"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 22:54:29), Log(logId=28, logUrl=/type/save, logParams=[Type(typeId=null, typeName=Spring Boot, typeBlogCount=null, enable=null, deleted=null)], logStatus=0, logMessage=xyz.fusheng.blog.exception.BlogException: 该分类类型已经存在!
	at xyz.fusheng.blog.service.impl.TypeServiceImpl.save(TypeServiceImpl.java:34)
	at xyz.fusheng.blog.controller.TypeController.save(TypeController.java:31)
	at xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)
	at xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)
	at xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$866d35f4.save(<generated>)
, logMethod=POST, logTime=0, logResult=null, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:01:06), Log(logId=29, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=191, logResult={"code":20000,"data":{"token":"C83ED7DE1CE7AA48E9FA9DAF210140D4"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:04:54), Log(logId=30, logUrl=/type/save, logParams=[Type(typeId=null, typeName=Java, typeBlogCount=null, enable=null, deleted=null)], logStatus=1, logMessage=null, logMethod=POST, logTime=199, logResult={"code":20000,"msg":"添加成功!"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:05:16), Log(logId=31, logUrl=/type/save, logParams=[Type(typeId=null, typeName=Spring 全家桶, typeBlogCount=null, enable=null, deleted=null)], logStatus=1, logMessage=null, logMethod=POST, logTime=189, logResult={"code":20000,"msg":"添加成功!"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:05:32), Log(logId=32, logUrl=/type/save, logParams=[Type(typeId=null, typeName=项目开发笔记, typeBlogCount=null, enable=null, deleted=null)], logStatus=1, logMessage=null, logMethod=POST, logTime=196, logResult={"code":20000,"msg":"添加成功!"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:06:54), Log(logId=33, logUrl=/type/save, logParams=[Type(typeId=null, typeName=MyBatis 专题, typeBlogCount=null, enable=null, deleted=null)], logStatus=1, logMessage=null, logMethod=POST, logTime=218, logResult={"code":20000,"msg":"添加成功!"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:07:19), Log(logId=34, logUrl=/type/save, logParams=[Type(typeId=null, typeName=Linux 专题, typeBlogCount=null, enable=null, deleted=null)], logStatus=1, logMessage=null, logMethod=POST, logTime=196, logResult={"code":20000,"msg":"添加成功!"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:07:32)], params={}, sortColumn=, sortMethod=asc)]
2020-03-19 13:08:51.796 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 153
2020-03-19 13:08:51.797 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"index":30,"list":[{"createdTime":"2020-03-12 23:21:09","logId":35,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Type(typeId=null, typeName=Vue 专题, typeBlogCount=null, enable=null, deleted=null)]","logResult":"{\"code\":20000,\"msg\":\"添加成功!\"}","logStatus":1,"logTime":2209,"logUrl":"/type/save"},{"createdTime":"2020-03-12 23:24:54","logId":36,"logIp":"0:0:0:0:0:0:0:1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"enable\":1,\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"Spring Boot\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":7,\"typeName\":\"Java\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":8,\"typeName\":\"Spring 全家桶\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":9,\"typeName\":\"项目开发笔记\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":10,\"typeName\":\"MyBatis 专题\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":11,\"typeName\":\"Linux 专题\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":12,\"typeName\":\"Vue 专题\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":87,"logUrl":"/type/listBack"},{"createdTime":"2020-03-12 23:27:09","logId":37,"logIp":"0:0:0:0:0:0:0:1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"Spring Boot\"},{\"typeBlogCount\":0,\"typeId\":7,\"typeName\":\"Java\"},{\"typeBlogCount\":0,\"typeId\":8,\"typeName\":\"Spring 全家桶\"},{\"typeBlogCount\":0,\"typeId\":9,\"typeName\":\"项目开发笔记\"},{\"typeBlogCount\":0,\"typeId\":10,\"typeName\":\"MyBatis 专题\"},{\"typeBlogCount\":0,\"typeId\":11,\"typeName\":\"Linux 专题\"},{\"typeBlogCount\":0,\"typeId\":12,\"typeName\":\"Vue 专题\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":88,"logUrl":"/type/getList"},{"createdTime":"2020-03-12 23:32:12","logId":38,"logIp":"0:0:0:0:0:0:0:1","logMessage":"org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\n\tat xyz.fusheng.blog.service.impl.TypeServiceImpl.update(TypeServiceImpl.java:51)\n\tat xyz.fusheng.blog.controller.TypeController.update(TypeController.java:62)\n\tat xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)\n\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\n\tat xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$c9c30f4e.update(<generated>)\nCaused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\n","logMethod":"PUT","logParams":"[Type(typeId=7, typeName=Java 专题, typeBlogCount=null, enable=null, deleted=null)]","logStatus":0,"logTime":0,"logUrl":"/type/update"},{"createdTime":"2020-03-12 23:37:44","logId":39,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"D9982B3EAC004265A99067419C0DEB6D\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":236,"logUrl":"/admin/login"},{"createdTime":"2020-03-12 23:38:04","logId":40,"logIp":"0:0:0:0:0:0:0:1","logMessage":"org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\n\tat xyz.fusheng.blog.service.impl.TypeServiceImpl.update(TypeServiceImpl.java:51)\n\tat xyz.fusheng.blog.controller.TypeController.update(TypeController.java:62)\n\tat xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)\n\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\n\tat xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$5997ab44.update(<generated>)\nCaused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\n","logMethod":"PUT","logParams":"[Type(typeId=7, typeName=Java 专题, typeBlogCount=null, enable=null, deleted=null)]","logStatus":0,"logTime":0,"logUrl":"/type/update"},{"createdTime":"2020-03-12 23:38:12","logId":41,"logIp":"0:0:0:0:0:0:0:1","logMessage":"org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\n\tat xyz.fusheng.blog.service.impl.TypeServiceImpl.update(TypeServiceImpl.java:51)\n\tat xyz.fusheng.blog.controller.TypeController.update(TypeController.java:62)\n\tat xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)\n\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\n\tat xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$5997ab44.update(<generated>)\nCaused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\n","logMethod":"PUT","logParams":"[Type(typeId=7, typeName=Java 专题, typeBlogCount=null, enable=null, deleted=null)]","logStatus":0,"logTime":0,"logUrl":"/type/update"},{"createdTime":"2020-03-12 23:38:38","logId":42,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"D9982B3EAC004265A99067419C0DEB6D\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":80,"logUrl":"/admin/login"},{"createdTime":"2020-03-12 23:39:10","logId":43,"logIp":"0:0:0:0:0:0:0:1","logMessage":"org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\n\tat xyz.fusheng.blog.service.impl.TypeServiceImpl.update(TypeServiceImpl.java:51)\n\tat xyz.fusheng.blog.controller.TypeController.update(TypeController.java:62)\n\tat xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)\n\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\n\tat xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$5997ab44.update(<generated>)\nCaused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\n","logMethod":"PUT","logParams":"[Type(typeId=7, typeName=Java 专题, typeBlogCount=null, enable=null, deleted=null)]","logStatus":0,"logTime":0,"logUrl":"/type/update"},{"createdTime":"2020-03-12 23:42:11","logId":44,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"5FF3F2F146F6212E515987562E364095\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":199,"logUrl":"/admin/login"}],"pageSize":10,"params":{},"sortColumn":"","sortMethod":"asc","totalCount":331,"totalPage":34},"msg":"操作成功！"}
2020-03-19 13:08:53.443 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /log/getByPage
2020-03-19 13:08:53.444 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 13:08:53.444 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 13:08:53.445 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.LogController.getByPage
2020-03-19 13:08:53.445 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Page(currentPage=5, pageSize=10, totalPage=34, totalCount=331, index=40, list=[Log(logId=35, logUrl=/type/save, logParams=[Type(typeId=null, typeName=Vue 专题, typeBlogCount=null, enable=null, deleted=null)], logStatus=1, logMessage=null, logMethod=POST, logTime=2209, logResult={"code":20000,"msg":"添加成功!"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:21:09), Log(logId=36, logUrl=/type/listBack, logParams=[], logStatus=1, logMessage=null, logMethod=GET, logTime=87, logResult={"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"Spring Boot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Java"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"Spring 全家桶"},{"enable":1,"typeBlogCount":0,"typeId":9,"typeName":"项目开发笔记"},{"enable":1,"typeBlogCount":0,"typeId":10,"typeName":"MyBatis 专题"},{"enable":1,"typeBlogCount":0,"typeId":11,"typeName":"Linux 专题"},{"enable":1,"typeBlogCount":0,"typeId":12,"typeName":"Vue 专题"}],"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:24:54), Log(logId=37, logUrl=/type/getList, logParams=[], logStatus=1, logMessage=null, logMethod=GET, logTime=88, logResult={"code":20000,"data":[{"typeBlogCount":0,"typeId":6,"typeName":"Spring Boot"},{"typeBlogCount":0,"typeId":7,"typeName":"Java"},{"typeBlogCount":0,"typeId":8,"typeName":"Spring 全家桶"},{"typeBlogCount":0,"typeId":9,"typeName":"项目开发笔记"},{"typeBlogCount":0,"typeId":10,"typeName":"MyBatis 专题"},{"typeBlogCount":0,"typeId":11,"typeName":"Linux 专题"},{"typeBlogCount":0,"typeId":12,"typeName":"Vue 专题"}],"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:27:09), Log(logId=38, logUrl=/type/update, logParams=[Type(typeId=7, typeName=Java 专题, typeBlogCount=null, enable=null, deleted=null)], logStatus=0, logMessage=org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'
	at xyz.fusheng.blog.service.impl.TypeServiceImpl.update(TypeServiceImpl.java:51)
	at xyz.fusheng.blog.controller.TypeController.update(TypeController.java:62)
	at xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)
	at xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)
	at xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$c9c30f4e.update(<generated>)
Caused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'
, logMethod=PUT, logTime=0, logResult=null, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:32:12), Log(logId=39, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=236, logResult={"code":20000,"data":{"token":"D9982B3EAC004265A99067419C0DEB6D"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:37:44), Log(logId=40, logUrl=/type/update, logParams=[Type(typeId=7, typeName=Java 专题, typeBlogCount=null, enable=null, deleted=null)], logStatus=0, logMessage=org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'
	at xyz.fusheng.blog.service.impl.TypeServiceImpl.update(TypeServiceImpl.java:51)
	at xyz.fusheng.blog.controller.TypeController.update(TypeController.java:62)
	at xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)
	at xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)
	at xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$5997ab44.update(<generated>)
Caused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'
, logMethod=PUT, logTime=0, logResult=null, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:38:04), Log(logId=41, logUrl=/type/update, logParams=[Type(typeId=7, typeName=Java 专题, typeBlogCount=null, enable=null, deleted=null)], logStatus=0, logMessage=org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'
	at xyz.fusheng.blog.service.impl.TypeServiceImpl.update(TypeServiceImpl.java:51)
	at xyz.fusheng.blog.controller.TypeController.update(TypeController.java:62)
	at xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)
	at xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)
	at xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$5997ab44.update(<generated>)
Caused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'
, logMethod=PUT, logTime=0, logResult=null, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:38:12), Log(logId=42, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=80, logResult={"code":20000,"data":{"token":"D9982B3EAC004265A99067419C0DEB6D"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:38:38), Log(logId=43, logUrl=/type/update, logParams=[Type(typeId=7, typeName=Java 专题, typeBlogCount=null, enable=null, deleted=null)], logStatus=0, logMessage=org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'
	at xyz.fusheng.blog.service.impl.TypeServiceImpl.update(TypeServiceImpl.java:51)
	at xyz.fusheng.blog.controller.TypeController.update(TypeController.java:62)
	at xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)
	at xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)
	at xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$5997ab44.update(<generated>)
Caused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'
, logMethod=PUT, logTime=0, logResult=null, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:39:10), Log(logId=44, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=199, logResult={"code":20000,"data":{"token":"5FF3F2F146F6212E515987562E364095"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:42:11)], params={}, sortColumn=, sortMethod=asc)]
2020-03-19 13:08:53.588 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 145
2020-03-19 13:08:53.588 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"index":40,"list":[{"createdTime":"2020-03-12 23:42:32","logId":45,"logIp":"0:0:0:0:0:0:0:1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"enable\":1,\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"Spring Boot\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":7,\"typeName\":\"Java\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":8,\"typeName\":\"Spring 全家桶\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":9,\"typeName\":\"项目开发笔记\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":10,\"typeName\":\"MyBatis 专题\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":11,\"typeName\":\"Linux 专题\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":12,\"typeName\":\"Vue 专题\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":92,"logUrl":"/type/listBack"},{"createdTime":"2020-03-12 23:42:40","logId":46,"logIp":"0:0:0:0:0:0:0:1","logMessage":"org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\n\tat xyz.fusheng.blog.service.impl.TypeServiceImpl.update(TypeServiceImpl.java:51)\n\tat xyz.fusheng.blog.controller.TypeController.update(TypeController.java:62)\n\tat xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)\n\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\n\tat xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$ce615d71.update(<generated>)\nCaused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\n","logMethod":"PUT","logParams":"[Type(typeId=7, typeName=Java 专题, typeBlogCount=null, enable=null, deleted=null)]","logStatus":0,"logTime":0,"logUrl":"/type/update"},{"createdTime":"2020-03-12 23:44:05","logId":47,"logIp":"0:0:0:0:0:0:0:1","logMessage":"org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\n\tat xyz.fusheng.blog.service.impl.TypeServiceImpl.update(TypeServiceImpl.java:51)\n\tat xyz.fusheng.blog.controller.TypeController.update(TypeController.java:62)\n\tat xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)\n\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\n\tat xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$ce615d71.update(<generated>)\nCaused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\n","logMethod":"PUT","logParams":"[Type(typeId=7, typeName=Java 专题, typeBlogCount=null, enable=null, deleted=null)]","logStatus":0,"logTime":0,"logUrl":"/type/update"},{"createdTime":"2020-03-12 23:45:26","logId":48,"logIp":"0:0:0:0:0:0:0:1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"Spring Boot\"},{\"typeBlogCount\":0,\"typeId\":7,\"typeName\":\"Java\"},{\"typeBlogCount\":0,\"typeId\":8,\"typeName\":\"Spring 全家桶\"},{\"typeBlogCount\":0,\"typeId\":9,\"typeName\":\"项目开发笔记\"},{\"typeBlogCount\":0,\"typeId\":10,\"typeName\":\"MyBatis 专题\"},{\"typeBlogCount\":0,\"typeId\":11,\"typeName\":\"Linux 专题\"},{\"typeBlogCount\":0,\"typeId\":12,\"typeName\":\"Vue 专题\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":92,"logUrl":"/type/getList"},{"createdTime":"2020-03-12 23:50:17","logId":49,"logIp":"0:0:0:0:0:0:0:1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"Spring Boot\"},{\"typeBlogCount\":0,\"typeId\":7,\"typeName\":\"Java\"},{\"typeBlogCount\":0,\"typeId\":8,\"typeName\":\"Spring 全家桶\"},{\"typeBlogCount\":0,\"typeId\":9,\"typeName\":\"项目开发笔记\"},{\"typeBlogCount\":0,\"typeId\":10,\"typeName\":\"MyBatis 专题\"},{\"typeBlogCount\":0,\"typeId\":11,\"typeName\":\"Linux 专题\"},{\"typeBlogCount\":0,\"typeId\":12,\"typeName\":\"Vue 专题\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":2107,"logUrl":"/type/getList"},{"createdTime":"2020-03-13 00:00:26","logId":50,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"636ACE77F9C91B95B82CCEE88E854055\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":236,"logUrl":"/admin/login"},{"createdTime":"2020-03-13 00:00:45","logId":51,"logIp":"0:0:0:0:0:0:0:1","logMethod":"PUT","logParams":"[Type(typeId=7, typeName=Java ++, typeBlogCount=null, enable=null, deleted=null)]","logResult":"{\"code\":20000,\"msg\":\"更新成功!\"}","logStatus":1,"logTime":192,"logUrl":"/type/update"},{"createdTime":"2020-03-13 00:03:40","logId":52,"logIp":"0:0:0:0:0:0:0:1","logMessage":"\tat xyz.fusheng.blog.service.impl.TypeServiceImpl.enableById(TypeServiceImpl.java:58)\n\tat xyz.fusheng.blog.controller.TypeController.enable(TypeController.java:73)\n\tat xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)\n\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\n\tat xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$c4f2514d.enable(<generated>)\n","logMethod":"PUT","logParams":"[6]","logStatus":0,"logTime":0,"logUrl":"/type/enable/6"},{"createdTime":"2020-03-13 00:03:46","logId":53,"logIp":"0:0:0:0:0:0:0:1","logMessage":"\tat xyz.fusheng.blog.service.impl.TypeServiceImpl.enableById(TypeServiceImpl.java:58)\n\tat xyz.fusheng.blog.controller.TypeController.enable(TypeController.java:73)\n\tat xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)\n\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\n\tat xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$c4f2514d.enable(<generated>)\n","logMethod":"PUT","logParams":"[6]","logStatus":0,"logTime":0,"logUrl":"/type/enable/6"},{"createdTime":"2020-03-13 00:03:59","logId":54,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"636ACE77F9C91B95B82CCEE88E854055\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":85,"logUrl":"/admin/login"}],"pageSize":10,"params":{},"sortColumn":"","sortMethod":"asc","totalCount":332,"totalPage":34},"msg":"操作成功！"}
2020-03-19 13:08:54.912 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /log/getByPage
2020-03-19 13:08:54.913 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 13:08:54.914 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 13:08:54.914 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.LogController.getByPage
2020-03-19 13:08:54.915 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Page(currentPage=34, pageSize=10, totalPage=34, totalCount=332, index=330, list=[Log(logId=45, logUrl=/type/listBack, logParams=[], logStatus=1, logMessage=null, logMethod=GET, logTime=92, logResult={"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"Spring Boot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Java"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"Spring 全家桶"},{"enable":1,"typeBlogCount":0,"typeId":9,"typeName":"项目开发笔记"},{"enable":1,"typeBlogCount":0,"typeId":10,"typeName":"MyBatis 专题"},{"enable":1,"typeBlogCount":0,"typeId":11,"typeName":"Linux 专题"},{"enable":1,"typeBlogCount":0,"typeId":12,"typeName":"Vue 专题"}],"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:42:32), Log(logId=46, logUrl=/type/update, logParams=[Type(typeId=7, typeName=Java 专题, typeBlogCount=null, enable=null, deleted=null)], logStatus=0, logMessage=org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'
	at xyz.fusheng.blog.service.impl.TypeServiceImpl.update(TypeServiceImpl.java:51)
	at xyz.fusheng.blog.controller.TypeController.update(TypeController.java:62)
	at xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)
	at xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)
	at xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$ce615d71.update(<generated>)
Caused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'
, logMethod=PUT, logTime=0, logResult=null, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:42:40), Log(logId=47, logUrl=/type/update, logParams=[Type(typeId=7, typeName=Java 专题, typeBlogCount=null, enable=null, deleted=null)], logStatus=0, logMessage=org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'
	at xyz.fusheng.blog.service.impl.TypeServiceImpl.update(TypeServiceImpl.java:51)
	at xyz.fusheng.blog.controller.TypeController.update(TypeController.java:62)
	at xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)
	at xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)
	at xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$ce615d71.update(<generated>)
Caused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'
, logMethod=PUT, logTime=0, logResult=null, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:44:05), Log(logId=48, logUrl=/type/getList, logParams=[], logStatus=1, logMessage=null, logMethod=GET, logTime=92, logResult={"code":20000,"data":[{"typeBlogCount":0,"typeId":6,"typeName":"Spring Boot"},{"typeBlogCount":0,"typeId":7,"typeName":"Java"},{"typeBlogCount":0,"typeId":8,"typeName":"Spring 全家桶"},{"typeBlogCount":0,"typeId":9,"typeName":"项目开发笔记"},{"typeBlogCount":0,"typeId":10,"typeName":"MyBatis 专题"},{"typeBlogCount":0,"typeId":11,"typeName":"Linux 专题"},{"typeBlogCount":0,"typeId":12,"typeName":"Vue 专题"}],"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:45:26), Log(logId=49, logUrl=/type/getList, logParams=[], logStatus=1, logMessage=null, logMethod=GET, logTime=2107, logResult={"code":20000,"data":[{"typeBlogCount":0,"typeId":6,"typeName":"Spring Boot"},{"typeBlogCount":0,"typeId":7,"typeName":"Java"},{"typeBlogCount":0,"typeId":8,"typeName":"Spring 全家桶"},{"typeBlogCount":0,"typeId":9,"typeName":"项目开发笔记"},{"typeBlogCount":0,"typeId":10,"typeName":"MyBatis 专题"},{"typeBlogCount":0,"typeId":11,"typeName":"Linux 专题"},{"typeBlogCount":0,"typeId":12,"typeName":"Vue 专题"}],"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:50:17), Log(logId=50, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=236, logResult={"code":20000,"data":{"token":"636ACE77F9C91B95B82CCEE88E854055"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-13 00:00:26), Log(logId=51, logUrl=/type/update, logParams=[Type(typeId=7, typeName=Java ++, typeBlogCount=null, enable=null, deleted=null)], logStatus=1, logMessage=null, logMethod=PUT, logTime=192, logResult={"code":20000,"msg":"更新成功!"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-13 00:00:45), Log(logId=52, logUrl=/type/enable/6, logParams=[6], logStatus=0, logMessage=	at xyz.fusheng.blog.service.impl.TypeServiceImpl.enableById(TypeServiceImpl.java:58)
	at xyz.fusheng.blog.controller.TypeController.enable(TypeController.java:73)
	at xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)
	at xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)
	at xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$c4f2514d.enable(<generated>)
, logMethod=PUT, logTime=0, logResult=null, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-13 00:03:40), Log(logId=53, logUrl=/type/enable/6, logParams=[6], logStatus=0, logMessage=	at xyz.fusheng.blog.service.impl.TypeServiceImpl.enableById(TypeServiceImpl.java:58)
	at xyz.fusheng.blog.controller.TypeController.enable(TypeController.java:73)
	at xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)
	at xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)
	at xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$c4f2514d.enable(<generated>)
, logMethod=PUT, logTime=0, logResult=null, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-13 00:03:46), Log(logId=54, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=85, logResult={"code":20000,"data":{"token":"636ACE77F9C91B95B82CCEE88E854055"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-13 00:03:59)], params={}, sortColumn=, sortMethod=asc)]
2020-03-19 13:08:55.093 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 181
2020-03-19 13:08:55.094 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"index":330,"list":[{"createdTime":"2020-03-19 13:08:49","logId":335,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Page(currentPage=3, pageSize=10, totalPage=33, totalCount=329, index=20, list=[Log(logId=15, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=108, logResult={\"code\":20000,\"data\":{\"token\":\"5462B32F5F25E428DF97B1A77DB5CF14\"},\"msg\":\"操作成功！\"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 14:53:47), Log(logId=16, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=111, logResult={\"code\":20000,\"data\":{\"token\":\"5462B32F5F25E428DF97B1A77DB5CF14\"},\"msg\":\"操作成功！\"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 14:57:05), Log(logId=17, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=94, logResult={\"code\":20000,\"data\":{\"token\":\"5462B32F5F25E428DF97B1A77DB5CF14\"},\"msg\":\"操作成功！\"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 14:58:51), Log(logId=18, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=2099, logResult={\"code\":20000,\"data\":{\"token\":\"5462B32F5F25E428DF97B1A77DB5CF14\"},\"msg\":\"操作成功！\"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 15:03:35), Log(logId=19, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=350, logResult={\"code\":20000,\"data\":{\"token\":\"FD2207DECC0777BD82EFFDC7BAF118E5\"},\"msg\":\"操作成功！\"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 15:06:24), Log(logId=20, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=276, logResult={\"code\":20000,\"data\":{\"token\":\"000D96BCE9C02C801ED7517BAEBFB47E\"},\"msg\":\"操作成功！\"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 15:37:06), Log(logId=21, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=2094, logResult={\"code\":20000,\"data\":{\"token\":\"000D96BCE9C02C801ED7517BAEBFB47E\"},\"msg\":\"操作成功！\"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 15:42:22), Log(logId=22, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=210, logResult={\"code\":20000,\"data\":{\"token\":\"2FC62460C121F7219CBD2CD83E8A5D52\"},\"msg\":\"操作成功！\"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 15:48:26), Log(logId=23, logUrl=/test/testException/1, logParams=[1], logStatus=1, logMessage=null, logMethod=GET, logTime=11, logResult={\"code\":20000,\"msg\":\"操作成功！\"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 15:49:27), Log(logId=24, logUrl=/admin/info, logParams=[], logStatus=1, logMessage=null, logMethod=GET, logTime=5, logResult={\"code\":20000,\"data\":{\"name\":\"张浩\",\"password\":\"\",\"signature\":\"浮生若梦,为欢几何\",\"username\":\"admin\"},\"msg\":\"操作成功！\"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 15:57:05)], params={}, sortColumn=, sortMethod=asc)]","logResult":"{\"code\":20000,\"data\":{\"index\":20,\"list\":[{\"createdTime\":\"2020-03-12 15:58:40\",\"logId\":25,\"logIp\":\"0:0:0:0:0:0:0:1\",\"logMethod\":\"GET\",\"logParams\":\"[]\",\"logResult\":\"{\\\"code\\\":20000,\\\"data\\\":{\\\"name\\\":\\\"张浩\\\",\\\"password\\\":\\\"\\\",\\\"signature\\\":\\\"浮生若梦,为欢几何\\\",\\\"username\\\":\\\"admin\\\"},\\\"msg\\\":\\\"操作成功！\\\"}\",\"logStatus\":1,\"logTime\":8,\"logUrl\":\"/admin/info\"},{\"createdTime\":\"2020-03-12 22:53:34\",\"logId\":26,\"logIp\":\"0:0:0:0:0:0:0:1\",\"logMethod\":\"POST\",\"logParams\":\"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]\",\"logResult\":\"{\\\"code\\\":20000,\\\"data\\\":{\\\"token\\\":\\\"BBFB3D9A22F61771AABAAFB91455A656\\\"},\\\"msg\\\":\\\"操作成功！\\\"}\",\"logStatus\":1,\"logTime\":257,\"logUrl\":\"/admin/login\"},{\"createdTime\":\"2020-03-12 22:54:29\",\"logId\":27,\"logIp\":\"0:0:0:0:0:0:0:1\",\"logMethod\":\"POST\",\"logParams\":\"[Type(typeId=null, typeName=Spring Boot, typeBlogCount=null, enable=null, deleted=null)]\",\"logResult\":\"{\\\"code\\\":20000,\\\"msg\\\":\\\"添加成功!\\\"}\",\"logStatus\":1,\"logTime\":209,\"logUrl\":\"/type/save\"},{\"createdTime\":\"2020-03-12 23:01:06\",\"logId\":28,\"logIp\":\"0:0:0:0:0:0:0:1\",\"logMessage\":\"xyz.fusheng.blog.exception.BlogException: 该分类类型已经存在!\\n\\tat xyz.fusheng.blog.service.impl.TypeServiceImpl.save(TypeServiceImpl.java:34)\\n\\tat xyz.fusheng.blog.controller.TypeController.save(TypeController.java:31)\\n\\tat xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)\\n\\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\\n\\tat xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$866d35f4.save(<generated>)\\n\",\"logMethod\":\"POST\",\"logParams\":\"[Type(typeId=null, typeName=Spring Boot, typeBlogCount=null, enable=null, deleted=null)]\",\"logStatus\":0,\"logTime\":0,\"logUrl\":\"/type/save\"},{\"createdTime\":\"2020-03-12 23:04:54\",\"logId\":29,\"logIp\":\"0:0:0:0:0:0:0:1\",\"logMethod\":\"POST\",\"logParams\":\"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]\",\"logResult\":\"{\\\"code\\\":20000,\\\"data\\\":{\\\"token\\\":\\\"C83ED7DE1CE7AA48E9FA9DAF210140D4\\\"},\\\"msg\\\":\\\"操作成功！\\\"}\",\"logStatus\":1,\"logTime\":191,\"logUrl\":\"/admin/login\"},{\"createdTime\":\"2020-03-12 23:05:16\",\"logId\":30,\"logIp\":\"0:0:0:0:0:0:0:1\",\"logMethod\":\"POST\",\"logParams\":\"[Type(typeId=null, typeName=Java, typeBlogCount=null, enable=null, deleted=null)]\",\"logResult\":\"{\\\"code\\\":20000,\\\"msg\\\":\\\"添加成功!\\\"}\",\"logStatus\":1,\"logTime\":199,\"logUrl\":\"/type/save\"},{\"createdTime\":\"2020-03-12 23:05:32\",\"logId\":31,\"logIp\":\"0:0:0:0:0:0:0:1\",\"logMethod\":\"POST\",\"logParams\":\"[Type(typeId=null, typeName=Spring 全家桶, typeBlogCount=null, enable=null, deleted=null)]\",\"logResult\":\"{\\\"code\\\":20000,\\\"msg\\\":\\\"添加成功!\\\"}\",\"logStatus\":1,\"logTime\":189,\"logUrl\":\"/type/save\"},{\"createdTime\":\"2020-03-12 23:06:54\",\"logId\":32,\"logIp\":\"0:0:0:0:0:0:0:1\",\"logMethod\":\"POST\",\"logParams\":\"[Type(typeId=null, typeName=项目开发笔记, typeBlogCount=null, enable=null, deleted=null)]\",\"logResult\":\"{\\\"code\\\":20000,\\\"msg\\\":\\\"添加成功!\\\"}\",\"logStatus\":1,\"logTime\":196,\"logUrl\":\"/type/save\"},{\"createdTime\":\"2020-03-12 23:07:19\",\"logId\":33,\"logIp\":\"0:0:0:0:0:0:0:1\",\"logMethod\":\"POST\",\"logParams\":\"[Type(typeId=null, typeName=MyBatis 专题, typeBlogCount=null, enable=null, deleted=null)]\",\"logResult\":\"{\\\"code\\\":20000,\\\"msg\\\":\\\"添加成功!\\\"}\",\"logStatus\":1,\"logTime\":218,\"logUrl\":\"/type/save\"},{\"createdTime\":\"2020-03-12 23:07:32\",\"logId\":34,\"logIp\":\"0:0:0:0:0:0:0:1\",\"logMethod\":\"POST\",\"logParams\":\"[Type(typeId=null, typeName=Linux 专题, typeBlogCount=null, enable=null, deleted=null)]\",\"logResult\":\"{\\\"code\\\":20000,\\\"msg\\\":\\\"添加成功!\\\"}\",\"logStatus\":1,\"logTime\":196,\"logUrl\":\"/type/save\"}],\"pageSize\":10,\"params\":{},\"sortColumn\":\"\",\"sortMethod\":\"asc\",\"totalCount\":330,\"totalPage\":33},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":149,"logUrl":"/log/getByPage"},{"createdTime":"2020-03-19 13:08:51","logId":336,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Page(currentPage=4, pageSize=10, totalPage=33, totalCount=330, index=30, list=[Log(logId=25, logUrl=/admin/info, logParams=[], logStatus=1, logMessage=null, logMethod=GET, logTime=8, logResult={\"code\":20000,\"data\":{\"name\":\"张浩\",\"password\":\"\",\"signature\":\"浮生若梦,为欢几何\",\"username\":\"admin\"},\"msg\":\"操作成功！\"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 15:58:40), Log(logId=26, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=257, logResult={\"code\":20000,\"data\":{\"token\":\"BBFB3D9A22F61771AABAAFB91455A656\"},\"msg\":\"操作成功！\"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 22:53:34), Log(logId=27, logUrl=/type/save, logParams=[Type(typeId=null, typeName=Spring Boot, typeBlogCount=null, enable=null, deleted=null)], logStatus=1, logMessage=null, logMethod=POST, logTime=209, logResult={\"code\":20000,\"msg\":\"添加成功!\"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 22:54:29), Log(logId=28, logUrl=/type/save, logParams=[Type(typeId=null, typeName=Spring Boot, typeBlogCount=null, enable=null, deleted=null)], logStatus=0, logMessage=xyz.fusheng.blog.exception.BlogException: 该分类类型已经存在!\n\tat xyz.fusheng.blog.service.impl.TypeServiceImpl.save(TypeServiceImpl.java:34)\n\tat xyz.fusheng.blog.controller.TypeController.save(TypeController.java:31)\n\tat xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)\n\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\n\tat xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$866d35f4.save(<generated>)\n, logMethod=POST, logTime=0, logResult=null, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:01:06), Log(logId=29, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=191, logResult={\"code\":20000,\"data\":{\"token\":\"C83ED7DE1CE7AA48E9FA9DAF210140D4\"},\"msg\":\"操作成功！\"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:04:54), Log(logId=30, logUrl=/type/save, logParams=[Type(typeId=null, typeName=Java, typeBlogCount=null, enable=null, deleted=null)], logStatus=1, logMessage=null, logMethod=POST, logTime=199, logResult={\"code\":20000,\"msg\":\"添加成功!\"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:05:16), Log(logId=31, logUrl=/type/save, logParams=[Type(typeId=null, typeName=Spring 全家桶, typeBlogCount=null, enable=null, deleted=null)], logStatus=1, logMessage=null, logMethod=POST, logTime=189, logResult={\"code\":20000,\"msg\":\"添加成功!\"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:05:32), Log(logId=32, logUrl=/type/save, logParams=[Type(typeId=null, typeName=项目开发笔记, typeBlogCount=null, enable=null, deleted=null)], logStatus=1, logMessage=null, logMethod=POST, logTime=196, logResult={\"code\":20000,\"msg\":\"添加成功!\"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:06:54), Log(logId=33, logUrl=/type/save, logParams=[Type(typeId=null, typeName=MyBatis 专题, typeBlogCount=null, enable=null, deleted=null)], logStatus=1, logMessage=null, logMethod=POST, logTime=218, logResult={\"code\":20000,\"msg\":\"添加成功!\"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:07:19), Log(logId=34, logUrl=/type/save, logParams=[Type(typeId=null, typeName=Linux 专题, typeBlogCount=null, enable=null, deleted=null)], logStatus=1, logMessage=null, logMethod=POST, logTime=196, logResult={\"code\":20000,\"msg\":\"添加成功!\"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:07:32)], params={}, sortColumn=, sortMethod=asc)]","logResult":"{\"code\":20000,\"data\":{\"index\":30,\"list\":[{\"createdTime\":\"2020-03-12 23:21:09\",\"logId\":35,\"logIp\":\"0:0:0:0:0:0:0:1\",\"logMethod\":\"POST\",\"logParams\":\"[Type(typeId=null, typeName=Vue 专题, typeBlogCount=null, enable=null, deleted=null)]\",\"logResult\":\"{\\\"code\\\":20000,\\\"msg\\\":\\\"添加成功!\\\"}\",\"logStatus\":1,\"logTime\":2209,\"logUrl\":\"/type/save\"},{\"createdTime\":\"2020-03-12 23:24:54\",\"logId\":36,\"logIp\":\"0:0:0:0:0:0:0:1\",\"logMethod\":\"GET\",\"logParams\":\"[]\",\"logResult\":\"{\\\"code\\\":20000,\\\"data\\\":[{\\\"enable\\\":1,\\\"typeBlogCount\\\":0,\\\"typeId\\\":6,\\\"typeName\\\":\\\"Spring Boot\\\"},{\\\"enable\\\":1,\\\"typeBlogCount\\\":0,\\\"typeId\\\":7,\\\"typeName\\\":\\\"Java\\\"},{\\\"enable\\\":1,\\\"typeBlogCount\\\":0,\\\"typeId\\\":8,\\\"typeName\\\":\\\"Spring 全家桶\\\"},{\\\"enable\\\":1,\\\"typeBlogCount\\\":0,\\\"typeId\\\":9,\\\"typeName\\\":\\\"项目开发笔记\\\"},{\\\"enable\\\":1,\\\"typeBlogCount\\\":0,\\\"typeId\\\":10,\\\"typeName\\\":\\\"MyBatis 专题\\\"},{\\\"enable\\\":1,\\\"typeBlogCount\\\":0,\\\"typeId\\\":11,\\\"typeName\\\":\\\"Linux 专题\\\"},{\\\"enable\\\":1,\\\"typeBlogCount\\\":0,\\\"typeId\\\":12,\\\"typeName\\\":\\\"Vue 专题\\\"}],\\\"msg\\\":\\\"操作成功！\\\"}\",\"logStatus\":1,\"logTime\":87,\"logUrl\":\"/type/listBack\"},{\"createdTime\":\"2020-03-12 23:27:09\",\"logId\":37,\"logIp\":\"0:0:0:0:0:0:0:1\",\"logMethod\":\"GET\",\"logParams\":\"[]\",\"logResult\":\"{\\\"code\\\":20000,\\\"data\\\":[{\\\"typeBlogCount\\\":0,\\\"typeId\\\":6,\\\"typeName\\\":\\\"Spring Boot\\\"},{\\\"typeBlogCount\\\":0,\\\"typeId\\\":7,\\\"typeName\\\":\\\"Java\\\"},{\\\"typeBlogCount\\\":0,\\\"typeId\\\":8,\\\"typeName\\\":\\\"Spring 全家桶\\\"},{\\\"typeBlogCount\\\":0,\\\"typeId\\\":9,\\\"typeName\\\":\\\"项目开发笔记\\\"},{\\\"typeBlogCount\\\":0,\\\"typeId\\\":10,\\\"typeName\\\":\\\"MyBatis 专题\\\"},{\\\"typeBlogCount\\\":0,\\\"typeId\\\":11,\\\"typeName\\\":\\\"Linux 专题\\\"},{\\\"typeBlogCount\\\":0,\\\"typeId\\\":12,\\\"typeName\\\":\\\"Vue 专题\\\"}],\\\"msg\\\":\\\"操作成功！\\\"}\",\"logStatus\":1,\"logTime\":88,\"logUrl\":\"/type/getList\"},{\"createdTime\":\"2020-03-12 23:32:12\",\"logId\":38,\"logIp\":\"0:0:0:0:0:0:0:1\",\"logMessage\":\"org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\\n\\tat xyz.fusheng.blog.service.impl.TypeServiceImpl.update(TypeServiceImpl.java:51)\\n\\tat xyz.fusheng.blog.controller.TypeController.update(TypeController.java:62)\\n\\tat xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)\\n\\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\\n\\tat xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$c9c30f4e.update(<generated>)\\nCaused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\\n\",\"logMethod\":\"PUT\",\"logParams\":\"[Type(typeId=7, typeName=Java 专题, typeBlogCount=null, enable=null, deleted=null)]\",\"logStatus\":0,\"logTime\":0,\"logUrl\":\"/type/update\"},{\"createdTime\":\"2020-03-12 23:37:44\",\"logId\":39,\"logIp\":\"0:0:0:0:0:0:0:1\",\"logMethod\":\"POST\",\"logParams\":\"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]\",\"logResult\":\"{\\\"code\\\":20000,\\\"data\\\":{\\\"token\\\":\\\"D9982B3EAC004265A99067419C0DEB6D\\\"},\\\"msg\\\":\\\"操作成功！\\\"}\",\"logStatus\":1,\"logTime\":236,\"logUrl\":\"/admin/login\"},{\"createdTime\":\"2020-03-12 23:38:04\",\"logId\":40,\"logIp\":\"0:0:0:0:0:0:0:1\",\"logMessage\":\"org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\\n\\tat xyz.fusheng.blog.service.impl.TypeServiceImpl.update(TypeServiceImpl.java:51)\\n\\tat xyz.fusheng.blog.controller.TypeController.update(TypeController.java:62)\\n\\tat xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)\\n\\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\\n\\tat xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$5997ab44.update(<generated>)\\nCaused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\\n\",\"logMethod\":\"PUT\",\"logParams\":\"[Type(typeId=7, typeName=Java 专题, typeBlogCount=null, enable=null, deleted=null)]\",\"logStatus\":0,\"logTime\":0,\"logUrl\":\"/type/update\"},{\"createdTime\":\"2020-03-12 23:38:12\",\"logId\":41,\"logIp\":\"0:0:0:0:0:0:0:1\",\"logMessage\":\"org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\\n\\tat xyz.fusheng.blog.service.impl.TypeServiceImpl.update(TypeServiceImpl.java:51)\\n\\tat xyz.fusheng.blog.controller.TypeController.update(TypeController.java:62)\\n\\tat xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)\\n\\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\\n\\tat xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$5997ab44.update(<generated>)\\nCaused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\\n\",\"logMethod\":\"PUT\",\"logParams\":\"[Type(typeId=7, typeName=Java 专题, typeBlogCount=null, enable=null, deleted=null)]\",\"logStatus\":0,\"logTime\":0,\"logUrl\":\"/type/update\"},{\"createdTime\":\"2020-03-12 23:38:38\",\"logId\":42,\"logIp\":\"0:0:0:0:0:0:0:1\",\"logMethod\":\"POST\",\"logParams\":\"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]\",\"logResult\":\"{\\\"code\\\":20000,\\\"data\\\":{\\\"token\\\":\\\"D9982B3EAC004265A99067419C0DEB6D\\\"},\\\"msg\\\":\\\"操作成功！\\\"}\",\"logStatus\":1,\"logTime\":80,\"logUrl\":\"/admin/login\"},{\"createdTime\":\"2020-03-12 23:39:10\",\"logId\":43,\"logIp\":\"0:0:0:0:0:0:0:1\",\"logMessage\":\"org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\\n\\tat xyz.fusheng.blog.service.impl.TypeServiceImpl.update(TypeServiceImpl.java:51)\\n\\tat xyz.fusheng.blog.controller.TypeController.update(TypeController.java:62)\\n\\tat xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)\\n\\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\\n\\tat xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$5997ab44.update(<generated>)\\nCaused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\\n\",\"logMethod\":\"PUT\",\"logParams\":\"[Type(typeId=7, typeName=Java 专题, typeBlogCount=null, enable=null, deleted=null)]\",\"logStatus\":0,\"logTime\":0,\"logUrl\":\"/type/update\"},{\"createdTime\":\"2020-03-12 23:42:11\",\"logId\":44,\"logIp\":\"0:0:0:0:0:0:0:1\",\"logMethod\":\"POST\",\"logParams\":\"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]\",\"logResult\":\"{\\\"code\\\":20000,\\\"data\\\":{\\\"token\\\":\\\"5FF3F2F146F6212E515987562E364095\\\"},\\\"msg\\\":\\\"操作成功！\\\"}\",\"logStatus\":1,\"logTime\":199,\"logUrl\":\"/admin/login\"}],\"pageSize\":10,\"params\":{},\"sortColumn\":\"\",\"sortMethod\":\"asc\",\"totalCount\":331,\"totalPage\":34},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":153,"logUrl":"/log/getByPage"},{"createdTime":"2020-03-19 13:08:52","logId":337,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Page(currentPage=5, pageSize=10, totalPage=34, totalCount=331, index=40, list=[Log(logId=35, logUrl=/type/save, logParams=[Type(typeId=null, typeName=Vue 专题, typeBlogCount=null, enable=null, deleted=null)], logStatus=1, logMessage=null, logMethod=POST, logTime=2209, logResult={\"code\":20000,\"msg\":\"添加成功!\"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:21:09), Log(logId=36, logUrl=/type/listBack, logParams=[], logStatus=1, logMessage=null, logMethod=GET, logTime=87, logResult={\"code\":20000,\"data\":[{\"enable\":1,\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"Spring Boot\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":7,\"typeName\":\"Java\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":8,\"typeName\":\"Spring 全家桶\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":9,\"typeName\":\"项目开发笔记\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":10,\"typeName\":\"MyBatis 专题\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":11,\"typeName\":\"Linux 专题\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":12,\"typeName\":\"Vue 专题\"}],\"msg\":\"操作成功！\"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:24:54), Log(logId=37, logUrl=/type/getList, logParams=[], logStatus=1, logMessage=null, logMethod=GET, logTime=88, logResult={\"code\":20000,\"data\":[{\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"Spring Boot\"},{\"typeBlogCount\":0,\"typeId\":7,\"typeName\":\"Java\"},{\"typeBlogCount\":0,\"typeId\":8,\"typeName\":\"Spring 全家桶\"},{\"typeBlogCount\":0,\"typeId\":9,\"typeName\":\"项目开发笔记\"},{\"typeBlogCount\":0,\"typeId\":10,\"typeName\":\"MyBatis 专题\"},{\"typeBlogCount\":0,\"typeId\":11,\"typeName\":\"Linux 专题\"},{\"typeBlogCount\":0,\"typeId\":12,\"typeName\":\"Vue 专题\"}],\"msg\":\"操作成功！\"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:27:09), Log(logId=38, logUrl=/type/update, logParams=[Type(typeId=7, typeName=Java 专题, typeBlogCount=null, enable=null, deleted=null)], logStatus=0, logMessage=org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\n\tat xyz.fusheng.blog.service.impl.TypeServiceImpl.update(TypeServiceImpl.java:51)\n\tat xyz.fusheng.blog.controller.TypeController.update(TypeController.java:62)\n\tat xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)\n\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\n\tat xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$c9c30f4e.update(<generated>)\nCaused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\n, logMethod=PUT, logTime=0, logResult=null, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:32:12), Log(logId=39, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=236, logResult={\"code\":20000,\"data\":{\"token\":\"D9982B3EAC004265A99067419C0DEB6D\"},\"msg\":\"操作成功！\"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:37:44), Log(logId=40, logUrl=/type/update, logParams=[Type(typeId=7, typeName=Java 专题, typeBlogCount=null, enable=null, deleted=null)], logStatus=0, logMessage=org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\n\tat xyz.fusheng.blog.service.impl.TypeServiceImpl.update(TypeServiceImpl.java:51)\n\tat xyz.fusheng.blog.controller.TypeController.update(TypeController.java:62)\n\tat xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)\n\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\n\tat xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$5997ab44.update(<generated>)\nCaused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\n, logMethod=PUT, logTime=0, logResult=null, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:38:04), Log(logId=41, logUrl=/type/update, logParams=[Type(typeId=7, typeName=Java 专题, typeBlogCount=null, enable=null, deleted=null)], logStatus=0, logMessage=org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\n\tat xyz.fusheng.blog.service.impl.TypeServiceImpl.update(TypeServiceImpl.java:51)\n\tat xyz.fusheng.blog.controller.TypeController.update(TypeController.java:62)\n\tat xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)\n\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\n\tat xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$5997ab44.update(<generated>)\nCaused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\n, logMethod=PUT, logTime=0, logResult=null, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:38:12), Log(logId=42, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=80, logResult={\"code\":20000,\"data\":{\"token\":\"D9982B3EAC004265A99067419C0DEB6D\"},\"msg\":\"操作成功！\"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:38:38), Log(logId=43, logUrl=/type/update, logParams=[Type(typeId=7, typeName=Java 专题, typeBlogCount=null, enable=null, deleted=null)], logStatus=0, logMessage=org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\n\tat xyz.fusheng.blog.service.impl.TypeServiceImpl.update(TypeServiceImpl.java:51)\n\tat xyz.fusheng.blog.controller.TypeController.update(TypeController.java:62)\n\tat xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)\n\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\n\tat xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$5997ab44.update(<generated>)\nCaused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\n, logMethod=PUT, logTime=0, logResult=null, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:39:10), Log(logId=44, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=199, logResult={\"code\":20000,\"data\":{\"token\":\"5FF3F2F146F6212E515987562E364095\"},\"msg\":\"操作成功！\"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:42:11)], params={}, sortColumn=, sortMethod=asc)]","logResult":"{\"code\":20000,\"data\":{\"index\":40,\"list\":[{\"createdTime\":\"2020-03-12 23:42:32\",\"logId\":45,\"logIp\":\"0:0:0:0:0:0:0:1\",\"logMethod\":\"GET\",\"logParams\":\"[]\",\"logResult\":\"{\\\"code\\\":20000,\\\"data\\\":[{\\\"enable\\\":1,\\\"typeBlogCount\\\":0,\\\"typeId\\\":6,\\\"typeName\\\":\\\"Spring Boot\\\"},{\\\"enable\\\":1,\\\"typeBlogCount\\\":0,\\\"typeId\\\":7,\\\"typeName\\\":\\\"Java\\\"},{\\\"enable\\\":1,\\\"typeBlogCount\\\":0,\\\"typeId\\\":8,\\\"typeName\\\":\\\"Spring 全家桶\\\"},{\\\"enable\\\":1,\\\"typeBlogCount\\\":0,\\\"typeId\\\":9,\\\"typeName\\\":\\\"项目开发笔记\\\"},{\\\"enable\\\":1,\\\"typeBlogCount\\\":0,\\\"typeId\\\":10,\\\"typeName\\\":\\\"MyBatis 专题\\\"},{\\\"enable\\\":1,\\\"typeBlogCount\\\":0,\\\"typeId\\\":11,\\\"typeName\\\":\\\"Linux 专题\\\"},{\\\"enable\\\":1,\\\"typeBlogCount\\\":0,\\\"typeId\\\":12,\\\"typeName\\\":\\\"Vue 专题\\\"}],\\\"msg\\\":\\\"操作成功！\\\"}\",\"logStatus\":1,\"logTime\":92,\"logUrl\":\"/type/listBack\"},{\"createdTime\":\"2020-03-12 23:42:40\",\"logId\":46,\"logIp\":\"0:0:0:0:0:0:0:1\",\"logMessage\":\"org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\\n\\tat xyz.fusheng.blog.service.impl.TypeServiceImpl.update(TypeServiceImpl.java:51)\\n\\tat xyz.fusheng.blog.controller.TypeController.update(TypeController.java:62)\\n\\tat xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)\\n\\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\\n\\tat xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$ce615d71.update(<generated>)\\nCaused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\\n\",\"logMethod\":\"PUT\",\"logParams\":\"[Type(typeId=7, typeName=Java 专题, typeBlogCount=null, enable=null, deleted=null)]\",\"logStatus\":0,\"logTime\":0,\"logUrl\":\"/type/update\"},{\"createdTime\":\"2020-03-12 23:44:05\",\"logId\":47,\"logIp\":\"0:0:0:0:0:0:0:1\",\"logMessage\":\"org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\\n\\tat xyz.fusheng.blog.service.impl.TypeServiceImpl.update(TypeServiceImpl.java:51)\\n\\tat xyz.fusheng.blog.controller.TypeController.update(TypeController.java:62)\\n\\tat xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)\\n\\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\\n\\tat xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$ce615d71.update(<generated>)\\nCaused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\\n\",\"logMethod\":\"PUT\",\"logParams\":\"[Type(typeId=7, typeName=Java 专题, typeBlogCount=null, enable=null, deleted=null)]\",\"logStatus\":0,\"logTime\":0,\"logUrl\":\"/type/update\"},{\"createdTime\":\"2020-03-12 23:45:26\",\"logId\":48,\"logIp\":\"0:0:0:0:0:0:0:1\",\"logMethod\":\"GET\",\"logParams\":\"[]\",\"logResult\":\"{\\\"code\\\":20000,\\\"data\\\":[{\\\"typeBlogCount\\\":0,\\\"typeId\\\":6,\\\"typeName\\\":\\\"Spring Boot\\\"},{\\\"typeBlogCount\\\":0,\\\"typeId\\\":7,\\\"typeName\\\":\\\"Java\\\"},{\\\"typeBlogCount\\\":0,\\\"typeId\\\":8,\\\"typeName\\\":\\\"Spring 全家桶\\\"},{\\\"typeBlogCount\\\":0,\\\"typeId\\\":9,\\\"typeName\\\":\\\"项目开发笔记\\\"},{\\\"typeBlogCount\\\":0,\\\"typeId\\\":10,\\\"typeName\\\":\\\"MyBatis 专题\\\"},{\\\"typeBlogCount\\\":0,\\\"typeId\\\":11,\\\"typeName\\\":\\\"Linux 专题\\\"},{\\\"typeBlogCount\\\":0,\\\"typeId\\\":12,\\\"typeName\\\":\\\"Vue 专题\\\"}],\\\"msg\\\":\\\"操作成功！\\\"}\",\"logStatus\":1,\"logTime\":92,\"logUrl\":\"/type/getList\"},{\"createdTime\":\"2020-03-12 23:50:17\",\"logId\":49,\"logIp\":\"0:0:0:0:0:0:0:1\",\"logMethod\":\"GET\",\"logParams\":\"[]\",\"logResult\":\"{\\\"code\\\":20000,\\\"data\\\":[{\\\"typeBlogCount\\\":0,\\\"typeId\\\":6,\\\"typeName\\\":\\\"Spring Boot\\\"},{\\\"typeBlogCount\\\":0,\\\"typeId\\\":7,\\\"typeName\\\":\\\"Java\\\"},{\\\"typeBlogCount\\\":0,\\\"typeId\\\":8,\\\"typeName\\\":\\\"Spring 全家桶\\\"},{\\\"typeBlogCount\\\":0,\\\"typeId\\\":9,\\\"typeName\\\":\\\"项目开发笔记\\\"},{\\\"typeBlogCount\\\":0,\\\"typeId\\\":10,\\\"typeName\\\":\\\"MyBatis 专题\\\"},{\\\"typeBlogCount\\\":0,\\\"typeId\\\":11,\\\"typeName\\\":\\\"Linux 专题\\\"},{\\\"typeBlogCount\\\":0,\\\"typeId\\\":12,\\\"typeName\\\":\\\"Vue 专题\\\"}],\\\"msg\\\":\\\"操作成功！\\\"}\",\"logStatus\":1,\"logTime\":2107,\"logUrl\":\"/type/getList\"},{\"createdTime\":\"2020-03-13 00:00:26\",\"logId\":50,\"logIp\":\"0:0:0:0:0:0:0:1\",\"logMethod\":\"POST\",\"logParams\":\"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]\",\"logResult\":\"{\\\"code\\\":20000,\\\"data\\\":{\\\"token\\\":\\\"636ACE77F9C91B95B82CCEE88E854055\\\"},\\\"msg\\\":\\\"操作成功！\\\"}\",\"logStatus\":1,\"logTime\":236,\"logUrl\":\"/admin/login\"},{\"createdTime\":\"2020-03-13 00:00:45\",\"logId\":51,\"logIp\":\"0:0:0:0:0:0:0:1\",\"logMethod\":\"PUT\",\"logParams\":\"[Type(typeId=7, typeName=Java ++, typeBlogCount=null, enable=null, deleted=null)]\",\"logResult\":\"{\\\"code\\\":20000,\\\"msg\\\":\\\"更新成功!\\\"}\",\"logStatus\":1,\"logTime\":192,\"logUrl\":\"/type/update\"},{\"createdTime\":\"2020-03-13 00:03:40\",\"logId\":52,\"logIp\":\"0:0:0:0:0:0:0:1\",\"logMessage\":\"\\tat xyz.fusheng.blog.service.impl.TypeServiceImpl.enableById(TypeServiceImpl.java:58)\\n\\tat xyz.fusheng.blog.controller.TypeController.enable(TypeController.java:73)\\n\\tat xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)\\n\\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\\n\\tat xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$c4f2514d.enable(<generated>)\\n\",\"logMethod\":\"PUT\",\"logParams\":\"[6]\",\"logStatus\":0,\"logTime\":0,\"logUrl\":\"/type/enable/6\"},{\"createdTime\":\"2020-03-13 00:03:46\",\"logId\":53,\"logIp\":\"0:0:0:0:0:0:0:1\",\"logMessage\":\"\\tat xyz.fusheng.blog.service.impl.TypeServiceImpl.enableById(TypeServiceImpl.java:58)\\n\\tat xyz.fusheng.blog.controller.TypeController.enable(TypeController.java:73)\\n\\tat xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)\\n\\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\\n\\tat xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$c4f2514d.enable(<generated>)\\n\",\"logMethod\":\"PUT\",\"logParams\":\"[6]\",\"logStatus\":0,\"logTime\":0,\"logUrl\":\"/type/enable/6\"},{\"createdTime\":\"2020-03-13 00:03:59\",\"logId\":54,\"logIp\":\"0:0:0:0:0:0:0:1\",\"logMethod\":\"POST\",\"logParams\":\"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]\",\"logResult\":\"{\\\"code\\\":20000,\\\"data\\\":{\\\"token\\\":\\\"636ACE77F9C91B95B82CCEE88E854055\\\"},\\\"msg\\\":\\\"操作成功！\\\"}\",\"logStatus\":1,\"logTime\":85,\"logUrl\":\"/admin/login\"}],\"pageSize\":10,\"params\":{},\"sortColumn\":\"\",\"sortMethod\":\"asc\",\"totalCount\":332,\"totalPage\":34},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":145,"logUrl":"/log/getByPage"}],"pageSize":10,"params":{},"sortColumn":"","sortMethod":"asc","totalCount":333,"totalPage":34},"msg":"操作成功！"}
2020-03-19 13:08:57.027 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /log/getByPage
2020-03-19 13:08:57.028 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 13:08:57.028 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 13:08:57.029 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.LogController.getByPage
2020-03-19 13:08:57.031 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=34, totalCount=333, index=0, list=[Log(logId=335, logUrl=/log/getByPage, logParams=[Page(currentPage=3, pageSize=10, totalPage=33, totalCount=329, index=20, list=[Log(logId=15, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=108, logResult={"code":20000,"data":{"token":"5462B32F5F25E428DF97B1A77DB5CF14"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 14:53:47), Log(logId=16, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=111, logResult={"code":20000,"data":{"token":"5462B32F5F25E428DF97B1A77DB5CF14"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 14:57:05), Log(logId=17, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=94, logResult={"code":20000,"data":{"token":"5462B32F5F25E428DF97B1A77DB5CF14"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 14:58:51), Log(logId=18, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=2099, logResult={"code":20000,"data":{"token":"5462B32F5F25E428DF97B1A77DB5CF14"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 15:03:35), Log(logId=19, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=350, logResult={"code":20000,"data":{"token":"FD2207DECC0777BD82EFFDC7BAF118E5"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 15:06:24), Log(logId=20, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=276, logResult={"code":20000,"data":{"token":"000D96BCE9C02C801ED7517BAEBFB47E"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 15:37:06), Log(logId=21, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=2094, logResult={"code":20000,"data":{"token":"000D96BCE9C02C801ED7517BAEBFB47E"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 15:42:22), Log(logId=22, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=210, logResult={"code":20000,"data":{"token":"2FC62460C121F7219CBD2CD83E8A5D52"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 15:48:26), Log(logId=23, logUrl=/test/testException/1, logParams=[1], logStatus=1, logMessage=null, logMethod=GET, logTime=11, logResult={"code":20000,"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 15:49:27), Log(logId=24, logUrl=/admin/info, logParams=[], logStatus=1, logMessage=null, logMethod=GET, logTime=5, logResult={"code":20000,"data":{"name":"张浩","password":"","signature":"浮生若梦,为欢几何","username":"admin"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 15:57:05)], params={}, sortColumn=, sortMethod=asc)], logStatus=1, logMessage=null, logMethod=POST, logTime=149, logResult={"code":20000,"data":{"index":20,"list":[{"createdTime":"2020-03-12 15:58:40","logId":25,"logIp":"0:0:0:0:0:0:0:1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":{\"name\":\"张浩\",\"password\":\"\",\"signature\":\"浮生若梦,为欢几何\",\"username\":\"admin\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":8,"logUrl":"/admin/info"},{"createdTime":"2020-03-12 22:53:34","logId":26,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"BBFB3D9A22F61771AABAAFB91455A656\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":257,"logUrl":"/admin/login"},{"createdTime":"2020-03-12 22:54:29","logId":27,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Type(typeId=null, typeName=Spring Boot, typeBlogCount=null, enable=null, deleted=null)]","logResult":"{\"code\":20000,\"msg\":\"添加成功!\"}","logStatus":1,"logTime":209,"logUrl":"/type/save"},{"createdTime":"2020-03-12 23:01:06","logId":28,"logIp":"0:0:0:0:0:0:0:1","logMessage":"xyz.fusheng.blog.exception.BlogException: 该分类类型已经存在!\n\tat xyz.fusheng.blog.service.impl.TypeServiceImpl.save(TypeServiceImpl.java:34)\n\tat xyz.fusheng.blog.controller.TypeController.save(TypeController.java:31)\n\tat xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)\n\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\n\tat xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$866d35f4.save(<generated>)\n","logMethod":"POST","logParams":"[Type(typeId=null, typeName=Spring Boot, typeBlogCount=null, enable=null, deleted=null)]","logStatus":0,"logTime":0,"logUrl":"/type/save"},{"createdTime":"2020-03-12 23:04:54","logId":29,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"C83ED7DE1CE7AA48E9FA9DAF210140D4\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":191,"logUrl":"/admin/login"},{"createdTime":"2020-03-12 23:05:16","logId":30,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Type(typeId=null, typeName=Java, typeBlogCount=null, enable=null, deleted=null)]","logResult":"{\"code\":20000,\"msg\":\"添加成功!\"}","logStatus":1,"logTime":199,"logUrl":"/type/save"},{"createdTime":"2020-03-12 23:05:32","logId":31,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Type(typeId=null, typeName=Spring 全家桶, typeBlogCount=null, enable=null, deleted=null)]","logResult":"{\"code\":20000,\"msg\":\"添加成功!\"}","logStatus":1,"logTime":189,"logUrl":"/type/save"},{"createdTime":"2020-03-12 23:06:54","logId":32,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Type(typeId=null, typeName=项目开发笔记, typeBlogCount=null, enable=null, deleted=null)]","logResult":"{\"code\":20000,\"msg\":\"添加成功!\"}","logStatus":1,"logTime":196,"logUrl":"/type/save"},{"createdTime":"2020-03-12 23:07:19","logId":33,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Type(typeId=null, typeName=MyBatis 专题, typeBlogCount=null, enable=null, deleted=null)]","logResult":"{\"code\":20000,\"msg\":\"添加成功!\"}","logStatus":1,"logTime":218,"logUrl":"/type/save"},{"createdTime":"2020-03-12 23:07:32","logId":34,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Type(typeId=null, typeName=Linux 专题, typeBlogCount=null, enable=null, deleted=null)]","logResult":"{\"code\":20000,\"msg\":\"添加成功!\"}","logStatus":1,"logTime":196,"logUrl":"/type/save"}],"pageSize":10,"params":{},"sortColumn":"","sortMethod":"asc","totalCount":330,"totalPage":33},"msg":"操作成功！"}, logIp=127.0.0.1, createdTime=2020-03-19 13:08:49), Log(logId=336, logUrl=/log/getByPage, logParams=[Page(currentPage=4, pageSize=10, totalPage=33, totalCount=330, index=30, list=[Log(logId=25, logUrl=/admin/info, logParams=[], logStatus=1, logMessage=null, logMethod=GET, logTime=8, logResult={"code":20000,"data":{"name":"张浩","password":"","signature":"浮生若梦,为欢几何","username":"admin"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 15:58:40), Log(logId=26, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=257, logResult={"code":20000,"data":{"token":"BBFB3D9A22F61771AABAAFB91455A656"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 22:53:34), Log(logId=27, logUrl=/type/save, logParams=[Type(typeId=null, typeName=Spring Boot, typeBlogCount=null, enable=null, deleted=null)], logStatus=1, logMessage=null, logMethod=POST, logTime=209, logResult={"code":20000,"msg":"添加成功!"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 22:54:29), Log(logId=28, logUrl=/type/save, logParams=[Type(typeId=null, typeName=Spring Boot, typeBlogCount=null, enable=null, deleted=null)], logStatus=0, logMessage=xyz.fusheng.blog.exception.BlogException: 该分类类型已经存在!
	at xyz.fusheng.blog.service.impl.TypeServiceImpl.save(TypeServiceImpl.java:34)
	at xyz.fusheng.blog.controller.TypeController.save(TypeController.java:31)
	at xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)
	at xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)
	at xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$866d35f4.save(<generated>)
, logMethod=POST, logTime=0, logResult=null, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:01:06), Log(logId=29, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=191, logResult={"code":20000,"data":{"token":"C83ED7DE1CE7AA48E9FA9DAF210140D4"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:04:54), Log(logId=30, logUrl=/type/save, logParams=[Type(typeId=null, typeName=Java, typeBlogCount=null, enable=null, deleted=null)], logStatus=1, logMessage=null, logMethod=POST, logTime=199, logResult={"code":20000,"msg":"添加成功!"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:05:16), Log(logId=31, logUrl=/type/save, logParams=[Type(typeId=null, typeName=Spring 全家桶, typeBlogCount=null, enable=null, deleted=null)], logStatus=1, logMessage=null, logMethod=POST, logTime=189, logResult={"code":20000,"msg":"添加成功!"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:05:32), Log(logId=32, logUrl=/type/save, logParams=[Type(typeId=null, typeName=项目开发笔记, typeBlogCount=null, enable=null, deleted=null)], logStatus=1, logMessage=null, logMethod=POST, logTime=196, logResult={"code":20000,"msg":"添加成功!"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:06:54), Log(logId=33, logUrl=/type/save, logParams=[Type(typeId=null, typeName=MyBatis 专题, typeBlogCount=null, enable=null, deleted=null)], logStatus=1, logMessage=null, logMethod=POST, logTime=218, logResult={"code":20000,"msg":"添加成功!"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:07:19), Log(logId=34, logUrl=/type/save, logParams=[Type(typeId=null, typeName=Linux 专题, typeBlogCount=null, enable=null, deleted=null)], logStatus=1, logMessage=null, logMethod=POST, logTime=196, logResult={"code":20000,"msg":"添加成功!"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:07:32)], params={}, sortColumn=, sortMethod=asc)], logStatus=1, logMessage=null, logMethod=POST, logTime=153, logResult={"code":20000,"data":{"index":30,"list":[{"createdTime":"2020-03-12 23:21:09","logId":35,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Type(typeId=null, typeName=Vue 专题, typeBlogCount=null, enable=null, deleted=null)]","logResult":"{\"code\":20000,\"msg\":\"添加成功!\"}","logStatus":1,"logTime":2209,"logUrl":"/type/save"},{"createdTime":"2020-03-12 23:24:54","logId":36,"logIp":"0:0:0:0:0:0:0:1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"enable\":1,\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"Spring Boot\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":7,\"typeName\":\"Java\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":8,\"typeName\":\"Spring 全家桶\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":9,\"typeName\":\"项目开发笔记\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":10,\"typeName\":\"MyBatis 专题\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":11,\"typeName\":\"Linux 专题\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":12,\"typeName\":\"Vue 专题\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":87,"logUrl":"/type/listBack"},{"createdTime":"2020-03-12 23:27:09","logId":37,"logIp":"0:0:0:0:0:0:0:1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"Spring Boot\"},{\"typeBlogCount\":0,\"typeId\":7,\"typeName\":\"Java\"},{\"typeBlogCount\":0,\"typeId\":8,\"typeName\":\"Spring 全家桶\"},{\"typeBlogCount\":0,\"typeId\":9,\"typeName\":\"项目开发笔记\"},{\"typeBlogCount\":0,\"typeId\":10,\"typeName\":\"MyBatis 专题\"},{\"typeBlogCount\":0,\"typeId\":11,\"typeName\":\"Linux 专题\"},{\"typeBlogCount\":0,\"typeId\":12,\"typeName\":\"Vue 专题\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":88,"logUrl":"/type/getList"},{"createdTime":"2020-03-12 23:32:12","logId":38,"logIp":"0:0:0:0:0:0:0:1","logMessage":"org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\n\tat xyz.fusheng.blog.service.impl.TypeServiceImpl.update(TypeServiceImpl.java:51)\n\tat xyz.fusheng.blog.controller.TypeController.update(TypeController.java:62)\n\tat xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)\n\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\n\tat xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$c9c30f4e.update(<generated>)\nCaused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\n","logMethod":"PUT","logParams":"[Type(typeId=7, typeName=Java 专题, typeBlogCount=null, enable=null, deleted=null)]","logStatus":0,"logTime":0,"logUrl":"/type/update"},{"createdTime":"2020-03-12 23:37:44","logId":39,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"D9982B3EAC004265A99067419C0DEB6D\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":236,"logUrl":"/admin/login"},{"createdTime":"2020-03-12 23:38:04","logId":40,"logIp":"0:0:0:0:0:0:0:1","logMessage":"org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\n\tat xyz.fusheng.blog.service.impl.TypeServiceImpl.update(TypeServiceImpl.java:51)\n\tat xyz.fusheng.blog.controller.TypeController.update(TypeController.java:62)\n\tat xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)\n\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\n\tat xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$5997ab44.update(<generated>)\nCaused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\n","logMethod":"PUT","logParams":"[Type(typeId=7, typeName=Java 专题, typeBlogCount=null, enable=null, deleted=null)]","logStatus":0,"logTime":0,"logUrl":"/type/update"},{"createdTime":"2020-03-12 23:38:12","logId":41,"logIp":"0:0:0:0:0:0:0:1","logMessage":"org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\n\tat xyz.fusheng.blog.service.impl.TypeServiceImpl.update(TypeServiceImpl.java:51)\n\tat xyz.fusheng.blog.controller.TypeController.update(TypeController.java:62)\n\tat xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)\n\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\n\tat xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$5997ab44.update(<generated>)\nCaused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\n","logMethod":"PUT","logParams":"[Type(typeId=7, typeName=Java 专题, typeBlogCount=null, enable=null, deleted=null)]","logStatus":0,"logTime":0,"logUrl":"/type/update"},{"createdTime":"2020-03-12 23:38:38","logId":42,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"D9982B3EAC004265A99067419C0DEB6D\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":80,"logUrl":"/admin/login"},{"createdTime":"2020-03-12 23:39:10","logId":43,"logIp":"0:0:0:0:0:0:0:1","logMessage":"org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\n\tat xyz.fusheng.blog.service.impl.TypeServiceImpl.update(TypeServiceImpl.java:51)\n\tat xyz.fusheng.blog.controller.TypeController.update(TypeController.java:62)\n\tat xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)\n\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\n\tat xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$5997ab44.update(<generated>)\nCaused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\n","logMethod":"PUT","logParams":"[Type(typeId=7, typeName=Java 专题, typeBlogCount=null, enable=null, deleted=null)]","logStatus":0,"logTime":0,"logUrl":"/type/update"},{"createdTime":"2020-03-12 23:42:11","logId":44,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"5FF3F2F146F6212E515987562E364095\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":199,"logUrl":"/admin/login"}],"pageSize":10,"params":{},"sortColumn":"","sortMethod":"asc","totalCount":331,"totalPage":34},"msg":"操作成功！"}, logIp=127.0.0.1, createdTime=2020-03-19 13:08:51), Log(logId=337, logUrl=/log/getByPage, logParams=[Page(currentPage=5, pageSize=10, totalPage=34, totalCount=331, index=40, list=[Log(logId=35, logUrl=/type/save, logParams=[Type(typeId=null, typeName=Vue 专题, typeBlogCount=null, enable=null, deleted=null)], logStatus=1, logMessage=null, logMethod=POST, logTime=2209, logResult={"code":20000,"msg":"添加成功!"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:21:09), Log(logId=36, logUrl=/type/listBack, logParams=[], logStatus=1, logMessage=null, logMethod=GET, logTime=87, logResult={"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"Spring Boot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Java"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"Spring 全家桶"},{"enable":1,"typeBlogCount":0,"typeId":9,"typeName":"项目开发笔记"},{"enable":1,"typeBlogCount":0,"typeId":10,"typeName":"MyBatis 专题"},{"enable":1,"typeBlogCount":0,"typeId":11,"typeName":"Linux 专题"},{"enable":1,"typeBlogCount":0,"typeId":12,"typeName":"Vue 专题"}],"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:24:54), Log(logId=37, logUrl=/type/getList, logParams=[], logStatus=1, logMessage=null, logMethod=GET, logTime=88, logResult={"code":20000,"data":[{"typeBlogCount":0,"typeId":6,"typeName":"Spring Boot"},{"typeBlogCount":0,"typeId":7,"typeName":"Java"},{"typeBlogCount":0,"typeId":8,"typeName":"Spring 全家桶"},{"typeBlogCount":0,"typeId":9,"typeName":"项目开发笔记"},{"typeBlogCount":0,"typeId":10,"typeName":"MyBatis 专题"},{"typeBlogCount":0,"typeId":11,"typeName":"Linux 专题"},{"typeBlogCount":0,"typeId":12,"typeName":"Vue 专题"}],"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:27:09), Log(logId=38, logUrl=/type/update, logParams=[Type(typeId=7, typeName=Java 专题, typeBlogCount=null, enable=null, deleted=null)], logStatus=0, logMessage=org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'
	at xyz.fusheng.blog.service.impl.TypeServiceImpl.update(TypeServiceImpl.java:51)
	at xyz.fusheng.blog.controller.TypeController.update(TypeController.java:62)
	at xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)
	at xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)
	at xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$c9c30f4e.update(<generated>)
Caused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'
, logMethod=PUT, logTime=0, logResult=null, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:32:12), Log(logId=39, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=236, logResult={"code":20000,"data":{"token":"D9982B3EAC004265A99067419C0DEB6D"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:37:44), Log(logId=40, logUrl=/type/update, logParams=[Type(typeId=7, typeName=Java 专题, typeBlogCount=null, enable=null, deleted=null)], logStatus=0, logMessage=org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'
	at xyz.fusheng.blog.service.impl.TypeServiceImpl.update(TypeServiceImpl.java:51)
	at xyz.fusheng.blog.controller.TypeController.update(TypeController.java:62)
	at xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)
	at xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)
	at xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$5997ab44.update(<generated>)
Caused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'
, logMethod=PUT, logTime=0, logResult=null, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:38:04), Log(logId=41, logUrl=/type/update, logParams=[Type(typeId=7, typeName=Java 专题, typeBlogCount=null, enable=null, deleted=null)], logStatus=0, logMessage=org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'
	at xyz.fusheng.blog.service.impl.TypeServiceImpl.update(TypeServiceImpl.java:51)
	at xyz.fusheng.blog.controller.TypeController.update(TypeController.java:62)
	at xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)
	at xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)
	at xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$5997ab44.update(<generated>)
Caused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'
, logMethod=PUT, logTime=0, logResult=null, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:38:12), Log(logId=42, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=80, logResult={"code":20000,"data":{"token":"D9982B3EAC004265A99067419C0DEB6D"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:38:38), Log(logId=43, logUrl=/type/update, logParams=[Type(typeId=7, typeName=Java 专题, typeBlogCount=null, enable=null, deleted=null)], logStatus=0, logMessage=org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'
	at xyz.fusheng.blog.service.impl.TypeServiceImpl.update(TypeServiceImpl.java:51)
	at xyz.fusheng.blog.controller.TypeController.update(TypeController.java:62)
	at xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)
	at xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)
	at xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$5997ab44.update(<generated>)
Caused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'
, logMethod=PUT, logTime=0, logResult=null, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:39:10), Log(logId=44, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=199, logResult={"code":20000,"data":{"token":"5FF3F2F146F6212E515987562E364095"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:42:11)], params={}, sortColumn=, sortMethod=asc)], logStatus=1, logMessage=null, logMethod=POST, logTime=145, logResult={"code":20000,"data":{"index":40,"list":[{"createdTime":"2020-03-12 23:42:32","logId":45,"logIp":"0:0:0:0:0:0:0:1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"enable\":1,\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"Spring Boot\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":7,\"typeName\":\"Java\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":8,\"typeName\":\"Spring 全家桶\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":9,\"typeName\":\"项目开发笔记\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":10,\"typeName\":\"MyBatis 专题\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":11,\"typeName\":\"Linux 专题\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":12,\"typeName\":\"Vue 专题\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":92,"logUrl":"/type/listBack"},{"createdTime":"2020-03-12 23:42:40","logId":46,"logIp":"0:0:0:0:0:0:0:1","logMessage":"org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\n\tat xyz.fusheng.blog.service.impl.TypeServiceImpl.update(TypeServiceImpl.java:51)\n\tat xyz.fusheng.blog.controller.TypeController.update(TypeController.java:62)\n\tat xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)\n\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\n\tat xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$ce615d71.update(<generated>)\nCaused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\n","logMethod":"PUT","logParams":"[Type(typeId=7, typeName=Java 专题, typeBlogCount=null, enable=null, deleted=null)]","logStatus":0,"logTime":0,"logUrl":"/type/update"},{"createdTime":"2020-03-12 23:44:05","logId":47,"logIp":"0:0:0:0:0:0:0:1","logMessage":"org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\n\tat xyz.fusheng.blog.service.impl.TypeServiceImpl.update(TypeServiceImpl.java:51)\n\tat xyz.fusheng.blog.controller.TypeController.update(TypeController.java:62)\n\tat xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)\n\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\n\tat xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$ce615d71.update(<generated>)\nCaused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\n","logMethod":"PUT","logParams":"[Type(typeId=7, typeName=Java 专题, typeBlogCount=null, enable=null, deleted=null)]","logStatus":0,"logTime":0,"logUrl":"/type/update"},{"createdTime":"2020-03-12 23:45:26","logId":48,"logIp":"0:0:0:0:0:0:0:1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"Spring Boot\"},{\"typeBlogCount\":0,\"typeId\":7,\"typeName\":\"Java\"},{\"typeBlogCount\":0,\"typeId\":8,\"typeName\":\"Spring 全家桶\"},{\"typeBlogCount\":0,\"typeId\":9,\"typeName\":\"项目开发笔记\"},{\"typeBlogCount\":0,\"typeId\":10,\"typeName\":\"MyBatis 专题\"},{\"typeBlogCount\":0,\"typeId\":11,\"typeName\":\"Linux 专题\"},{\"typeBlogCount\":0,\"typeId\":12,\"typeName\":\"Vue 专题\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":92,"logUrl":"/type/getList"},{"createdTime":"2020-03-12 23:50:17","logId":49,"logIp":"0:0:0:0:0:0:0:1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"Spring Boot\"},{\"typeBlogCount\":0,\"typeId\":7,\"typeName\":\"Java\"},{\"typeBlogCount\":0,\"typeId\":8,\"typeName\":\"Spring 全家桶\"},{\"typeBlogCount\":0,\"typeId\":9,\"typeName\":\"项目开发笔记\"},{\"typeBlogCount\":0,\"typeId\":10,\"typeName\":\"MyBatis 专题\"},{\"typeBlogCount\":0,\"typeId\":11,\"typeName\":\"Linux 专题\"},{\"typeBlogCount\":0,\"typeId\":12,\"typeName\":\"Vue 专题\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":2107,"logUrl":"/type/getList"},{"createdTime":"2020-03-13 00:00:26","logId":50,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"636ACE77F9C91B95B82CCEE88E854055\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":236,"logUrl":"/admin/login"},{"createdTime":"2020-03-13 00:00:45","logId":51,"logIp":"0:0:0:0:0:0:0:1","logMethod":"PUT","logParams":"[Type(typeId=7, typeName=Java ++, typeBlogCount=null, enable=null, deleted=null)]","logResult":"{\"code\":20000,\"msg\":\"更新成功!\"}","logStatus":1,"logTime":192,"logUrl":"/type/update"},{"createdTime":"2020-03-13 00:03:40","logId":52,"logIp":"0:0:0:0:0:0:0:1","logMessage":"\tat xyz.fusheng.blog.service.impl.TypeServiceImpl.enableById(TypeServiceImpl.java:58)\n\tat xyz.fusheng.blog.controller.TypeController.enable(TypeController.java:73)\n\tat xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)\n\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\n\tat xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$c4f2514d.enable(<generated>)\n","logMethod":"PUT","logParams":"[6]","logStatus":0,"logTime":0,"logUrl":"/type/enable/6"},{"createdTime":"2020-03-13 00:03:46","logId":53,"logIp":"0:0:0:0:0:0:0:1","logMessage":"\tat xyz.fusheng.blog.service.impl.TypeServiceImpl.enableById(TypeServiceImpl.java:58)\n\tat xyz.fusheng.blog.controller.TypeController.enable(TypeController.java:73)\n\tat xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)\n\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\n\tat xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$c4f2514d.enable(<generated>)\n","logMethod":"PUT","logParams":"[6]","logStatus":0,"logTime":0,"logUrl":"/type/enable/6"},{"createdTime":"2020-03-13 00:03:59","logId":54,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"636ACE77F9C91B95B82CCEE88E854055\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":85,"logUrl":"/admin/login"}],"pageSize":10,"params":{},"sortColumn":"","sortMethod":"asc","totalCount":332,"totalPage":34},"msg":"操作成功！"}, logIp=127.0.0.1, createdTime=2020-03-19 13:08:52)], params={}, sortColumn=, sortMethod=asc)]
2020-03-19 13:08:57.179 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 152
2020-03-19 13:08:57.180 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"index":0,"list":[{"createdTime":"2020-03-12 13:59:30","logId":5,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"B060099F82EDCCC195D1C76F328F682D\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":117,"logUrl":"/admin/login"},{"createdTime":"2020-03-12 14:03:21","logId":6,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"B060099F82EDCCC195D1C76F328F682D\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":86,"logUrl":"/admin/login"},{"createdTime":"2020-03-12 14:05:00","logId":7,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"B060099F82EDCCC195D1C76F328F682D\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":84,"logUrl":"/admin/login"},{"createdTime":"2020-03-12 14:06:16","logId":8,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"B060099F82EDCCC195D1C76F328F682D\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":87,"logUrl":"/admin/login"},{"createdTime":"2020-03-12 14:08:47","logId":9,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"B060099F82EDCCC195D1C76F328F682D\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":86,"logUrl":"/admin/login"},{"createdTime":"2020-03-12 14:10:57","logId":10,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"B060099F82EDCCC195D1C76F328F682D\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":97,"logUrl":"/admin/login"},{"createdTime":"2020-03-12 14:16:59","logId":11,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"A5287CE0FE32C5A9B9406425EF5D7CAB\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":197,"logUrl":"/admin/login"},{"createdTime":"2020-03-12 14:23:00","logId":12,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"A5287CE0FE32C5A9B9406425EF5D7CAB\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":2096,"logUrl":"/admin/login"},{"createdTime":"2020-03-12 14:46:17","logId":13,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"A5287CE0FE32C5A9B9406425EF5D7CAB\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":2095,"logUrl":"/admin/login"},{"createdTime":"2020-03-12 14:49:50","logId":14,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"5462B32F5F25E428DF97B1A77DB5CF14\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":98,"logUrl":"/admin/login"}],"pageSize":10,"params":{},"sortColumn":"","sortMethod":"asc","totalCount":334,"totalPage":34},"msg":"操作成功！"}
2020-03-19 13:09:03.960 WARN  [http-nio-8001-exec-4]org.springframework.web.servlet.PageNotFound.noHandlerFound:1251 -No mapping for POST /log/export
2020-03-19 13:09:03.988 ERROR [http-nio-8001-exec-4]o.a.c.c.C.[Tomcat].[localhost].[/].[dispatcherServlet].log:175 -Servlet.service() for servlet [dispatcherServlet] threw exception
org.apache.shiro.UnavailableSecurityManagerException: No SecurityManager accessible to the calling code, either bound to the org.apache.shiro.util.ThreadContext or as a vm static singleton.  This is an invalid application configuration.
	at org.apache.shiro.SecurityUtils.getSecurityManager(SecurityUtils.java:123)
	at org.apache.shiro.subject.Subject$Builder.<init>(Subject.java:627)
	at org.apache.shiro.SecurityUtils.getSubject(SecurityUtils.java:56)
	at xyz.fusheng.blog.utils.ShiroUtils.getLoginUser(ShiroUtils.java:29)
	at xyz.fusheng.blog.interceptor.LoginInterceptor.preHandle(LoginInterceptor.java:30)
	at org.springframework.web.servlet.HandlerExecutionChain.applyPreHandle(HandlerExecutionChain.java:141)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1035)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:175)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-03-19 13:09:03.994 ERROR [http-nio-8001-exec-4]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].log:175 -Exception Processing ErrorPage[errorCode=0, location=/error]
org.springframework.web.util.NestedServletException: Request processing failed; nested exception is org.apache.shiro.UnavailableSecurityManagerException: No SecurityManager accessible to the calling code, either bound to the org.apache.shiro.util.ThreadContext or as a vm static singleton.  This is an invalid application configuration.
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:175)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.shiro.UnavailableSecurityManagerException: No SecurityManager accessible to the calling code, either bound to the org.apache.shiro.util.ThreadContext or as a vm static singleton.  This is an invalid application configuration.
	at org.apache.shiro.SecurityUtils.getSecurityManager(SecurityUtils.java:123)
	at org.apache.shiro.subject.Subject$Builder.<init>(Subject.java:627)
	at org.apache.shiro.SecurityUtils.getSubject(SecurityUtils.java:56)
	at xyz.fusheng.blog.utils.ShiroUtils.getLoginUser(ShiroUtils.java:29)
	at xyz.fusheng.blog.interceptor.LoginInterceptor.preHandle(LoginInterceptor.java:30)
	at org.springframework.web.servlet.HandlerExecutionChain.applyPreHandle(HandlerExecutionChain.java:141)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1035)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	... 25 common frames omitted
2020-03-19 13:09:16.927 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /log/getByPage
2020-03-19 13:09:16.928 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 13:09:16.928 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 13:09:16.928 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.LogController.getByPage
2020-03-19 13:09:16.929 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=34, totalCount=334, index=0, list=[Log(logId=5, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=117, logResult={"code":20000,"data":{"token":"B060099F82EDCCC195D1C76F328F682D"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 13:59:30), Log(logId=6, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=86, logResult={"code":20000,"data":{"token":"B060099F82EDCCC195D1C76F328F682D"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 14:03:21), Log(logId=7, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=84, logResult={"code":20000,"data":{"token":"B060099F82EDCCC195D1C76F328F682D"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 14:05:00), Log(logId=8, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=87, logResult={"code":20000,"data":{"token":"B060099F82EDCCC195D1C76F328F682D"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 14:06:16), Log(logId=9, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=86, logResult={"code":20000,"data":{"token":"B060099F82EDCCC195D1C76F328F682D"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 14:08:47), Log(logId=10, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=97, logResult={"code":20000,"data":{"token":"B060099F82EDCCC195D1C76F328F682D"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 14:10:57), Log(logId=11, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=197, logResult={"code":20000,"data":{"token":"A5287CE0FE32C5A9B9406425EF5D7CAB"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 14:16:59), Log(logId=12, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=2096, logResult={"code":20000,"data":{"token":"A5287CE0FE32C5A9B9406425EF5D7CAB"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 14:23:00), Log(logId=13, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=2095, logResult={"code":20000,"data":{"token":"A5287CE0FE32C5A9B9406425EF5D7CAB"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 14:46:17), Log(logId=14, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=98, logResult={"code":20000,"data":{"token":"5462B32F5F25E428DF97B1A77DB5CF14"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 14:49:50)], params={logStatus=1, logMethod=GET}, sortColumn=, sortMethod=asc)]
2020-03-19 13:09:17.144 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 217
2020-03-19 13:09:17.146 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"index":0,"list":[{"createdTime":"2020-03-12 15:49:27","logId":23,"logIp":"0:0:0:0:0:0:0:1","logMethod":"GET","logParams":"[1]","logResult":"{\"code\":20000,\"msg\":\"操作成功！\"}","logStatus":1,"logTime":11,"logUrl":"/test/testException/1"},{"createdTime":"2020-03-12 15:57:05","logId":24,"logIp":"0:0:0:0:0:0:0:1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":{\"name\":\"张浩\",\"password\":\"\",\"signature\":\"浮生若梦,为欢几何\",\"username\":\"admin\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":5,"logUrl":"/admin/info"},{"createdTime":"2020-03-12 15:58:40","logId":25,"logIp":"0:0:0:0:0:0:0:1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":{\"name\":\"张浩\",\"password\":\"\",\"signature\":\"浮生若梦,为欢几何\",\"username\":\"admin\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":8,"logUrl":"/admin/info"},{"createdTime":"2020-03-12 23:24:54","logId":36,"logIp":"0:0:0:0:0:0:0:1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"enable\":1,\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"Spring Boot\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":7,\"typeName\":\"Java\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":8,\"typeName\":\"Spring 全家桶\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":9,\"typeName\":\"项目开发笔记\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":10,\"typeName\":\"MyBatis 专题\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":11,\"typeName\":\"Linux 专题\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":12,\"typeName\":\"Vue 专题\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":87,"logUrl":"/type/listBack"},{"createdTime":"2020-03-12 23:27:09","logId":37,"logIp":"0:0:0:0:0:0:0:1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"Spring Boot\"},{\"typeBlogCount\":0,\"typeId\":7,\"typeName\":\"Java\"},{\"typeBlogCount\":0,\"typeId\":8,\"typeName\":\"Spring 全家桶\"},{\"typeBlogCount\":0,\"typeId\":9,\"typeName\":\"项目开发笔记\"},{\"typeBlogCount\":0,\"typeId\":10,\"typeName\":\"MyBatis 专题\"},{\"typeBlogCount\":0,\"typeId\":11,\"typeName\":\"Linux 专题\"},{\"typeBlogCount\":0,\"typeId\":12,\"typeName\":\"Vue 专题\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":88,"logUrl":"/type/getList"},{"createdTime":"2020-03-12 23:42:32","logId":45,"logIp":"0:0:0:0:0:0:0:1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"enable\":1,\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"Spring Boot\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":7,\"typeName\":\"Java\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":8,\"typeName\":\"Spring 全家桶\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":9,\"typeName\":\"项目开发笔记\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":10,\"typeName\":\"MyBatis 专题\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":11,\"typeName\":\"Linux 专题\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":12,\"typeName\":\"Vue 专题\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":92,"logUrl":"/type/listBack"},{"createdTime":"2020-03-12 23:45:26","logId":48,"logIp":"0:0:0:0:0:0:0:1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"Spring Boot\"},{\"typeBlogCount\":0,\"typeId\":7,\"typeName\":\"Java\"},{\"typeBlogCount\":0,\"typeId\":8,\"typeName\":\"Spring 全家桶\"},{\"typeBlogCount\":0,\"typeId\":9,\"typeName\":\"项目开发笔记\"},{\"typeBlogCount\":0,\"typeId\":10,\"typeName\":\"MyBatis 专题\"},{\"typeBlogCount\":0,\"typeId\":11,\"typeName\":\"Linux 专题\"},{\"typeBlogCount\":0,\"typeId\":12,\"typeName\":\"Vue 专题\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":92,"logUrl":"/type/getList"},{"createdTime":"2020-03-12 23:50:17","logId":49,"logIp":"0:0:0:0:0:0:0:1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"Spring Boot\"},{\"typeBlogCount\":0,\"typeId\":7,\"typeName\":\"Java\"},{\"typeBlogCount\":0,\"typeId\":8,\"typeName\":\"Spring 全家桶\"},{\"typeBlogCount\":0,\"typeId\":9,\"typeName\":\"项目开发笔记\"},{\"typeBlogCount\":0,\"typeId\":10,\"typeName\":\"MyBatis 专题\"},{\"typeBlogCount\":0,\"typeId\":11,\"typeName\":\"Linux 专题\"},{\"typeBlogCount\":0,\"typeId\":12,\"typeName\":\"Vue 专题\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":2107,"logUrl":"/type/getList"},{"createdTime":"2020-03-13 00:08:38","logId":58,"logIp":"0:0:0:0:0:0:0:1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"enable\":1,\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"Spring Boot\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":7,\"typeName\":\"Java 专题\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":8,\"typeName\":\"Spring 全家桶\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":9,\"typeName\":\"项目开发笔记\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":10,\"typeName\":\"MyBatis 专题\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":11,\"typeName\":\"Linux 专题\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":12,\"typeName\":\"Vue 专题\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":90,"logUrl":"/type/listBack"},{"createdTime":"2020-03-13 08:04:56","logId":75,"logIp":"0:0:0:0:0:0:0:1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"Spring Boot\"},{\"typeBlogCount\":0,\"typeId\":8,\"typeName\":\"Spring 全家桶\"},{\"typeBlogCount\":0,\"typeId\":9,\"typeName\":\"项目开发笔记\"},{\"typeBlogCount\":0,\"typeId\":10,\"typeName\":\"MyBatis 专题\"},{\"typeBlogCount\":0,\"typeId\":11,\"typeName\":\"Linux 专题\"},{\"typeBlogCount\":0,\"typeId\":12,\"typeName\":\"Vue 专题\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":79,"logUrl":"/type/getList"}],"pageSize":10,"params":{"logStatus":1,"logMethod":"GET"},"sortColumn":"","sortMethod":"asc","totalCount":106,"totalPage":11},"msg":"操作成功！"}
2020-03-19 13:09:24.075 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /log/getByPage
2020-03-19 13:09:24.075 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 13:09:24.076 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 13:09:24.077 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.LogController.getByPage
2020-03-19 13:09:24.077 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=11, totalCount=106, index=0, list=[Log(logId=23, logUrl=/test/testException/1, logParams=[1], logStatus=1, logMessage=null, logMethod=GET, logTime=11, logResult={"code":20000,"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 15:49:27), Log(logId=24, logUrl=/admin/info, logParams=[], logStatus=1, logMessage=null, logMethod=GET, logTime=5, logResult={"code":20000,"data":{"name":"张浩","password":"","signature":"浮生若梦,为欢几何","username":"admin"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 15:57:05), Log(logId=25, logUrl=/admin/info, logParams=[], logStatus=1, logMessage=null, logMethod=GET, logTime=8, logResult={"code":20000,"data":{"name":"张浩","password":"","signature":"浮生若梦,为欢几何","username":"admin"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 15:58:40), Log(logId=36, logUrl=/type/listBack, logParams=[], logStatus=1, logMessage=null, logMethod=GET, logTime=87, logResult={"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"Spring Boot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Java"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"Spring 全家桶"},{"enable":1,"typeBlogCount":0,"typeId":9,"typeName":"项目开发笔记"},{"enable":1,"typeBlogCount":0,"typeId":10,"typeName":"MyBatis 专题"},{"enable":1,"typeBlogCount":0,"typeId":11,"typeName":"Linux 专题"},{"enable":1,"typeBlogCount":0,"typeId":12,"typeName":"Vue 专题"}],"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:24:54), Log(logId=37, logUrl=/type/getList, logParams=[], logStatus=1, logMessage=null, logMethod=GET, logTime=88, logResult={"code":20000,"data":[{"typeBlogCount":0,"typeId":6,"typeName":"Spring Boot"},{"typeBlogCount":0,"typeId":7,"typeName":"Java"},{"typeBlogCount":0,"typeId":8,"typeName":"Spring 全家桶"},{"typeBlogCount":0,"typeId":9,"typeName":"项目开发笔记"},{"typeBlogCount":0,"typeId":10,"typeName":"MyBatis 专题"},{"typeBlogCount":0,"typeId":11,"typeName":"Linux 专题"},{"typeBlogCount":0,"typeId":12,"typeName":"Vue 专题"}],"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:27:09), Log(logId=45, logUrl=/type/listBack, logParams=[], logStatus=1, logMessage=null, logMethod=GET, logTime=92, logResult={"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"Spring Boot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Java"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"Spring 全家桶"},{"enable":1,"typeBlogCount":0,"typeId":9,"typeName":"项目开发笔记"},{"enable":1,"typeBlogCount":0,"typeId":10,"typeName":"MyBatis 专题"},{"enable":1,"typeBlogCount":0,"typeId":11,"typeName":"Linux 专题"},{"enable":1,"typeBlogCount":0,"typeId":12,"typeName":"Vue 专题"}],"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:42:32), Log(logId=48, logUrl=/type/getList, logParams=[], logStatus=1, logMessage=null, logMethod=GET, logTime=92, logResult={"code":20000,"data":[{"typeBlogCount":0,"typeId":6,"typeName":"Spring Boot"},{"typeBlogCount":0,"typeId":7,"typeName":"Java"},{"typeBlogCount":0,"typeId":8,"typeName":"Spring 全家桶"},{"typeBlogCount":0,"typeId":9,"typeName":"项目开发笔记"},{"typeBlogCount":0,"typeId":10,"typeName":"MyBatis 专题"},{"typeBlogCount":0,"typeId":11,"typeName":"Linux 专题"},{"typeBlogCount":0,"typeId":12,"typeName":"Vue 专题"}],"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:45:26), Log(logId=49, logUrl=/type/getList, logParams=[], logStatus=1, logMessage=null, logMethod=GET, logTime=2107, logResult={"code":20000,"data":[{"typeBlogCount":0,"typeId":6,"typeName":"Spring Boot"},{"typeBlogCount":0,"typeId":7,"typeName":"Java"},{"typeBlogCount":0,"typeId":8,"typeName":"Spring 全家桶"},{"typeBlogCount":0,"typeId":9,"typeName":"项目开发笔记"},{"typeBlogCount":0,"typeId":10,"typeName":"MyBatis 专题"},{"typeBlogCount":0,"typeId":11,"typeName":"Linux 专题"},{"typeBlogCount":0,"typeId":12,"typeName":"Vue 专题"}],"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:50:17), Log(logId=58, logUrl=/type/listBack, logParams=[], logStatus=1, logMessage=null, logMethod=GET, logTime=90, logResult={"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"Spring Boot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Java 专题"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"Spring 全家桶"},{"enable":1,"typeBlogCount":0,"typeId":9,"typeName":"项目开发笔记"},{"enable":1,"typeBlogCount":0,"typeId":10,"typeName":"MyBatis 专题"},{"enable":1,"typeBlogCount":0,"typeId":11,"typeName":"Linux 专题"},{"enable":1,"typeBlogCount":0,"typeId":12,"typeName":"Vue 专题"}],"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-13 00:08:38), Log(logId=75, logUrl=/type/getList, logParams=[], logStatus=1, logMessage=null, logMethod=GET, logTime=79, logResult={"code":20000,"data":[{"typeBlogCount":0,"typeId":6,"typeName":"Spring Boot"},{"typeBlogCount":0,"typeId":8,"typeName":"Spring 全家桶"},{"typeBlogCount":0,"typeId":9,"typeName":"项目开发笔记"},{"typeBlogCount":0,"typeId":10,"typeName":"MyBatis 专题"},{"typeBlogCount":0,"typeId":11,"typeName":"Linux 专题"},{"typeBlogCount":0,"typeId":12,"typeName":"Vue 专题"}],"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-13 08:04:56)], params={logStatus=1, logMethod=POST}, sortColumn=, sortMethod=asc)]
2020-03-19 13:09:24.223 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 148
2020-03-19 13:09:24.224 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"index":0,"list":[{"createdTime":"2020-03-12 13:59:30","logId":5,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"B060099F82EDCCC195D1C76F328F682D\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":117,"logUrl":"/admin/login"},{"createdTime":"2020-03-12 14:03:21","logId":6,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"B060099F82EDCCC195D1C76F328F682D\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":86,"logUrl":"/admin/login"},{"createdTime":"2020-03-12 14:05:00","logId":7,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"B060099F82EDCCC195D1C76F328F682D\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":84,"logUrl":"/admin/login"},{"createdTime":"2020-03-12 14:06:16","logId":8,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"B060099F82EDCCC195D1C76F328F682D\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":87,"logUrl":"/admin/login"},{"createdTime":"2020-03-12 14:08:47","logId":9,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"B060099F82EDCCC195D1C76F328F682D\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":86,"logUrl":"/admin/login"},{"createdTime":"2020-03-12 14:10:57","logId":10,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"B060099F82EDCCC195D1C76F328F682D\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":97,"logUrl":"/admin/login"},{"createdTime":"2020-03-12 14:16:59","logId":11,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"A5287CE0FE32C5A9B9406425EF5D7CAB\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":197,"logUrl":"/admin/login"},{"createdTime":"2020-03-12 14:23:00","logId":12,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"A5287CE0FE32C5A9B9406425EF5D7CAB\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":2096,"logUrl":"/admin/login"},{"createdTime":"2020-03-12 14:46:17","logId":13,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"A5287CE0FE32C5A9B9406425EF5D7CAB\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":2095,"logUrl":"/admin/login"},{"createdTime":"2020-03-12 14:49:50","logId":14,"logIp":"0:0:0:0:0:0:0:1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"5462B32F5F25E428DF97B1A77DB5CF14\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":98,"logUrl":"/admin/login"}],"pageSize":10,"params":{"logStatus":1,"logMethod":"POST"},"sortColumn":"","sortMethod":"asc","totalCount":156,"totalPage":16},"msg":"操作成功！"}
2020-03-19 13:09:29.608 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /log/getByPage
2020-03-19 13:09:29.608 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 13:09:29.609 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 13:09:29.609 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.LogController.getByPage
2020-03-19 13:09:29.610 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=16, totalCount=156, index=0, list=[Log(logId=5, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=117, logResult={"code":20000,"data":{"token":"B060099F82EDCCC195D1C76F328F682D"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 13:59:30), Log(logId=6, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=86, logResult={"code":20000,"data":{"token":"B060099F82EDCCC195D1C76F328F682D"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 14:03:21), Log(logId=7, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=84, logResult={"code":20000,"data":{"token":"B060099F82EDCCC195D1C76F328F682D"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 14:05:00), Log(logId=8, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=87, logResult={"code":20000,"data":{"token":"B060099F82EDCCC195D1C76F328F682D"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 14:06:16), Log(logId=9, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=86, logResult={"code":20000,"data":{"token":"B060099F82EDCCC195D1C76F328F682D"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 14:08:47), Log(logId=10, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=97, logResult={"code":20000,"data":{"token":"B060099F82EDCCC195D1C76F328F682D"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 14:10:57), Log(logId=11, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=197, logResult={"code":20000,"data":{"token":"A5287CE0FE32C5A9B9406425EF5D7CAB"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 14:16:59), Log(logId=12, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=2096, logResult={"code":20000,"data":{"token":"A5287CE0FE32C5A9B9406425EF5D7CAB"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 14:23:00), Log(logId=13, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=2095, logResult={"code":20000,"data":{"token":"A5287CE0FE32C5A9B9406425EF5D7CAB"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 14:46:17), Log(logId=14, logUrl=/admin/login, logParams=[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)], logStatus=1, logMessage=null, logMethod=POST, logTime=98, logResult={"code":20000,"data":{"token":"5462B32F5F25E428DF97B1A77DB5CF14"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 14:49:50)], params={logStatus=0, logMethod=POST}, sortColumn=, sortMethod=asc)]
2020-03-19 13:09:29.804 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 196
2020-03-19 13:09:29.805 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"index":0,"list":[{"createdTime":"2020-03-12 23:01:06","logId":28,"logIp":"0:0:0:0:0:0:0:1","logMessage":"xyz.fusheng.blog.exception.BlogException: 该分类类型已经存在!\n\tat xyz.fusheng.blog.service.impl.TypeServiceImpl.save(TypeServiceImpl.java:34)\n\tat xyz.fusheng.blog.controller.TypeController.save(TypeController.java:31)\n\tat xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)\n\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\n\tat xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$866d35f4.save(<generated>)\n","logMethod":"POST","logParams":"[Type(typeId=null, typeName=Spring Boot, typeBlogCount=null, enable=null, deleted=null)]","logStatus":0,"logTime":0,"logUrl":"/type/save"},{"createdTime":"2020-03-13 15:09:22","logId":84,"logIp":"0:0:0:0:0:0:0:1","logMessage":"org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'linlName' in 'class xyz.fusheng.blog.pojo.Link'\n\tat xyz.fusheng.blog.service.impl.LinkServiceImpl.save(LinkServiceImpl.java:25)\n\tat xyz.fusheng.blog.controller.LinkController.save(LinkController.java:33)\n\tat xyz.fusheng.blog.controller.LinkController$$FastClassBySpringCGLIB$$faeda005.invoke(<generated>)\n\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\n\tat xyz.fusheng.blog.controller.LinkController$$EnhancerBySpringCGLIB$$1fc4c65.save(<generated>)\nCaused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'linlName' in 'class xyz.fusheng.blog.pojo.Link'\n","logMethod":"POST","logParams":"[Link(linkId=null, linkName=baidu, linkUrl=www.baidu.com, createdTime=null, updateTime=null, version=null, deleted=null)]","logStatus":0,"logTime":0,"logUrl":"/link/save"},{"createdTime":"2020-03-13 15:14:41","logId":87,"logIp":"0:0:0:0:0:0:0:1","logMessage":"org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'linlName' in 'class xyz.fusheng.blog.pojo.Link'\n\tat xyz.fusheng.blog.service.impl.LinkServiceImpl.save(LinkServiceImpl.java:25)\n\tat xyz.fusheng.blog.controller.LinkController.save(LinkController.java:33)\n\tat xyz.fusheng.blog.controller.LinkController$$FastClassBySpringCGLIB$$faeda005.invoke(<generated>)\n\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\n\tat xyz.fusheng.blog.controller.LinkController$$EnhancerBySpringCGLIB$$e7b2bf1d.save(<generated>)\nCaused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'linlName' in 'class xyz.fusheng.blog.pojo.Link'\n","logMethod":"POST","logParams":"[Link(linkId=null, linkName=baidu, linkUrl=www.baidu.com, createdTime=null, updateTime=null, version=null, deleted=null)]","logStatus":0,"logTime":0,"logUrl":"/link/save"},{"createdTime":"2020-03-13 22:56:50","logId":119,"logIp":"0:0:0:0:0:0:0:1","logMessage":"org.springframework.dao.DataIntegrityViolationException: \n### Error updating database.  Cause: java.sql.SQLIntegrityConstraintViolationException: Column 'blog_id' cannot be null\n### The error may involve xyz.fusheng.blog.mapper.BlogMapper.save-Inline\n### Cause: java.sql.SQLIntegrityConstraintViolationException: Column 'blog_id' cannot be null\n; Column 'blog_id' cannot be null; nested exception is java.sql.SQLIntegrityConstraintViolationException: Column 'blog_id' cannot be null\n\tat xyz.fusheng.blog.service.impl.BlogServiceImpl.save(BlogServiceImpl.java:38)\n\tat xyz.fusheng.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$4f70dde1.invoke(<generated>)\n\tat xyz.fusheng.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$8b6ceecc.save(<generated>)\n\tat xyz.fusheng.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$4f70dde1.invoke(<generated>)\n\tat xyz.fusheng.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$86b7ed20.save(<generated>)\n\tat xyz.fusheng.blog.controller.BlogController.save(BlogController.java:38)\n\tat xyz.fusheng.blog.controller.BlogController$$FastClassBySpringCGLIB$$a7ebadad.invoke(<generated>)\n\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\n\tat xyz.fusheng.blog.controller.BlogController$$EnhancerBySpringCGLIB$$c72b172.save(<generated>)\nCaused by: java.sql.SQLIntegrityConstraintViolationException: Column 'blog_id' cannot be null\n","logMethod":"POST","logParams":"[Blog(blogId=null, blogTitle=测试博客1, blogImage=null, blogContent=测试内容, blogGoods=null, blogRead=null, blogCollection=null, blogType=6, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)]","logStatus":0,"logTime":0,"logUrl":"/blog/save"},{"createdTime":"2020-03-19 12:12:13","logId":315,"logIp":"127.0.0.1","logMessage":"org.springframework.dao.DataIntegrityViolationException: \n### Error updating database.  Cause: java.sql.SQLIntegrityConstraintViolationException: Column 'blog_type' cannot be null\n### The error may involve xyz.fusheng.blog.mapper.BlogMapper.save-Inline\n### Cause: java.sql.SQLIntegrityConstraintViolationException: Column 'blog_type' cannot be null\n; Column 'blog_type' cannot be null; nested exception is java.sql.SQLIntegrityConstraintViolationException: Column 'blog_type' cannot be null\n\tat xyz.fusheng.blog.service.impl.BlogServiceImpl.save(BlogServiceImpl.java:42)\n\tat xyz.fusheng.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$4f70dde1.invoke(<generated>)\n\tat xyz.fusheng.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$3d6a345e.save(<generated>)\n\tat xyz.fusheng.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$4f70dde1.invoke(<generated>)\n\tat xyz.fusheng.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$38b532b2.save(<generated>)\n\tat xyz.fusheng.blog.controller.BlogController.save(BlogController.java:37)\n\tat xyz.fusheng.blog.controller.BlogController$$FastClassBySpringCGLIB$$a7ebadad.invoke(<generated>)\n\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)\n\tat xyz.fusheng.blog.controller.BlogController$$EnhancerBySpringCGLIB$$fdd5737c.save(<generated>)\nCaused by: java.sql.SQLIntegrityConstraintViolationException: Column 'blog_type' cannot be null\n","logMethod":"POST","logParams":"[Blog(blogId=, blogTitle=lesson-2.2 依赖倒置 (Dependency Inversion), blogImage=null, blogContent=<h3 id=\"lesson-22-依赖倒置-dependency-inversion\" data-source-line=\"1\">lesson-2.2 依赖倒置 (Dependency Inversion)</h3>\n<blockquote data-source-line=\"4\">\n<p>依赖倒置原则（Dependence Inversion Principle）是程序要依赖于抽象接口，不要依赖于具体实现。简单的说就是要求对抽象进行编程，不要对实现进行编程，这样就降低了客户与实现模块间的耦合。</p>\n</blockquote>\n<blockquote data-source-line=\"6\">\n<p>面向过程的开发，上层调用下层，上层依赖于下层，当下层剧烈变动时上层也要跟着变动，这就会导致模块的复用性降低而且大大提高了开发的成本。</p>\n</blockquote>\n<blockquote data-source-line=\"8\">\n<p>面向对象的开发很好的解决了这个问题，一般情况下抽象的变化概率很小，让用户程序依赖于抽象，实现的细节也依赖于抽象。即使实现细节不断变动，只要抽象不变，客户程序就不需要变化。这大大降低了客户程序与实现细节的耦合度。</p>\n</blockquote>\n<p data-source-line=\"10\"><strong>实际案例</strong></p>\n<p data-source-line=\"12\">假设我们设计一辆汽车：先设计轮子，然后根据轮子大小设计底盘，接着根据底盘设计 车身，最后根据车身设计好整个汽车。这里就出现了一个&ldquo;依赖&rdquo;关系：汽车依赖车身，车 身依赖底盘，底盘依赖轮子。 <img src=\"file:///D:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qq464A73A6FE5266563C05A2260725DAB1/671ec299486946d0a76d21846b5a8fdb/clipboard.png?ynotemdtimestamp=1584590739806\" alt=\"image\" data-src=\"F20D4437F1D940F4BF03FD1C053C8292\" data-ynote-src=\"F20D4437F1D940F4BF03FD1C053C8292\" data-processed=\"F20D4437F1D940F4BF03FD1C053C8292\" />这样的设计看起来没问题，但是可维护性却很低。假设设计完工之后，上司却突然说 根据市场需求的变动，要我们把车子的轮子设计都改大一码。这下我们就蛋疼了：因为我们 是根据轮子的尺寸设计的底盘，轮子的尺寸一改，底盘的设计就得修改。<br />同样因为我们是根据底盘设计的车身，那么车身也得改，同理汽车设计也得改&mdash;&mdash;整 个设计几乎都得改！我们现在换一种思路。我们先设计汽车的大概样子，然后根据汽车的样 子来设计车身，根据车身来设计底盘，最后根据底盘来设计轮子。这时候，依赖关系就倒置 过来了：轮子依赖底盘， 底盘依赖车身， 车身依赖汽车。 <img src=\"file:///D:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qq464A73A6FE5266563C05A2260725DAB1/5af142d8df154b27a0a8b376d2405abc/clipboard.png?ynotemdtimestamp=1584590739806\" alt=\"image\" data-src=\"BFB4327137244086ADE96E62A24DEAE0\" data-ynote-src=\"BFB4327137244086ADE96E62A24DEAE0\" data-processed=\"BFB4327137244086ADE96E62A24DEAE0\" />这时候，上司再说要改动轮子的设计，我们就只需要改动轮子的设计，而不需要动底盘， 车身，汽车的设计了。这就是依赖倒置原则&mdash;&mdash;把原本的高层建筑依赖底层建筑&ldquo;倒置&rdquo;过 来，变成底层建筑依赖高层建筑。高层建筑决定需要什么，底层去实现这样的需求，但是 高层并不用管底层是怎么实现的。这样就不会出现前面的&ldquo;牵一发动全身&rdquo;的情况。</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=null, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)]","logResult":"{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"<h2 id=\\\"lesson-20-反射机制-reflection\\\" data-source-line=\\\"1\\\">lesson-2.0 反射机制 (Reflection)</h2>\\n<h3 id=\\\"一-反射\\\" data-source-line=\\\"3\\\">一: 反射</h3>\\n<p data-source-line=\\\"5\\\"><strong>JAVA 反射机制是在运行状态中:</strong></p>\\n<ul data-source-line=\\\"6\\\">\\n<li>对于任意一个类,都能够知道这个类的所有属性和方法;</li>\\n<li>对于任意一个对象,都能够调用它的任意一个方法和属性;</li>\\n<li>这种动态的获取信息以及调用对象的方法的功能称为 java 语言的反射机制;</li>\\n</ul>\\n<p data-source-line=\\\"10\\\"><strong>反射提供的功能:</strong></p>\\n<ul data-source-line=\\\"11\\\">\\n<li>在运行时判断任意一个对象所需的类</li>\\n<li>在运行时构造任意一个类的对象</li>\\n<li>在运行时判断任意一个类所具有的的成员变量和方法</li>\\n<li>在运行时调用任意一个对象的方法</li>\\n</ul>\\n<p data-source-line=\\\"16\\\"><strong>反射具体加载过程</strong> <img src=\\\"file:///D:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qq464A73A6FE5266563C05A2260725DAB1/384b38e734b44a5a9c89f4851baeea96/clipboard.png?ynotemdtimestamp=1584590739806\\\" alt=\\\"image\\\" data-src=\\\"129D1CDB55284B79BD32008C5D11E63E\\\" data-ynote-src=\\\"129D1CDB55284B79BD32008C5D11E63E\\\" data-processed=\\\"129D1CDB55284B79BD32008C5D11E63E\\\" /></p>\\n<p data-source-line=\\\"19\\\"><strong><em>简单实例:</em></strong></p>\\n<ul data-source-line=\\\"20\\\">\\n<li>首先定义一个Animal,里面定义一些构造函数,方法,变量:</li>\\n</ul>\\n<pre data-source-line=\\\"21\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">package</span> xyz.fusheng.lesson1.reflection;\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">Animal</span> </span>{\\n    <span class=\\\"hljs-keyword\\\">public</span> String name=<span class=\\\"hljs-string\\\">\\\"Dog\\\"</span>;\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">int</span> age = <span class=\\\"hljs-number\\\">30</span>;\\n    <span class=\\\"hljs-comment\\\">// <span class=\\\"zh-hans\\\">默认无参构造函数</span></span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-title\\\">Animal</span><span class=\\\"hljs-params\\\">()</span> </span>{\\n    }\\n    <span class=\\\"hljs-comment\\\">// <span class=\\\"zh-hans\\\">带参数的构造函数</span></span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-title\\\">Animal</span><span class=\\\"hljs-params\\\">(String name, <span class=\\\"hljs-keyword\\\">int</span> age)</span></span>{\\n        System.out.println(name+<span class=\\\"hljs-string\\\">\\\",\\\"</span>+age);\\n    }\\n    <span class=\\\"hljs-comment\\\">// <span class=\\\"zh-hans\\\">公开</span> <span class=\\\"zh-hans\\\">方法</span> <span class=\\\"zh-hans\\\">返回类型和参数均有</span></span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> String <span class=\\\"hljs-title\\\">sayName</span><span class=\\\"hljs-params\\\">(String name)</span> </span>{\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-string\\\">\\\"Hello,\\\"</span> + name;\\n    }\\n}\\n</code></pre>\\n<ul data-source-line=\\\"39\\\">\\n<li>用反射的方法调用这个类:</li>\\n</ul>\\n<pre data-source-line=\\\"40\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">package</span> xyz.fusheng.lesson1.reflection;\\n<span class=\\\"hljs-keyword\\\">import</span> java.lang.reflect.Constructor;\\n<span class=\\\"hljs-keyword\\\">import</span> java.lang.reflect.InvocationTargetException;\\n<span class=\\\"hljs-keyword\\\">import</span> java.lang.reflect.Method;\\n\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">Main1</span> </span>{\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title\\\">main</span><span class=\\\"hljs-params\\\">(String[] args)</span> <span class=\\\"hljs-keyword\\\">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException</span>{\\n        <span class=\\\"hljs-comment\\\">//1. <span class=\\\"zh-hans\\\">加载类</span>,<span class=\\\"zh-hans\\\">指定类的完全限定名</span>: <span class=\\\"zh-hans\\\">包名</span>+<span class=\\\"zh-hans\\\">类名</span></span>\\n        Class c1 = Class.forName(<span class=\\\"hljs-string\\\">\\\"xyz.fusheng.lesson1.reflection.Animal\\\"</span>);\\n        System.out.println(c1); <span class=\\\"hljs-comment\\\">//<span class=\\\"zh-hans\\\">打印</span> c1,<span class=\\\"zh-hans\\\">发现值和字节码中的类的名称一样</span></span>\\n        <span class=\\\"hljs-comment\\\">//2. <span class=\\\"zh-hans\\\">获取</span>(<span class=\\\"zh-hans\\\">反射</span>)<span class=\\\"zh-hans\\\">类</span>c1<span class=\\\"zh-hans\\\">的公开构造函数</span>,<span class=\\\"zh-hans\\\">且参数为</span>null</span>\\n        Constructor ctor1 = c1.getConstructor();\\n        <span class=\\\"hljs-comment\\\">//3. <span class=\\\"zh-hans\\\">构造函数的用途</span>,<span class=\\\"zh-hans\\\">就是创建类的对象</span>(<span class=\\\"zh-hans\\\">实例</span>)</span>\\n        <span class=\\\"hljs-comment\\\">//<span class=\\\"zh-hans\\\">除了私有的构造函数外</span>(<span class=\\\"zh-hans\\\">单例模式</span>,<span class=\\\"zh-hans\\\">禁止通过构造函数创建类的实例</span>,<span class=\\\"zh-hans\\\">保证每个类只有一个实例</span>)</span>\\n        <span class=\\\"hljs-comment\\\">//ctor1.newInstance()<span class=\\\"zh-hans\\\">默认生成一个</span>Object<span class=\\\"zh-hans\\\">对象</span>,<span class=\\\"zh-hans\\\">我门需要转化成我们需要的</span>Animal<span class=\\\"zh-hans\\\">对象</span></span>\\n        Animal a1 = (Animal)ctor1.newInstance();\\n        <span class=\\\"hljs-comment\\\">//4. <span class=\\\"zh-hans\\\">通过反射调用</span>Animal<span class=\\\"zh-hans\\\">的方法</span></span>\\n        Method method = c1.getMethod(<span class=\\\"hljs-string\\\">\\\"sayName\\\"</span>, String.class);\\n        String name = (String) method.invoke(a1,<span class=\\\"hljs-string\\\">\\\"<span class=\\\"zh-hans\\\">兔兔</span>\\\"</span>);\\n        System.out.println(name);\\n        <span class=\\\"hljs-comment\\\">//5. <span class=\\\"zh-hans\\\">直接访问类中的方法</span></span>\\n        System.out.println(a1.sayName(<span class=\\\"hljs-string\\\">\\\"<span class=\\\"zh-hans\\\">猫猫</span>\\\"</span>));\\n        <span class=\\\"hljs-comment\\\">//6. <span class=\\\"zh-hans\\\">访问类中的变量</span></span>\\n        System.out.println(a1.name);\\n    }\\n}\\n</code></pre>\\n<ul data-source-line=\\\"68\\\">\\n<li>--&gt;</li>\\n</ul>\\n<pre data-source-line=\\\"69\\\"><code class=\\\"hljs\\\">class xyz<span class=\\\"hljs-selector-class\\\">.fusheng</span><span class=\\\"hljs-selector-class\\\">.lesson1</span><span class=\\\"hljs-selector-class\\\">.reflection</span><span class=\\\"hljs-selector-class\\\">.Animal</span>\\nHello,<span class=\\\"zh-hans\\\">兔兔</span>\\nHello,<span class=\\\"zh-hans\\\">猫猫</span>\\nDog\\n</code></pre>\\n<ul data-source-line=\\\"75\\\">\\n<li>反射大概步骤:</li>\\n<li>1.通过 Class.forName(\\\"全类名\\\")拿到反射入口</li>\\n<li>2.根据反射入口对象(Class)获取类的各种信息</li>\\n<li>3.通过反射获取对象的实例,并操作对象</li>\\n<li>4.在程序执行过程中,动态的决定调用的类,以及方法</li>\\n</ul>\",\"blogGoods\":0,\"blogId\":\"1240489759664103424\",\"blogRead\":0,\"blogTitle\":\"lesson-2.0 反射机制 (Reflection)\",\"blogType\":14,\"createdTime\":\"2020-03-19 12:06:19\",\"version\":2},\"msg\":\"操作成功！\"}","logStatus":0,"logTime":0,"logUrl":"/blog/save"}],"pageSize":10,"params":{"logStatus":0,"logMethod":"POST"},"sortColumn":"","sortMethod":"asc","totalCount":5,"totalPage":1},"msg":"操作成功！"}
2020-03-19 13:09:33.250 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /log/getByPage
2020-03-19 13:09:33.251 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 13:09:33.251 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 13:09:33.252 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.LogController.getByPage
2020-03-19 13:09:33.253 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=5, index=0, list=[Log(logId=28, logUrl=/type/save, logParams=[Type(typeId=null, typeName=Spring Boot, typeBlogCount=null, enable=null, deleted=null)], logStatus=0, logMessage=xyz.fusheng.blog.exception.BlogException: 该分类类型已经存在!
	at xyz.fusheng.blog.service.impl.TypeServiceImpl.save(TypeServiceImpl.java:34)
	at xyz.fusheng.blog.controller.TypeController.save(TypeController.java:31)
	at xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)
	at xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)
	at xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$866d35f4.save(<generated>)
, logMethod=POST, logTime=0, logResult=null, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:01:06), Log(logId=84, logUrl=/link/save, logParams=[Link(linkId=null, linkName=baidu, linkUrl=www.baidu.com, createdTime=null, updateTime=null, version=null, deleted=null)], logStatus=0, logMessage=org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'linlName' in 'class xyz.fusheng.blog.pojo.Link'
	at xyz.fusheng.blog.service.impl.LinkServiceImpl.save(LinkServiceImpl.java:25)
	at xyz.fusheng.blog.controller.LinkController.save(LinkController.java:33)
	at xyz.fusheng.blog.controller.LinkController$$FastClassBySpringCGLIB$$faeda005.invoke(<generated>)
	at xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)
	at xyz.fusheng.blog.controller.LinkController$$EnhancerBySpringCGLIB$$1fc4c65.save(<generated>)
Caused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'linlName' in 'class xyz.fusheng.blog.pojo.Link'
, logMethod=POST, logTime=0, logResult=null, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-13 15:09:22), Log(logId=87, logUrl=/link/save, logParams=[Link(linkId=null, linkName=baidu, linkUrl=www.baidu.com, createdTime=null, updateTime=null, version=null, deleted=null)], logStatus=0, logMessage=org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'linlName' in 'class xyz.fusheng.blog.pojo.Link'
	at xyz.fusheng.blog.service.impl.LinkServiceImpl.save(LinkServiceImpl.java:25)
	at xyz.fusheng.blog.controller.LinkController.save(LinkController.java:33)
	at xyz.fusheng.blog.controller.LinkController$$FastClassBySpringCGLIB$$faeda005.invoke(<generated>)
	at xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)
	at xyz.fusheng.blog.controller.LinkController$$EnhancerBySpringCGLIB$$e7b2bf1d.save(<generated>)
Caused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'linlName' in 'class xyz.fusheng.blog.pojo.Link'
, logMethod=POST, logTime=0, logResult=null, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-13 15:14:41), Log(logId=119, logUrl=/blog/save, logParams=[Blog(blogId=null, blogTitle=测试博客1, blogImage=null, blogContent=测试内容, blogGoods=null, blogRead=null, blogCollection=null, blogType=6, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)], logStatus=0, logMessage=org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: java.sql.SQLIntegrityConstraintViolationException: Column 'blog_id' cannot be null
### The error may involve xyz.fusheng.blog.mapper.BlogMapper.save-Inline
### Cause: java.sql.SQLIntegrityConstraintViolationException: Column 'blog_id' cannot be null
; Column 'blog_id' cannot be null; nested exception is java.sql.SQLIntegrityConstraintViolationException: Column 'blog_id' cannot be null
	at xyz.fusheng.blog.service.impl.BlogServiceImpl.save(BlogServiceImpl.java:38)
	at xyz.fusheng.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$4f70dde1.invoke(<generated>)
	at xyz.fusheng.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$8b6ceecc.save(<generated>)
	at xyz.fusheng.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$4f70dde1.invoke(<generated>)
	at xyz.fusheng.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$86b7ed20.save(<generated>)
	at xyz.fusheng.blog.controller.BlogController.save(BlogController.java:38)
	at xyz.fusheng.blog.controller.BlogController$$FastClassBySpringCGLIB$$a7ebadad.invoke(<generated>)
	at xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)
	at xyz.fusheng.blog.controller.BlogController$$EnhancerBySpringCGLIB$$c72b172.save(<generated>)
Caused by: java.sql.SQLIntegrityConstraintViolationException: Column 'blog_id' cannot be null
, logMethod=POST, logTime=0, logResult=null, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-13 22:56:50), Log(logId=315, logUrl=/blog/save, logParams=[Blog(blogId=, blogTitle=lesson-2.2 依赖倒置 (Dependency Inversion), blogImage=null, blogContent=<h3 id="lesson-22-依赖倒置-dependency-inversion" data-source-line="1">lesson-2.2 依赖倒置 (Dependency Inversion)</h3>
<blockquote data-source-line="4">
<p>依赖倒置原则（Dependence Inversion Principle）是程序要依赖于抽象接口，不要依赖于具体实现。简单的说就是要求对抽象进行编程，不要对实现进行编程，这样就降低了客户与实现模块间的耦合。</p>
</blockquote>
<blockquote data-source-line="6">
<p>面向过程的开发，上层调用下层，上层依赖于下层，当下层剧烈变动时上层也要跟着变动，这就会导致模块的复用性降低而且大大提高了开发的成本。</p>
</blockquote>
<blockquote data-source-line="8">
<p>面向对象的开发很好的解决了这个问题，一般情况下抽象的变化概率很小，让用户程序依赖于抽象，实现的细节也依赖于抽象。即使实现细节不断变动，只要抽象不变，客户程序就不需要变化。这大大降低了客户程序与实现细节的耦合度。</p>
</blockquote>
<p data-source-line="10"><strong>实际案例</strong></p>
<p data-source-line="12">假设我们设计一辆汽车：先设计轮子，然后根据轮子大小设计底盘，接着根据底盘设计 车身，最后根据车身设计好整个汽车。这里就出现了一个&ldquo;依赖&rdquo;关系：汽车依赖车身，车 身依赖底盘，底盘依赖轮子。 <img src="file:///D:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qq464A73A6FE5266563C05A2260725DAB1/671ec299486946d0a76d21846b5a8fdb/clipboard.png?ynotemdtimestamp=1584590739806" alt="image" data-src="F20D4437F1D940F4BF03FD1C053C8292" data-ynote-src="F20D4437F1D940F4BF03FD1C053C8292" data-processed="F20D4437F1D940F4BF03FD1C053C8292" />这样的设计看起来没问题，但是可维护性却很低。假设设计完工之后，上司却突然说 根据市场需求的变动，要我们把车子的轮子设计都改大一码。这下我们就蛋疼了：因为我们 是根据轮子的尺寸设计的底盘，轮子的尺寸一改，底盘的设计就得修改。<br />同样因为我们是根据底盘设计的车身，那么车身也得改，同理汽车设计也得改&mdash;&mdash;整 个设计几乎都得改！我们现在换一种思路。我们先设计汽车的大概样子，然后根据汽车的样 子来设计车身，根据车身来设计底盘，最后根据底盘来设计轮子。这时候，依赖关系就倒置 过来了：轮子依赖底盘， 底盘依赖车身， 车身依赖汽车。 <img src="file:///D:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qq464A73A6FE5266563C05A2260725DAB1/5af142d8df154b27a0a8b376d2405abc/clipboard.png?ynotemdtimestamp=1584590739806" alt="image" data-src="BFB4327137244086ADE96E62A24DEAE0" data-ynote-src="BFB4327137244086ADE96E62A24DEAE0" data-processed="BFB4327137244086ADE96E62A24DEAE0" />这时候，上司再说要改动轮子的设计，我们就只需要改动轮子的设计，而不需要动底盘， 车身，汽车的设计了。这就是依赖倒置原则&mdash;&mdash;把原本的高层建筑依赖底层建筑&ldquo;倒置&rdquo;过 来，变成底层建筑依赖高层建筑。高层建筑决定需要什么，底层去实现这样的需求，但是 高层并不用管底层是怎么实现的。这样就不会出现前面的&ldquo;牵一发动全身&rdquo;的情况。</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=null, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)], logStatus=0, logMessage=org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: java.sql.SQLIntegrityConstraintViolationException: Column 'blog_type' cannot be null
### The error may involve xyz.fusheng.blog.mapper.BlogMapper.save-Inline
### Cause: java.sql.SQLIntegrityConstraintViolationException: Column 'blog_type' cannot be null
; Column 'blog_type' cannot be null; nested exception is java.sql.SQLIntegrityConstraintViolationException: Column 'blog_type' cannot be null
	at xyz.fusheng.blog.service.impl.BlogServiceImpl.save(BlogServiceImpl.java:42)
	at xyz.fusheng.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$4f70dde1.invoke(<generated>)
	at xyz.fusheng.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$3d6a345e.save(<generated>)
	at xyz.fusheng.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$4f70dde1.invoke(<generated>)
	at xyz.fusheng.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$38b532b2.save(<generated>)
	at xyz.fusheng.blog.controller.BlogController.save(BlogController.java:37)
	at xyz.fusheng.blog.controller.BlogController$$FastClassBySpringCGLIB$$a7ebadad.invoke(<generated>)
	at xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at xyz.fusheng.blog.controller.BlogController$$EnhancerBySpringCGLIB$$fdd5737c.save(<generated>)
Caused by: java.sql.SQLIntegrityConstraintViolationException: Column 'blog_type' cannot be null
, logMethod=POST, logTime=0, logResult={"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"<h2 id=\"lesson-20-反射机制-reflection\" data-source-line=\"1\">lesson-2.0 反射机制 (Reflection)</h2>\n<h3 id=\"一-反射\" data-source-line=\"3\">一: 反射</h3>\n<p data-source-line=\"5\"><strong>JAVA 反射机制是在运行状态中:</strong></p>\n<ul data-source-line=\"6\">\n<li>对于任意一个类,都能够知道这个类的所有属性和方法;</li>\n<li>对于任意一个对象,都能够调用它的任意一个方法和属性;</li>\n<li>这种动态的获取信息以及调用对象的方法的功能称为 java 语言的反射机制;</li>\n</ul>\n<p data-source-line=\"10\"><strong>反射提供的功能:</strong></p>\n<ul data-source-line=\"11\">\n<li>在运行时判断任意一个对象所需的类</li>\n<li>在运行时构造任意一个类的对象</li>\n<li>在运行时判断任意一个类所具有的的成员变量和方法</li>\n<li>在运行时调用任意一个对象的方法</li>\n</ul>\n<p data-source-line=\"16\"><strong>反射具体加载过程</strong> <img src=\"file:///D:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qq464A73A6FE5266563C05A2260725DAB1/384b38e734b44a5a9c89f4851baeea96/clipboard.png?ynotemdtimestamp=1584590739806\" alt=\"image\" data-src=\"129D1CDB55284B79BD32008C5D11E63E\" data-ynote-src=\"129D1CDB55284B79BD32008C5D11E63E\" data-processed=\"129D1CDB55284B79BD32008C5D11E63E\" /></p>\n<p data-source-line=\"19\"><strong><em>简单实例:</em></strong></p>\n<ul data-source-line=\"20\">\n<li>首先定义一个Animal,里面定义一些构造函数,方法,变量:</li>\n</ul>\n<pre data-source-line=\"21\"><code class=\"hljs\"><span class=\"hljs-keyword\">package</span> xyz.fusheng.lesson1.reflection;\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Animal</span> </span>{\n    <span class=\"hljs-keyword\">public</span> String name=<span class=\"hljs-string\">\"Dog\"</span>;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> age = <span class=\"hljs-number\">30</span>;\n    <span class=\"hljs-comment\">// <span class=\"zh-hans\">默认无参构造函数</span></span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Animal</span><span class=\"hljs-params\">()</span> </span>{\n    }\n    <span class=\"hljs-comment\">// <span class=\"zh-hans\">带参数的构造函数</span></span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Animal</span><span class=\"hljs-params\">(String name, <span class=\"hljs-keyword\">int</span> age)</span></span>{\n        System.out.println(name+<span class=\"hljs-string\">\",\"</span>+age);\n    }\n    <span class=\"hljs-comment\">// <span class=\"zh-hans\">公开</span> <span class=\"zh-hans\">方法</span> <span class=\"zh-hans\">返回类型和参数均有</span></span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">sayName</span><span class=\"hljs-params\">(String name)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Hello,\"</span> + name;\n    }\n}\n</code></pre>\n<ul data-source-line=\"39\">\n<li>用反射的方法调用这个类:</li>\n</ul>\n<pre data-source-line=\"40\"><code class=\"hljs\"><span class=\"hljs-keyword\">package</span> xyz.fusheng.lesson1.reflection;\n<span class=\"hljs-keyword\">import</span> java.lang.reflect.Constructor;\n<span class=\"hljs-keyword\">import</span> java.lang.reflect.InvocationTargetException;\n<span class=\"hljs-keyword\">import</span> java.lang.reflect.Method;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Main1</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException</span>{\n        <span class=\"hljs-comment\">//1. <span class=\"zh-hans\">加载类</span>,<span class=\"zh-hans\">指定类的完全限定名</span>: <span class=\"zh-hans\">包名</span>+<span class=\"zh-hans\">类名</span></span>\n        Class c1 = Class.forName(<span class=\"hljs-string\">\"xyz.fusheng.lesson1.reflection.Animal\"</span>);\n        System.out.println(c1); <span class=\"hljs-comment\">//<span class=\"zh-hans\">打印</span> c1,<span class=\"zh-hans\">发现值和字节码中的类的名称一样</span></span>\n        <span class=\"hljs-comment\">//2. <span class=\"zh-hans\">获取</span>(<span class=\"zh-hans\">反射</span>)<span class=\"zh-hans\">类</span>c1<span class=\"zh-hans\">的公开构造函数</span>,<span class=\"zh-hans\">且参数为</span>null</span>\n        Constructor ctor1 = c1.getConstructor();\n        <span class=\"hljs-comment\">//3. <span class=\"zh-hans\">构造函数的用途</span>,<span class=\"zh-hans\">就是创建类的对象</span>(<span class=\"zh-hans\">实例</span>)</span>\n        <span class=\"hljs-comment\">//<span class=\"zh-hans\">除了私有的构造函数外</span>(<span class=\"zh-hans\">单例模式</span>,<span class=\"zh-hans\">禁止通过构造函数创建类的实例</span>,<span class=\"zh-hans\">保证每个类只有一个实例</span>)</span>\n        <span class=\"hljs-comment\">//ctor1.newInstance()<span class=\"zh-hans\">默认生成一个</span>Object<span class=\"zh-hans\">对象</span>,<span class=\"zh-hans\">我门需要转化成我们需要的</span>Animal<span class=\"zh-hans\">对象</span></span>\n        Animal a1 = (Animal)ctor1.newInstance();\n        <span class=\"hljs-comment\">//4. <span class=\"zh-hans\">通过反射调用</span>Animal<span class=\"zh-hans\">的方法</span></span>\n        Method method = c1.getMethod(<span class=\"hljs-string\">\"sayName\"</span>, String.class);\n        String name = (String) method.invoke(a1,<span class=\"hljs-string\">\"<span class=\"zh-hans\">兔兔</span>\"</span>);\n        System.out.println(name);\n        <span class=\"hljs-comment\">//5. <span class=\"zh-hans\">直接访问类中的方法</span></span>\n        System.out.println(a1.sayName(<span class=\"hljs-string\">\"<span class=\"zh-hans\">猫猫</span>\"</span>));\n        <span class=\"hljs-comment\">//6. <span class=\"zh-hans\">访问类中的变量</span></span>\n        System.out.println(a1.name);\n    }\n}\n</code></pre>\n<ul data-source-line=\"68\">\n<li>--&gt;</li>\n</ul>\n<pre data-source-line=\"69\"><code class=\"hljs\">class xyz<span class=\"hljs-selector-class\">.fusheng</span><span class=\"hljs-selector-class\">.lesson1</span><span class=\"hljs-selector-class\">.reflection</span><span class=\"hljs-selector-class\">.Animal</span>\nHello,<span class=\"zh-hans\">兔兔</span>\nHello,<span class=\"zh-hans\">猫猫</span>\nDog\n</code></pre>\n<ul data-source-line=\"75\">\n<li>反射大概步骤:</li>\n<li>1.通过 Class.forName(\"全类名\")拿到反射入口</li>\n<li>2.根据反射入口对象(Class)获取类的各种信息</li>\n<li>3.通过反射获取对象的实例,并操作对象</li>\n<li>4.在程序执行过程中,动态的决定调用的类,以及方法</li>\n</ul>","blogGoods":0,"blogId":"1240489759664103424","blogRead":0,"blogTitle":"lesson-2.0 反射机制 (Reflection)","blogType":14,"createdTime":"2020-03-19 12:06:19","version":2},"msg":"操作成功！"}, logIp=127.0.0.1, createdTime=2020-03-19 12:12:13)], params={logStatus=0, logMethod=GET}, sortColumn=, sortMethod=asc)]
2020-03-19 13:09:33.408 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 158
2020-03-19 13:09:33.408 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"index":0,"list":[],"pageSize":10,"params":{"logStatus":0,"logMethod":"GET"},"sortColumn":"","sortMethod":"asc","totalCount":0,"totalPage":0},"msg":"操作成功！"}
2020-03-19 13:09:37.218 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /log/getByPage
2020-03-19 13:09:37.219 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 13:09:37.219 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 13:09:37.219 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.LogController.getByPage
2020-03-19 13:09:37.219 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, index=0, list=[], params={logStatus=0, logMethod=POST}, sortColumn=, sortMethod=asc)]
2020-03-19 13:09:37.392 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 174
2020-03-19 13:09:37.393 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"index":0,"list":[{"createdTime":"2020-03-12 23:01:06","logId":28,"logIp":"0:0:0:0:0:0:0:1","logMessage":"xyz.fusheng.blog.exception.BlogException: 该分类类型已经存在!\n\tat xyz.fusheng.blog.service.impl.TypeServiceImpl.save(TypeServiceImpl.java:34)\n\tat xyz.fusheng.blog.controller.TypeController.save(TypeController.java:31)\n\tat xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)\n\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\n\tat xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$866d35f4.save(<generated>)\n","logMethod":"POST","logParams":"[Type(typeId=null, typeName=Spring Boot, typeBlogCount=null, enable=null, deleted=null)]","logStatus":0,"logTime":0,"logUrl":"/type/save"},{"createdTime":"2020-03-13 15:09:22","logId":84,"logIp":"0:0:0:0:0:0:0:1","logMessage":"org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'linlName' in 'class xyz.fusheng.blog.pojo.Link'\n\tat xyz.fusheng.blog.service.impl.LinkServiceImpl.save(LinkServiceImpl.java:25)\n\tat xyz.fusheng.blog.controller.LinkController.save(LinkController.java:33)\n\tat xyz.fusheng.blog.controller.LinkController$$FastClassBySpringCGLIB$$faeda005.invoke(<generated>)\n\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\n\tat xyz.fusheng.blog.controller.LinkController$$EnhancerBySpringCGLIB$$1fc4c65.save(<generated>)\nCaused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'linlName' in 'class xyz.fusheng.blog.pojo.Link'\n","logMethod":"POST","logParams":"[Link(linkId=null, linkName=baidu, linkUrl=www.baidu.com, createdTime=null, updateTime=null, version=null, deleted=null)]","logStatus":0,"logTime":0,"logUrl":"/link/save"},{"createdTime":"2020-03-13 15:14:41","logId":87,"logIp":"0:0:0:0:0:0:0:1","logMessage":"org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'linlName' in 'class xyz.fusheng.blog.pojo.Link'\n\tat xyz.fusheng.blog.service.impl.LinkServiceImpl.save(LinkServiceImpl.java:25)\n\tat xyz.fusheng.blog.controller.LinkController.save(LinkController.java:33)\n\tat xyz.fusheng.blog.controller.LinkController$$FastClassBySpringCGLIB$$faeda005.invoke(<generated>)\n\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\n\tat xyz.fusheng.blog.controller.LinkController$$EnhancerBySpringCGLIB$$e7b2bf1d.save(<generated>)\nCaused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'linlName' in 'class xyz.fusheng.blog.pojo.Link'\n","logMethod":"POST","logParams":"[Link(linkId=null, linkName=baidu, linkUrl=www.baidu.com, createdTime=null, updateTime=null, version=null, deleted=null)]","logStatus":0,"logTime":0,"logUrl":"/link/save"},{"createdTime":"2020-03-13 22:56:50","logId":119,"logIp":"0:0:0:0:0:0:0:1","logMessage":"org.springframework.dao.DataIntegrityViolationException: \n### Error updating database.  Cause: java.sql.SQLIntegrityConstraintViolationException: Column 'blog_id' cannot be null\n### The error may involve xyz.fusheng.blog.mapper.BlogMapper.save-Inline\n### Cause: java.sql.SQLIntegrityConstraintViolationException: Column 'blog_id' cannot be null\n; Column 'blog_id' cannot be null; nested exception is java.sql.SQLIntegrityConstraintViolationException: Column 'blog_id' cannot be null\n\tat xyz.fusheng.blog.service.impl.BlogServiceImpl.save(BlogServiceImpl.java:38)\n\tat xyz.fusheng.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$4f70dde1.invoke(<generated>)\n\tat xyz.fusheng.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$8b6ceecc.save(<generated>)\n\tat xyz.fusheng.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$4f70dde1.invoke(<generated>)\n\tat xyz.fusheng.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$86b7ed20.save(<generated>)\n\tat xyz.fusheng.blog.controller.BlogController.save(BlogController.java:38)\n\tat xyz.fusheng.blog.controller.BlogController$$FastClassBySpringCGLIB$$a7ebadad.invoke(<generated>)\n\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\n\tat xyz.fusheng.blog.controller.BlogController$$EnhancerBySpringCGLIB$$c72b172.save(<generated>)\nCaused by: java.sql.SQLIntegrityConstraintViolationException: Column 'blog_id' cannot be null\n","logMethod":"POST","logParams":"[Blog(blogId=null, blogTitle=测试博客1, blogImage=null, blogContent=测试内容, blogGoods=null, blogRead=null, blogCollection=null, blogType=6, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)]","logStatus":0,"logTime":0,"logUrl":"/blog/save"},{"createdTime":"2020-03-19 12:12:13","logId":315,"logIp":"127.0.0.1","logMessage":"org.springframework.dao.DataIntegrityViolationException: \n### Error updating database.  Cause: java.sql.SQLIntegrityConstraintViolationException: Column 'blog_type' cannot be null\n### The error may involve xyz.fusheng.blog.mapper.BlogMapper.save-Inline\n### Cause: java.sql.SQLIntegrityConstraintViolationException: Column 'blog_type' cannot be null\n; Column 'blog_type' cannot be null; nested exception is java.sql.SQLIntegrityConstraintViolationException: Column 'blog_type' cannot be null\n\tat xyz.fusheng.blog.service.impl.BlogServiceImpl.save(BlogServiceImpl.java:42)\n\tat xyz.fusheng.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$4f70dde1.invoke(<generated>)\n\tat xyz.fusheng.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$3d6a345e.save(<generated>)\n\tat xyz.fusheng.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$4f70dde1.invoke(<generated>)\n\tat xyz.fusheng.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$38b532b2.save(<generated>)\n\tat xyz.fusheng.blog.controller.BlogController.save(BlogController.java:37)\n\tat xyz.fusheng.blog.controller.BlogController$$FastClassBySpringCGLIB$$a7ebadad.invoke(<generated>)\n\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)\n\tat xyz.fusheng.blog.controller.BlogController$$EnhancerBySpringCGLIB$$fdd5737c.save(<generated>)\nCaused by: java.sql.SQLIntegrityConstraintViolationException: Column 'blog_type' cannot be null\n","logMethod":"POST","logParams":"[Blog(blogId=, blogTitle=lesson-2.2 依赖倒置 (Dependency Inversion), blogImage=null, blogContent=<h3 id=\"lesson-22-依赖倒置-dependency-inversion\" data-source-line=\"1\">lesson-2.2 依赖倒置 (Dependency Inversion)</h3>\n<blockquote data-source-line=\"4\">\n<p>依赖倒置原则（Dependence Inversion Principle）是程序要依赖于抽象接口，不要依赖于具体实现。简单的说就是要求对抽象进行编程，不要对实现进行编程，这样就降低了客户与实现模块间的耦合。</p>\n</blockquote>\n<blockquote data-source-line=\"6\">\n<p>面向过程的开发，上层调用下层，上层依赖于下层，当下层剧烈变动时上层也要跟着变动，这就会导致模块的复用性降低而且大大提高了开发的成本。</p>\n</blockquote>\n<blockquote data-source-line=\"8\">\n<p>面向对象的开发很好的解决了这个问题，一般情况下抽象的变化概率很小，让用户程序依赖于抽象，实现的细节也依赖于抽象。即使实现细节不断变动，只要抽象不变，客户程序就不需要变化。这大大降低了客户程序与实现细节的耦合度。</p>\n</blockquote>\n<p data-source-line=\"10\"><strong>实际案例</strong></p>\n<p data-source-line=\"12\">假设我们设计一辆汽车：先设计轮子，然后根据轮子大小设计底盘，接着根据底盘设计 车身，最后根据车身设计好整个汽车。这里就出现了一个&ldquo;依赖&rdquo;关系：汽车依赖车身，车 身依赖底盘，底盘依赖轮子。 <img src=\"file:///D:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qq464A73A6FE5266563C05A2260725DAB1/671ec299486946d0a76d21846b5a8fdb/clipboard.png?ynotemdtimestamp=1584590739806\" alt=\"image\" data-src=\"F20D4437F1D940F4BF03FD1C053C8292\" data-ynote-src=\"F20D4437F1D940F4BF03FD1C053C8292\" data-processed=\"F20D4437F1D940F4BF03FD1C053C8292\" />这样的设计看起来没问题，但是可维护性却很低。假设设计完工之后，上司却突然说 根据市场需求的变动，要我们把车子的轮子设计都改大一码。这下我们就蛋疼了：因为我们 是根据轮子的尺寸设计的底盘，轮子的尺寸一改，底盘的设计就得修改。<br />同样因为我们是根据底盘设计的车身，那么车身也得改，同理汽车设计也得改&mdash;&mdash;整 个设计几乎都得改！我们现在换一种思路。我们先设计汽车的大概样子，然后根据汽车的样 子来设计车身，根据车身来设计底盘，最后根据底盘来设计轮子。这时候，依赖关系就倒置 过来了：轮子依赖底盘， 底盘依赖车身， 车身依赖汽车。 <img src=\"file:///D:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qq464A73A6FE5266563C05A2260725DAB1/5af142d8df154b27a0a8b376d2405abc/clipboard.png?ynotemdtimestamp=1584590739806\" alt=\"image\" data-src=\"BFB4327137244086ADE96E62A24DEAE0\" data-ynote-src=\"BFB4327137244086ADE96E62A24DEAE0\" data-processed=\"BFB4327137244086ADE96E62A24DEAE0\" />这时候，上司再说要改动轮子的设计，我们就只需要改动轮子的设计，而不需要动底盘， 车身，汽车的设计了。这就是依赖倒置原则&mdash;&mdash;把原本的高层建筑依赖底层建筑&ldquo;倒置&rdquo;过 来，变成底层建筑依赖高层建筑。高层建筑决定需要什么，底层去实现这样的需求，但是 高层并不用管底层是怎么实现的。这样就不会出现前面的&ldquo;牵一发动全身&rdquo;的情况。</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=null, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)]","logResult":"{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"<h2 id=\\\"lesson-20-反射机制-reflection\\\" data-source-line=\\\"1\\\">lesson-2.0 反射机制 (Reflection)</h2>\\n<h3 id=\\\"一-反射\\\" data-source-line=\\\"3\\\">一: 反射</h3>\\n<p data-source-line=\\\"5\\\"><strong>JAVA 反射机制是在运行状态中:</strong></p>\\n<ul data-source-line=\\\"6\\\">\\n<li>对于任意一个类,都能够知道这个类的所有属性和方法;</li>\\n<li>对于任意一个对象,都能够调用它的任意一个方法和属性;</li>\\n<li>这种动态的获取信息以及调用对象的方法的功能称为 java 语言的反射机制;</li>\\n</ul>\\n<p data-source-line=\\\"10\\\"><strong>反射提供的功能:</strong></p>\\n<ul data-source-line=\\\"11\\\">\\n<li>在运行时判断任意一个对象所需的类</li>\\n<li>在运行时构造任意一个类的对象</li>\\n<li>在运行时判断任意一个类所具有的的成员变量和方法</li>\\n<li>在运行时调用任意一个对象的方法</li>\\n</ul>\\n<p data-source-line=\\\"16\\\"><strong>反射具体加载过程</strong> <img src=\\\"file:///D:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qq464A73A6FE5266563C05A2260725DAB1/384b38e734b44a5a9c89f4851baeea96/clipboard.png?ynotemdtimestamp=1584590739806\\\" alt=\\\"image\\\" data-src=\\\"129D1CDB55284B79BD32008C5D11E63E\\\" data-ynote-src=\\\"129D1CDB55284B79BD32008C5D11E63E\\\" data-processed=\\\"129D1CDB55284B79BD32008C5D11E63E\\\" /></p>\\n<p data-source-line=\\\"19\\\"><strong><em>简单实例:</em></strong></p>\\n<ul data-source-line=\\\"20\\\">\\n<li>首先定义一个Animal,里面定义一些构造函数,方法,变量:</li>\\n</ul>\\n<pre data-source-line=\\\"21\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">package</span> xyz.fusheng.lesson1.reflection;\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">Animal</span> </span>{\\n    <span class=\\\"hljs-keyword\\\">public</span> String name=<span class=\\\"hljs-string\\\">\\\"Dog\\\"</span>;\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">int</span> age = <span class=\\\"hljs-number\\\">30</span>;\\n    <span class=\\\"hljs-comment\\\">// <span class=\\\"zh-hans\\\">默认无参构造函数</span></span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-title\\\">Animal</span><span class=\\\"hljs-params\\\">()</span> </span>{\\n    }\\n    <span class=\\\"hljs-comment\\\">// <span class=\\\"zh-hans\\\">带参数的构造函数</span></span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-title\\\">Animal</span><span class=\\\"hljs-params\\\">(String name, <span class=\\\"hljs-keyword\\\">int</span> age)</span></span>{\\n        System.out.println(name+<span class=\\\"hljs-string\\\">\\\",\\\"</span>+age);\\n    }\\n    <span class=\\\"hljs-comment\\\">// <span class=\\\"zh-hans\\\">公开</span> <span class=\\\"zh-hans\\\">方法</span> <span class=\\\"zh-hans\\\">返回类型和参数均有</span></span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> String <span class=\\\"hljs-title\\\">sayName</span><span class=\\\"hljs-params\\\">(String name)</span> </span>{\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-string\\\">\\\"Hello,\\\"</span> + name;\\n    }\\n}\\n</code></pre>\\n<ul data-source-line=\\\"39\\\">\\n<li>用反射的方法调用这个类:</li>\\n</ul>\\n<pre data-source-line=\\\"40\\\"><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">package</span> xyz.fusheng.lesson1.reflection;\\n<span class=\\\"hljs-keyword\\\">import</span> java.lang.reflect.Constructor;\\n<span class=\\\"hljs-keyword\\\">import</span> java.lang.reflect.InvocationTargetException;\\n<span class=\\\"hljs-keyword\\\">import</span> java.lang.reflect.Method;\\n\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">Main1</span> </span>{\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title\\\">main</span><span class=\\\"hljs-params\\\">(String[] args)</span> <span class=\\\"hljs-keyword\\\">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException</span>{\\n        <span class=\\\"hljs-comment\\\">//1. <span class=\\\"zh-hans\\\">加载类</span>,<span class=\\\"zh-hans\\\">指定类的完全限定名</span>: <span class=\\\"zh-hans\\\">包名</span>+<span class=\\\"zh-hans\\\">类名</span></span>\\n        Class c1 = Class.forName(<span class=\\\"hljs-string\\\">\\\"xyz.fusheng.lesson1.reflection.Animal\\\"</span>);\\n        System.out.println(c1); <span class=\\\"hljs-comment\\\">//<span class=\\\"zh-hans\\\">打印</span> c1,<span class=\\\"zh-hans\\\">发现值和字节码中的类的名称一样</span></span>\\n        <span class=\\\"hljs-comment\\\">//2. <span class=\\\"zh-hans\\\">获取</span>(<span class=\\\"zh-hans\\\">反射</span>)<span class=\\\"zh-hans\\\">类</span>c1<span class=\\\"zh-hans\\\">的公开构造函数</span>,<span class=\\\"zh-hans\\\">且参数为</span>null</span>\\n        Constructor ctor1 = c1.getConstructor();\\n        <span class=\\\"hljs-comment\\\">//3. <span class=\\\"zh-hans\\\">构造函数的用途</span>,<span class=\\\"zh-hans\\\">就是创建类的对象</span>(<span class=\\\"zh-hans\\\">实例</span>)</span>\\n        <span class=\\\"hljs-comment\\\">//<span class=\\\"zh-hans\\\">除了私有的构造函数外</span>(<span class=\\\"zh-hans\\\">单例模式</span>,<span class=\\\"zh-hans\\\">禁止通过构造函数创建类的实例</span>,<span class=\\\"zh-hans\\\">保证每个类只有一个实例</span>)</span>\\n        <span class=\\\"hljs-comment\\\">//ctor1.newInstance()<span class=\\\"zh-hans\\\">默认生成一个</span>Object<span class=\\\"zh-hans\\\">对象</span>,<span class=\\\"zh-hans\\\">我门需要转化成我们需要的</span>Animal<span class=\\\"zh-hans\\\">对象</span></span>\\n        Animal a1 = (Animal)ctor1.newInstance();\\n        <span class=\\\"hljs-comment\\\">//4. <span class=\\\"zh-hans\\\">通过反射调用</span>Animal<span class=\\\"zh-hans\\\">的方法</span></span>\\n        Method method = c1.getMethod(<span class=\\\"hljs-string\\\">\\\"sayName\\\"</span>, String.class);\\n        String name = (String) method.invoke(a1,<span class=\\\"hljs-string\\\">\\\"<span class=\\\"zh-hans\\\">兔兔</span>\\\"</span>);\\n        System.out.println(name);\\n        <span class=\\\"hljs-comment\\\">//5. <span class=\\\"zh-hans\\\">直接访问类中的方法</span></span>\\n        System.out.println(a1.sayName(<span class=\\\"hljs-string\\\">\\\"<span class=\\\"zh-hans\\\">猫猫</span>\\\"</span>));\\n        <span class=\\\"hljs-comment\\\">//6. <span class=\\\"zh-hans\\\">访问类中的变量</span></span>\\n        System.out.println(a1.name);\\n    }\\n}\\n</code></pre>\\n<ul data-source-line=\\\"68\\\">\\n<li>--&gt;</li>\\n</ul>\\n<pre data-source-line=\\\"69\\\"><code class=\\\"hljs\\\">class xyz<span class=\\\"hljs-selector-class\\\">.fusheng</span><span class=\\\"hljs-selector-class\\\">.lesson1</span><span class=\\\"hljs-selector-class\\\">.reflection</span><span class=\\\"hljs-selector-class\\\">.Animal</span>\\nHello,<span class=\\\"zh-hans\\\">兔兔</span>\\nHello,<span class=\\\"zh-hans\\\">猫猫</span>\\nDog\\n</code></pre>\\n<ul data-source-line=\\\"75\\\">\\n<li>反射大概步骤:</li>\\n<li>1.通过 Class.forName(\\\"全类名\\\")拿到反射入口</li>\\n<li>2.根据反射入口对象(Class)获取类的各种信息</li>\\n<li>3.通过反射获取对象的实例,并操作对象</li>\\n<li>4.在程序执行过程中,动态的决定调用的类,以及方法</li>\\n</ul>\",\"blogGoods\":0,\"blogId\":\"1240489759664103424\",\"blogRead\":0,\"blogTitle\":\"lesson-2.0 反射机制 (Reflection)\",\"blogType\":14,\"createdTime\":\"2020-03-19 12:06:19\",\"version\":2},\"msg\":\"操作成功！\"}","logStatus":0,"logTime":0,"logUrl":"/blog/save"}],"pageSize":10,"params":{"logStatus":0,"logMethod":"POST"},"sortColumn":"","sortMethod":"asc","totalCount":5,"totalPage":1},"msg":"操作成功！"}
2020-03-19 13:09:39.825 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /log/getByPage
2020-03-19 13:09:39.826 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 13:09:39.827 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 13:09:39.827 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.LogController.getByPage
2020-03-19 13:09:39.828 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=5, index=0, list=[Log(logId=28, logUrl=/type/save, logParams=[Type(typeId=null, typeName=Spring Boot, typeBlogCount=null, enable=null, deleted=null)], logStatus=0, logMessage=xyz.fusheng.blog.exception.BlogException: 该分类类型已经存在!
	at xyz.fusheng.blog.service.impl.TypeServiceImpl.save(TypeServiceImpl.java:34)
	at xyz.fusheng.blog.controller.TypeController.save(TypeController.java:31)
	at xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)
	at xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)
	at xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$866d35f4.save(<generated>)
, logMethod=POST, logTime=0, logResult=null, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:01:06), Log(logId=84, logUrl=/link/save, logParams=[Link(linkId=null, linkName=baidu, linkUrl=www.baidu.com, createdTime=null, updateTime=null, version=null, deleted=null)], logStatus=0, logMessage=org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'linlName' in 'class xyz.fusheng.blog.pojo.Link'
	at xyz.fusheng.blog.service.impl.LinkServiceImpl.save(LinkServiceImpl.java:25)
	at xyz.fusheng.blog.controller.LinkController.save(LinkController.java:33)
	at xyz.fusheng.blog.controller.LinkController$$FastClassBySpringCGLIB$$faeda005.invoke(<generated>)
	at xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)
	at xyz.fusheng.blog.controller.LinkController$$EnhancerBySpringCGLIB$$1fc4c65.save(<generated>)
Caused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'linlName' in 'class xyz.fusheng.blog.pojo.Link'
, logMethod=POST, logTime=0, logResult=null, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-13 15:09:22), Log(logId=87, logUrl=/link/save, logParams=[Link(linkId=null, linkName=baidu, linkUrl=www.baidu.com, createdTime=null, updateTime=null, version=null, deleted=null)], logStatus=0, logMessage=org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'linlName' in 'class xyz.fusheng.blog.pojo.Link'
	at xyz.fusheng.blog.service.impl.LinkServiceImpl.save(LinkServiceImpl.java:25)
	at xyz.fusheng.blog.controller.LinkController.save(LinkController.java:33)
	at xyz.fusheng.blog.controller.LinkController$$FastClassBySpringCGLIB$$faeda005.invoke(<generated>)
	at xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)
	at xyz.fusheng.blog.controller.LinkController$$EnhancerBySpringCGLIB$$e7b2bf1d.save(<generated>)
Caused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'linlName' in 'class xyz.fusheng.blog.pojo.Link'
, logMethod=POST, logTime=0, logResult=null, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-13 15:14:41), Log(logId=119, logUrl=/blog/save, logParams=[Blog(blogId=null, blogTitle=测试博客1, blogImage=null, blogContent=测试内容, blogGoods=null, blogRead=null, blogCollection=null, blogType=6, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)], logStatus=0, logMessage=org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: java.sql.SQLIntegrityConstraintViolationException: Column 'blog_id' cannot be null
### The error may involve xyz.fusheng.blog.mapper.BlogMapper.save-Inline
### Cause: java.sql.SQLIntegrityConstraintViolationException: Column 'blog_id' cannot be null
; Column 'blog_id' cannot be null; nested exception is java.sql.SQLIntegrityConstraintViolationException: Column 'blog_id' cannot be null
	at xyz.fusheng.blog.service.impl.BlogServiceImpl.save(BlogServiceImpl.java:38)
	at xyz.fusheng.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$4f70dde1.invoke(<generated>)
	at xyz.fusheng.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$8b6ceecc.save(<generated>)
	at xyz.fusheng.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$4f70dde1.invoke(<generated>)
	at xyz.fusheng.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$86b7ed20.save(<generated>)
	at xyz.fusheng.blog.controller.BlogController.save(BlogController.java:38)
	at xyz.fusheng.blog.controller.BlogController$$FastClassBySpringCGLIB$$a7ebadad.invoke(<generated>)
	at xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)
	at xyz.fusheng.blog.controller.BlogController$$EnhancerBySpringCGLIB$$c72b172.save(<generated>)
Caused by: java.sql.SQLIntegrityConstraintViolationException: Column 'blog_id' cannot be null
, logMethod=POST, logTime=0, logResult=null, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-13 22:56:50), Log(logId=315, logUrl=/blog/save, logParams=[Blog(blogId=, blogTitle=lesson-2.2 依赖倒置 (Dependency Inversion), blogImage=null, blogContent=<h3 id="lesson-22-依赖倒置-dependency-inversion" data-source-line="1">lesson-2.2 依赖倒置 (Dependency Inversion)</h3>
<blockquote data-source-line="4">
<p>依赖倒置原则（Dependence Inversion Principle）是程序要依赖于抽象接口，不要依赖于具体实现。简单的说就是要求对抽象进行编程，不要对实现进行编程，这样就降低了客户与实现模块间的耦合。</p>
</blockquote>
<blockquote data-source-line="6">
<p>面向过程的开发，上层调用下层，上层依赖于下层，当下层剧烈变动时上层也要跟着变动，这就会导致模块的复用性降低而且大大提高了开发的成本。</p>
</blockquote>
<blockquote data-source-line="8">
<p>面向对象的开发很好的解决了这个问题，一般情况下抽象的变化概率很小，让用户程序依赖于抽象，实现的细节也依赖于抽象。即使实现细节不断变动，只要抽象不变，客户程序就不需要变化。这大大降低了客户程序与实现细节的耦合度。</p>
</blockquote>
<p data-source-line="10"><strong>实际案例</strong></p>
<p data-source-line="12">假设我们设计一辆汽车：先设计轮子，然后根据轮子大小设计底盘，接着根据底盘设计 车身，最后根据车身设计好整个汽车。这里就出现了一个&ldquo;依赖&rdquo;关系：汽车依赖车身，车 身依赖底盘，底盘依赖轮子。 <img src="file:///D:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qq464A73A6FE5266563C05A2260725DAB1/671ec299486946d0a76d21846b5a8fdb/clipboard.png?ynotemdtimestamp=1584590739806" alt="image" data-src="F20D4437F1D940F4BF03FD1C053C8292" data-ynote-src="F20D4437F1D940F4BF03FD1C053C8292" data-processed="F20D4437F1D940F4BF03FD1C053C8292" />这样的设计看起来没问题，但是可维护性却很低。假设设计完工之后，上司却突然说 根据市场需求的变动，要我们把车子的轮子设计都改大一码。这下我们就蛋疼了：因为我们 是根据轮子的尺寸设计的底盘，轮子的尺寸一改，底盘的设计就得修改。<br />同样因为我们是根据底盘设计的车身，那么车身也得改，同理汽车设计也得改&mdash;&mdash;整 个设计几乎都得改！我们现在换一种思路。我们先设计汽车的大概样子，然后根据汽车的样 子来设计车身，根据车身来设计底盘，最后根据底盘来设计轮子。这时候，依赖关系就倒置 过来了：轮子依赖底盘， 底盘依赖车身， 车身依赖汽车。 <img src="file:///D:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qq464A73A6FE5266563C05A2260725DAB1/5af142d8df154b27a0a8b376d2405abc/clipboard.png?ynotemdtimestamp=1584590739806" alt="image" data-src="BFB4327137244086ADE96E62A24DEAE0" data-ynote-src="BFB4327137244086ADE96E62A24DEAE0" data-processed="BFB4327137244086ADE96E62A24DEAE0" />这时候，上司再说要改动轮子的设计，我们就只需要改动轮子的设计，而不需要动底盘， 车身，汽车的设计了。这就是依赖倒置原则&mdash;&mdash;把原本的高层建筑依赖底层建筑&ldquo;倒置&rdquo;过 来，变成底层建筑依赖高层建筑。高层建筑决定需要什么，底层去实现这样的需求，但是 高层并不用管底层是怎么实现的。这样就不会出现前面的&ldquo;牵一发动全身&rdquo;的情况。</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=null, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)], logStatus=0, logMessage=org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: java.sql.SQLIntegrityConstraintViolationException: Column 'blog_type' cannot be null
### The error may involve xyz.fusheng.blog.mapper.BlogMapper.save-Inline
### Cause: java.sql.SQLIntegrityConstraintViolationException: Column 'blog_type' cannot be null
; Column 'blog_type' cannot be null; nested exception is java.sql.SQLIntegrityConstraintViolationException: Column 'blog_type' cannot be null
	at xyz.fusheng.blog.service.impl.BlogServiceImpl.save(BlogServiceImpl.java:42)
	at xyz.fusheng.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$4f70dde1.invoke(<generated>)
	at xyz.fusheng.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$3d6a345e.save(<generated>)
	at xyz.fusheng.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$4f70dde1.invoke(<generated>)
	at xyz.fusheng.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$38b532b2.save(<generated>)
	at xyz.fusheng.blog.controller.BlogController.save(BlogController.java:37)
	at xyz.fusheng.blog.controller.BlogController$$FastClassBySpringCGLIB$$a7ebadad.invoke(<generated>)
	at xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at xyz.fusheng.blog.controller.BlogController$$EnhancerBySpringCGLIB$$fdd5737c.save(<generated>)
Caused by: java.sql.SQLIntegrityConstraintViolationException: Column 'blog_type' cannot be null
, logMethod=POST, logTime=0, logResult={"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"<h2 id=\"lesson-20-反射机制-reflection\" data-source-line=\"1\">lesson-2.0 反射机制 (Reflection)</h2>\n<h3 id=\"一-反射\" data-source-line=\"3\">一: 反射</h3>\n<p data-source-line=\"5\"><strong>JAVA 反射机制是在运行状态中:</strong></p>\n<ul data-source-line=\"6\">\n<li>对于任意一个类,都能够知道这个类的所有属性和方法;</li>\n<li>对于任意一个对象,都能够调用它的任意一个方法和属性;</li>\n<li>这种动态的获取信息以及调用对象的方法的功能称为 java 语言的反射机制;</li>\n</ul>\n<p data-source-line=\"10\"><strong>反射提供的功能:</strong></p>\n<ul data-source-line=\"11\">\n<li>在运行时判断任意一个对象所需的类</li>\n<li>在运行时构造任意一个类的对象</li>\n<li>在运行时判断任意一个类所具有的的成员变量和方法</li>\n<li>在运行时调用任意一个对象的方法</li>\n</ul>\n<p data-source-line=\"16\"><strong>反射具体加载过程</strong> <img src=\"file:///D:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qq464A73A6FE5266563C05A2260725DAB1/384b38e734b44a5a9c89f4851baeea96/clipboard.png?ynotemdtimestamp=1584590739806\" alt=\"image\" data-src=\"129D1CDB55284B79BD32008C5D11E63E\" data-ynote-src=\"129D1CDB55284B79BD32008C5D11E63E\" data-processed=\"129D1CDB55284B79BD32008C5D11E63E\" /></p>\n<p data-source-line=\"19\"><strong><em>简单实例:</em></strong></p>\n<ul data-source-line=\"20\">\n<li>首先定义一个Animal,里面定义一些构造函数,方法,变量:</li>\n</ul>\n<pre data-source-line=\"21\"><code class=\"hljs\"><span class=\"hljs-keyword\">package</span> xyz.fusheng.lesson1.reflection;\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Animal</span> </span>{\n    <span class=\"hljs-keyword\">public</span> String name=<span class=\"hljs-string\">\"Dog\"</span>;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> age = <span class=\"hljs-number\">30</span>;\n    <span class=\"hljs-comment\">// <span class=\"zh-hans\">默认无参构造函数</span></span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Animal</span><span class=\"hljs-params\">()</span> </span>{\n    }\n    <span class=\"hljs-comment\">// <span class=\"zh-hans\">带参数的构造函数</span></span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Animal</span><span class=\"hljs-params\">(String name, <span class=\"hljs-keyword\">int</span> age)</span></span>{\n        System.out.println(name+<span class=\"hljs-string\">\",\"</span>+age);\n    }\n    <span class=\"hljs-comment\">// <span class=\"zh-hans\">公开</span> <span class=\"zh-hans\">方法</span> <span class=\"zh-hans\">返回类型和参数均有</span></span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">sayName</span><span class=\"hljs-params\">(String name)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Hello,\"</span> + name;\n    }\n}\n</code></pre>\n<ul data-source-line=\"39\">\n<li>用反射的方法调用这个类:</li>\n</ul>\n<pre data-source-line=\"40\"><code class=\"hljs\"><span class=\"hljs-keyword\">package</span> xyz.fusheng.lesson1.reflection;\n<span class=\"hljs-keyword\">import</span> java.lang.reflect.Constructor;\n<span class=\"hljs-keyword\">import</span> java.lang.reflect.InvocationTargetException;\n<span class=\"hljs-keyword\">import</span> java.lang.reflect.Method;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Main1</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException</span>{\n        <span class=\"hljs-comment\">//1. <span class=\"zh-hans\">加载类</span>,<span class=\"zh-hans\">指定类的完全限定名</span>: <span class=\"zh-hans\">包名</span>+<span class=\"zh-hans\">类名</span></span>\n        Class c1 = Class.forName(<span class=\"hljs-string\">\"xyz.fusheng.lesson1.reflection.Animal\"</span>);\n        System.out.println(c1); <span class=\"hljs-comment\">//<span class=\"zh-hans\">打印</span> c1,<span class=\"zh-hans\">发现值和字节码中的类的名称一样</span></span>\n        <span class=\"hljs-comment\">//2. <span class=\"zh-hans\">获取</span>(<span class=\"zh-hans\">反射</span>)<span class=\"zh-hans\">类</span>c1<span class=\"zh-hans\">的公开构造函数</span>,<span class=\"zh-hans\">且参数为</span>null</span>\n        Constructor ctor1 = c1.getConstructor();\n        <span class=\"hljs-comment\">//3. <span class=\"zh-hans\">构造函数的用途</span>,<span class=\"zh-hans\">就是创建类的对象</span>(<span class=\"zh-hans\">实例</span>)</span>\n        <span class=\"hljs-comment\">//<span class=\"zh-hans\">除了私有的构造函数外</span>(<span class=\"zh-hans\">单例模式</span>,<span class=\"zh-hans\">禁止通过构造函数创建类的实例</span>,<span class=\"zh-hans\">保证每个类只有一个实例</span>)</span>\n        <span class=\"hljs-comment\">//ctor1.newInstance()<span class=\"zh-hans\">默认生成一个</span>Object<span class=\"zh-hans\">对象</span>,<span class=\"zh-hans\">我门需要转化成我们需要的</span>Animal<span class=\"zh-hans\">对象</span></span>\n        Animal a1 = (Animal)ctor1.newInstance();\n        <span class=\"hljs-comment\">//4. <span class=\"zh-hans\">通过反射调用</span>Animal<span class=\"zh-hans\">的方法</span></span>\n        Method method = c1.getMethod(<span class=\"hljs-string\">\"sayName\"</span>, String.class);\n        String name = (String) method.invoke(a1,<span class=\"hljs-string\">\"<span class=\"zh-hans\">兔兔</span>\"</span>);\n        System.out.println(name);\n        <span class=\"hljs-comment\">//5. <span class=\"zh-hans\">直接访问类中的方法</span></span>\n        System.out.println(a1.sayName(<span class=\"hljs-string\">\"<span class=\"zh-hans\">猫猫</span>\"</span>));\n        <span class=\"hljs-comment\">//6. <span class=\"zh-hans\">访问类中的变量</span></span>\n        System.out.println(a1.name);\n    }\n}\n</code></pre>\n<ul data-source-line=\"68\">\n<li>--&gt;</li>\n</ul>\n<pre data-source-line=\"69\"><code class=\"hljs\">class xyz<span class=\"hljs-selector-class\">.fusheng</span><span class=\"hljs-selector-class\">.lesson1</span><span class=\"hljs-selector-class\">.reflection</span><span class=\"hljs-selector-class\">.Animal</span>\nHello,<span class=\"zh-hans\">兔兔</span>\nHello,<span class=\"zh-hans\">猫猫</span>\nDog\n</code></pre>\n<ul data-source-line=\"75\">\n<li>反射大概步骤:</li>\n<li>1.通过 Class.forName(\"全类名\")拿到反射入口</li>\n<li>2.根据反射入口对象(Class)获取类的各种信息</li>\n<li>3.通过反射获取对象的实例,并操作对象</li>\n<li>4.在程序执行过程中,动态的决定调用的类,以及方法</li>\n</ul>","blogGoods":0,"blogId":"1240489759664103424","blogRead":0,"blogTitle":"lesson-2.0 反射机制 (Reflection)","blogType":14,"createdTime":"2020-03-19 12:06:19","version":2},"msg":"操作成功！"}, logIp=127.0.0.1, createdTime=2020-03-19 12:12:13)], params={logStatus=0, logMethod=PUT}, sortColumn=, sortMethod=asc)]
2020-03-19 13:09:40.014 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 189
2020-03-19 13:09:40.015 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"index":0,"list":[{"createdTime":"2020-03-12 23:32:12","logId":38,"logIp":"0:0:0:0:0:0:0:1","logMessage":"org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\n\tat xyz.fusheng.blog.service.impl.TypeServiceImpl.update(TypeServiceImpl.java:51)\n\tat xyz.fusheng.blog.controller.TypeController.update(TypeController.java:62)\n\tat xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)\n\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\n\tat xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$c9c30f4e.update(<generated>)\nCaused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\n","logMethod":"PUT","logParams":"[Type(typeId=7, typeName=Java 专题, typeBlogCount=null, enable=null, deleted=null)]","logStatus":0,"logTime":0,"logUrl":"/type/update"},{"createdTime":"2020-03-12 23:38:04","logId":40,"logIp":"0:0:0:0:0:0:0:1","logMessage":"org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\n\tat xyz.fusheng.blog.service.impl.TypeServiceImpl.update(TypeServiceImpl.java:51)\n\tat xyz.fusheng.blog.controller.TypeController.update(TypeController.java:62)\n\tat xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)\n\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\n\tat xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$5997ab44.update(<generated>)\nCaused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\n","logMethod":"PUT","logParams":"[Type(typeId=7, typeName=Java 专题, typeBlogCount=null, enable=null, deleted=null)]","logStatus":0,"logTime":0,"logUrl":"/type/update"},{"createdTime":"2020-03-12 23:38:12","logId":41,"logIp":"0:0:0:0:0:0:0:1","logMessage":"org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\n\tat xyz.fusheng.blog.service.impl.TypeServiceImpl.update(TypeServiceImpl.java:51)\n\tat xyz.fusheng.blog.controller.TypeController.update(TypeController.java:62)\n\tat xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)\n\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\n\tat xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$5997ab44.update(<generated>)\nCaused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\n","logMethod":"PUT","logParams":"[Type(typeId=7, typeName=Java 专题, typeBlogCount=null, enable=null, deleted=null)]","logStatus":0,"logTime":0,"logUrl":"/type/update"},{"createdTime":"2020-03-12 23:39:10","logId":43,"logIp":"0:0:0:0:0:0:0:1","logMessage":"org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\n\tat xyz.fusheng.blog.service.impl.TypeServiceImpl.update(TypeServiceImpl.java:51)\n\tat xyz.fusheng.blog.controller.TypeController.update(TypeController.java:62)\n\tat xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)\n\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\n\tat xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$5997ab44.update(<generated>)\nCaused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\n","logMethod":"PUT","logParams":"[Type(typeId=7, typeName=Java 专题, typeBlogCount=null, enable=null, deleted=null)]","logStatus":0,"logTime":0,"logUrl":"/type/update"},{"createdTime":"2020-03-12 23:42:40","logId":46,"logIp":"0:0:0:0:0:0:0:1","logMessage":"org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\n\tat xyz.fusheng.blog.service.impl.TypeServiceImpl.update(TypeServiceImpl.java:51)\n\tat xyz.fusheng.blog.controller.TypeController.update(TypeController.java:62)\n\tat xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)\n\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\n\tat xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$ce615d71.update(<generated>)\nCaused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\n","logMethod":"PUT","logParams":"[Type(typeId=7, typeName=Java 专题, typeBlogCount=null, enable=null, deleted=null)]","logStatus":0,"logTime":0,"logUrl":"/type/update"},{"createdTime":"2020-03-12 23:44:05","logId":47,"logIp":"0:0:0:0:0:0:0:1","logMessage":"org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\n\tat xyz.fusheng.blog.service.impl.TypeServiceImpl.update(TypeServiceImpl.java:51)\n\tat xyz.fusheng.blog.controller.TypeController.update(TypeController.java:62)\n\tat xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)\n\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\n\tat xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$ce615d71.update(<generated>)\nCaused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'\n","logMethod":"PUT","logParams":"[Type(typeId=7, typeName=Java 专题, typeBlogCount=null, enable=null, deleted=null)]","logStatus":0,"logTime":0,"logUrl":"/type/update"},{"createdTime":"2020-03-13 00:03:40","logId":52,"logIp":"0:0:0:0:0:0:0:1","logMessage":"\tat xyz.fusheng.blog.service.impl.TypeServiceImpl.enableById(TypeServiceImpl.java:58)\n\tat xyz.fusheng.blog.controller.TypeController.enable(TypeController.java:73)\n\tat xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)\n\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\n\tat xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$c4f2514d.enable(<generated>)\n","logMethod":"PUT","logParams":"[6]","logStatus":0,"logTime":0,"logUrl":"/type/enable/6"},{"createdTime":"2020-03-13 00:03:46","logId":53,"logIp":"0:0:0:0:0:0:0:1","logMessage":"\tat xyz.fusheng.blog.service.impl.TypeServiceImpl.enableById(TypeServiceImpl.java:58)\n\tat xyz.fusheng.blog.controller.TypeController.enable(TypeController.java:73)\n\tat xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)\n\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\n\tat xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$c4f2514d.enable(<generated>)\n","logMethod":"PUT","logParams":"[6]","logStatus":0,"logTime":0,"logUrl":"/type/enable/6"},{"createdTime":"2020-03-13 00:04:25","logId":55,"logIp":"0:0:0:0:0:0:0:1","logMessage":"\tat xyz.fusheng.blog.service.impl.TypeServiceImpl.enableById(TypeServiceImpl.java:58)\n\tat xyz.fusheng.blog.controller.TypeController.enable(TypeController.java:73)\n\tat xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)\n\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\n\tat xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$c4f2514d.enable(<generated>)\n","logMethod":"PUT","logParams":"[6]","logStatus":0,"logTime":0,"logUrl":"/type/enable/6"},{"createdTime":"2020-03-13 00:05:06","logId":56,"logIp":"0:0:0:0:0:0:0:1","logMessage":"\tat xyz.fusheng.blog.service.impl.TypeServiceImpl.enableById(TypeServiceImpl.java:58)\n\tat xyz.fusheng.blog.controller.TypeController.enable(TypeController.java:73)\n\tat xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)\n\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\n\tat xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$c4f2514d.enable(<generated>)\n","logMethod":"PUT","logParams":"[6]","logResult":"{\"code\":20000,\"data\":{\"token\":\"636ACE77F9C91B95B82CCEE88E854055\"},\"msg\":\"操作成功！\"}","logStatus":0,"logTime":0,"logUrl":"/type/enable/6"}],"pageSize":10,"params":{"logStatus":0,"logMethod":"PUT"},"sortColumn":"","sortMethod":"asc","totalCount":23,"totalPage":3},"msg":"操作成功！"}
2020-03-19 13:09:44.926 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /log/getByPage
2020-03-19 13:09:44.927 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 13:09:44.928 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 13:09:44.928 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.LogController.getByPage
2020-03-19 13:09:44.929 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=3, totalCount=23, index=0, list=[Log(logId=38, logUrl=/type/update, logParams=[Type(typeId=7, typeName=Java 专题, typeBlogCount=null, enable=null, deleted=null)], logStatus=0, logMessage=org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'
	at xyz.fusheng.blog.service.impl.TypeServiceImpl.update(TypeServiceImpl.java:51)
	at xyz.fusheng.blog.controller.TypeController.update(TypeController.java:62)
	at xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)
	at xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)
	at xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$c9c30f4e.update(<generated>)
Caused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'
, logMethod=PUT, logTime=0, logResult=null, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:32:12), Log(logId=40, logUrl=/type/update, logParams=[Type(typeId=7, typeName=Java 专题, typeBlogCount=null, enable=null, deleted=null)], logStatus=0, logMessage=org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'
	at xyz.fusheng.blog.service.impl.TypeServiceImpl.update(TypeServiceImpl.java:51)
	at xyz.fusheng.blog.controller.TypeController.update(TypeController.java:62)
	at xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)
	at xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)
	at xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$5997ab44.update(<generated>)
Caused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'
, logMethod=PUT, logTime=0, logResult=null, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:38:04), Log(logId=41, logUrl=/type/update, logParams=[Type(typeId=7, typeName=Java 专题, typeBlogCount=null, enable=null, deleted=null)], logStatus=0, logMessage=org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'
	at xyz.fusheng.blog.service.impl.TypeServiceImpl.update(TypeServiceImpl.java:51)
	at xyz.fusheng.blog.controller.TypeController.update(TypeController.java:62)
	at xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)
	at xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)
	at xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$5997ab44.update(<generated>)
Caused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'
, logMethod=PUT, logTime=0, logResult=null, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:38:12), Log(logId=43, logUrl=/type/update, logParams=[Type(typeId=7, typeName=Java 专题, typeBlogCount=null, enable=null, deleted=null)], logStatus=0, logMessage=org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'
	at xyz.fusheng.blog.service.impl.TypeServiceImpl.update(TypeServiceImpl.java:51)
	at xyz.fusheng.blog.controller.TypeController.update(TypeController.java:62)
	at xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)
	at xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)
	at xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$5997ab44.update(<generated>)
Caused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'
, logMethod=PUT, logTime=0, logResult=null, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:39:10), Log(logId=46, logUrl=/type/update, logParams=[Type(typeId=7, typeName=Java 专题, typeBlogCount=null, enable=null, deleted=null)], logStatus=0, logMessage=org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'
	at xyz.fusheng.blog.service.impl.TypeServiceImpl.update(TypeServiceImpl.java:51)
	at xyz.fusheng.blog.controller.TypeController.update(TypeController.java:62)
	at xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)
	at xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)
	at xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$ce615d71.update(<generated>)
Caused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'
, logMethod=PUT, logTime=0, logResult=null, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:42:40), Log(logId=47, logUrl=/type/update, logParams=[Type(typeId=7, typeName=Java 专题, typeBlogCount=null, enable=null, deleted=null)], logStatus=0, logMessage=org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'
	at xyz.fusheng.blog.service.impl.TypeServiceImpl.update(TypeServiceImpl.java:51)
	at xyz.fusheng.blog.controller.TypeController.update(TypeController.java:62)
	at xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)
	at xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)
	at xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$ce615d71.update(<generated>)
Caused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'version' in 'class xyz.fusheng.blog.pojo.Type'
, logMethod=PUT, logTime=0, logResult=null, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-12 23:44:05), Log(logId=52, logUrl=/type/enable/6, logParams=[6], logStatus=0, logMessage=	at xyz.fusheng.blog.service.impl.TypeServiceImpl.enableById(TypeServiceImpl.java:58)
	at xyz.fusheng.blog.controller.TypeController.enable(TypeController.java:73)
	at xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)
	at xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)
	at xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$c4f2514d.enable(<generated>)
, logMethod=PUT, logTime=0, logResult=null, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-13 00:03:40), Log(logId=53, logUrl=/type/enable/6, logParams=[6], logStatus=0, logMessage=	at xyz.fusheng.blog.service.impl.TypeServiceImpl.enableById(TypeServiceImpl.java:58)
	at xyz.fusheng.blog.controller.TypeController.enable(TypeController.java:73)
	at xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)
	at xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)
	at xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$c4f2514d.enable(<generated>)
, logMethod=PUT, logTime=0, logResult=null, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-13 00:03:46), Log(logId=55, logUrl=/type/enable/6, logParams=[6], logStatus=0, logMessage=	at xyz.fusheng.blog.service.impl.TypeServiceImpl.enableById(TypeServiceImpl.java:58)
	at xyz.fusheng.blog.controller.TypeController.enable(TypeController.java:73)
	at xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)
	at xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)
	at xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$c4f2514d.enable(<generated>)
, logMethod=PUT, logTime=0, logResult=null, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-13 00:04:25), Log(logId=56, logUrl=/type/enable/6, logParams=[6], logStatus=0, logMessage=	at xyz.fusheng.blog.service.impl.TypeServiceImpl.enableById(TypeServiceImpl.java:58)
	at xyz.fusheng.blog.controller.TypeController.enable(TypeController.java:73)
	at xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)
	at xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)
	at xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$c4f2514d.enable(<generated>)
, logMethod=PUT, logTime=0, logResult={"code":20000,"data":{"token":"636ACE77F9C91B95B82CCEE88E854055"},"msg":"操作成功！"}, logIp=0:0:0:0:0:0:0:1, createdTime=2020-03-13 00:05:06)], params={logStatus=0, logMethod=DELETE}, sortColumn=, sortMethod=asc)]
2020-03-19 13:09:45.070 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 144
2020-03-19 13:09:45.071 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"index":0,"list":[{"createdTime":"2020-03-13 08:34:43","logId":80,"logIp":"0:0:0:0:0:0:0:1","logMessage":"org.springframework.jdbc.BadSqlGrammarException: \n### Error updating database.  Cause: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'delete = 1\n### Cause: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'delete = 1\n; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'delete = 1\n\tat xyz.fusheng.blog.service.impl.TypeServiceImpl.deleteById(TypeServiceImpl.java:72)\n\tat xyz.fusheng.blog.controller.TypeController.delete(TypeController.java:106)\n\tat xyz.fusheng.blog.controller.TypeController$$FastClassBySpringCGLIB$$84136f45.invoke(<generated>)\n\tat xyz.fusheng.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)\n\tat xyz.fusheng.blog.controller.TypeController$$EnhancerBySpringCGLIB$$4ff1b9d2.delete(<generated>)\nCaused by: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'delete = 1\n","logMethod":"DELETE","logParams":"[7]","logStatus":0,"logTime":0,"logUrl":"/type/delete/7"}],"pageSize":10,"params":{"logStatus":0,"logMethod":"DELETE"},"sortColumn":"","sortMethod":"asc","totalCount":1,"totalPage":1},"msg":"操作成功！"}
2020-03-19 13:11:24.183 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /admin/info
2020-03-19 13:11:24.184 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 13:11:24.185 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 13:11:24.185 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.AdminController.getLoginInfo
2020-03-19 13:11:24.186 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 13:11:24.187 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 4
2020-03-19 13:11:24.188 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"name":"张浩","password":"******","signature":"浮生若梦,为欢几何!","username":"admin"},"msg":"操作成功！"}
2020-03-19 13:11:24.440 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /type/getList
2020-03-19 13:11:24.440 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 13:11:24.441 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 13:11:24.442 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.TypeController.getList
2020-03-19 13:11:24.442 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 13:11:24.515 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 75
2020-03-19 13:11:24.516 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":[{"typeBlogCount":0,"typeId":13,"typeName":"个人博客开发文档"},{"typeBlogCount":0,"typeId":14,"typeName":"Spring 专题"},{"typeBlogCount":0,"typeId":15,"typeName":"Spring Boot 专题"},{"typeBlogCount":0,"typeId":16,"typeName":"Spring Cloud 专题"},{"typeBlogCount":0,"typeId":17,"typeName":"MyBatis 专题"},{"typeBlogCount":0,"typeId":18,"typeName":"Linux 专题"},{"typeBlogCount":0,"typeId":19,"typeName":"Security 专题"},{"typeBlogCount":0,"typeId":20,"typeName":"Docker 专题"}],"msg":"操作成功！"}
2020-03-19 13:11:46.287 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /admin/info
2020-03-19 13:11:46.287 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 13:11:46.288 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 13:11:46.289 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.AdminController.getLoginInfo
2020-03-19 13:11:46.289 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 13:11:46.290 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 3
2020-03-19 13:11:46.291 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"name":"张浩","password":"******","signature":"浮生若梦,为欢几何!","username":"admin"},"msg":"操作成功！"}
2020-03-19 13:11:46.711 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /type/getList
2020-03-19 13:11:46.712 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 13:11:46.713 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 13:11:46.714 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.TypeController.getList
2020-03-19 13:11:46.715 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 13:11:46.797 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 86
2020-03-19 13:11:46.798 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":[{"typeBlogCount":0,"typeId":13,"typeName":"个人博客开发文档"},{"typeBlogCount":0,"typeId":14,"typeName":"Spring 专题"},{"typeBlogCount":0,"typeId":15,"typeName":"Spring Boot 专题"},{"typeBlogCount":0,"typeId":16,"typeName":"Spring Cloud 专题"},{"typeBlogCount":0,"typeId":17,"typeName":"MyBatis 专题"},{"typeBlogCount":0,"typeId":18,"typeName":"Linux 专题"},{"typeBlogCount":0,"typeId":19,"typeName":"Security 专题"},{"typeBlogCount":0,"typeId":20,"typeName":"Docker 专题"}],"msg":"操作成功！"}
2020-03-19 13:12:27.909 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /admin/info
2020-03-19 13:12:27.910 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 13:12:27.911 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 13:12:27.911 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.AdminController.getLoginInfo
2020-03-19 13:12:27.936 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 13:12:27.937 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 28
2020-03-19 13:12:27.937 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"name":"张浩","password":"******","signature":"浮生若梦,为欢几何!","username":"admin"},"msg":"操作成功！"}
2020-03-19 13:12:28.249 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /type/getList
2020-03-19 13:12:28.250 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 13:12:28.250 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 13:12:28.251 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.TypeController.getList
2020-03-19 13:12:28.252 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 13:12:28.339 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 90
2020-03-19 13:12:28.339 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":[{"typeBlogCount":0,"typeId":13,"typeName":"个人博客开发文档"},{"typeBlogCount":0,"typeId":14,"typeName":"Spring 专题"},{"typeBlogCount":0,"typeId":15,"typeName":"Spring Boot 专题"},{"typeBlogCount":0,"typeId":16,"typeName":"Spring Cloud 专题"},{"typeBlogCount":0,"typeId":17,"typeName":"MyBatis 专题"},{"typeBlogCount":0,"typeId":18,"typeName":"Linux 专题"},{"typeBlogCount":0,"typeId":19,"typeName":"Security 专题"},{"typeBlogCount":0,"typeId":20,"typeName":"Docker 专题"}],"msg":"操作成功！"}
2020-03-19 13:12:31.573 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /admin/info
2020-03-19 13:12:31.573 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 13:12:31.574 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 13:12:31.574 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.AdminController.getLoginInfo
2020-03-19 13:12:31.575 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 13:12:31.576 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 3
2020-03-19 13:12:31.577 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"name":"张浩","password":"******","signature":"浮生若梦,为欢几何!","username":"admin"},"msg":"操作成功！"}
2020-03-19 13:12:31.769 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /type/getList
2020-03-19 13:12:31.770 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 13:12:31.771 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 13:12:31.771 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.TypeController.getList
2020-03-19 13:12:31.772 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 13:12:31.849 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 80
2020-03-19 13:12:31.850 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":[{"typeBlogCount":0,"typeId":13,"typeName":"个人博客开发文档"},{"typeBlogCount":0,"typeId":14,"typeName":"Spring 专题"},{"typeBlogCount":0,"typeId":15,"typeName":"Spring Boot 专题"},{"typeBlogCount":0,"typeId":16,"typeName":"Spring Cloud 专题"},{"typeBlogCount":0,"typeId":17,"typeName":"MyBatis 专题"},{"typeBlogCount":0,"typeId":18,"typeName":"Linux 专题"},{"typeBlogCount":0,"typeId":19,"typeName":"Security 专题"},{"typeBlogCount":0,"typeId":20,"typeName":"Docker 专题"}],"msg":"操作成功！"}
2020-03-19 13:12:52.287 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /admin/info
2020-03-19 13:12:52.288 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 13:12:52.290 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 13:12:52.291 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.AdminController.getLoginInfo
2020-03-19 13:12:52.292 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 13:12:52.292 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 5
2020-03-19 13:12:52.293 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"name":"张浩","password":"******","signature":"浮生若梦,为欢几何!","username":"admin"},"msg":"操作成功！"}
2020-03-19 13:12:52.665 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /type/getList
2020-03-19 13:12:52.668 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 13:12:52.668 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 13:12:52.669 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.TypeController.getList
2020-03-19 13:12:52.671 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 13:12:52.751 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 86
2020-03-19 13:12:52.751 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":[{"typeBlogCount":0,"typeId":13,"typeName":"个人博客开发文档"},{"typeBlogCount":0,"typeId":14,"typeName":"Spring 专题"},{"typeBlogCount":0,"typeId":15,"typeName":"Spring Boot 专题"},{"typeBlogCount":0,"typeId":16,"typeName":"Spring Cloud 专题"},{"typeBlogCount":0,"typeId":17,"typeName":"MyBatis 专题"},{"typeBlogCount":0,"typeId":18,"typeName":"Linux 专题"},{"typeBlogCount":0,"typeId":19,"typeName":"Security 专题"},{"typeBlogCount":0,"typeId":20,"typeName":"Docker 专题"}],"msg":"操作成功！"}
2020-03-19 13:13:13.451 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /admin/info
2020-03-19 13:13:13.452 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 13:13:13.452 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 13:13:13.453 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.AdminController.getLoginInfo
2020-03-19 13:13:13.453 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 13:13:13.454 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 3
2020-03-19 13:13:13.454 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"name":"张浩","password":"******","signature":"浮生若梦,为欢几何!","username":"admin"},"msg":"操作成功！"}
2020-03-19 13:13:13.687 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /type/getList
2020-03-19 13:13:13.688 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 13:13:13.688 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 13:13:13.689 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.TypeController.getList
2020-03-19 13:13:13.690 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 13:13:13.758 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 71
2020-03-19 13:13:13.759 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":[{"typeBlogCount":0,"typeId":13,"typeName":"个人博客开发文档"},{"typeBlogCount":0,"typeId":14,"typeName":"Spring 专题"},{"typeBlogCount":0,"typeId":15,"typeName":"Spring Boot 专题"},{"typeBlogCount":0,"typeId":16,"typeName":"Spring Cloud 专题"},{"typeBlogCount":0,"typeId":17,"typeName":"MyBatis 专题"},{"typeBlogCount":0,"typeId":18,"typeName":"Linux 专题"},{"typeBlogCount":0,"typeId":19,"typeName":"Security 专题"},{"typeBlogCount":0,"typeId":20,"typeName":"Docker 专题"}],"msg":"操作成功！"}
2020-03-19 13:13:19.115 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /admin/info
2020-03-19 13:13:19.115 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 13:13:19.115 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 13:13:19.116 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.AdminController.getLoginInfo
2020-03-19 13:13:19.116 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 13:13:19.116 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 1
2020-03-19 13:13:19.117 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"name":"张浩","password":"******","signature":"浮生若梦,为欢几何!","username":"admin"},"msg":"操作成功！"}
2020-03-19 13:13:19.337 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /type/getList
2020-03-19 13:13:19.338 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 13:13:19.338 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 13:13:19.338 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.TypeController.getList
2020-03-19 13:13:19.339 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 13:13:19.417 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 80
2020-03-19 13:13:19.418 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":[{"typeBlogCount":0,"typeId":13,"typeName":"个人博客开发文档"},{"typeBlogCount":0,"typeId":14,"typeName":"Spring 专题"},{"typeBlogCount":0,"typeId":15,"typeName":"Spring Boot 专题"},{"typeBlogCount":0,"typeId":16,"typeName":"Spring Cloud 专题"},{"typeBlogCount":0,"typeId":17,"typeName":"MyBatis 专题"},{"typeBlogCount":0,"typeId":18,"typeName":"Linux 专题"},{"typeBlogCount":0,"typeId":19,"typeName":"Security 专题"},{"typeBlogCount":0,"typeId":20,"typeName":"Docker 专题"}],"msg":"操作成功！"}
2020-03-19 13:13:21.694 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /type/listBack
2020-03-19 13:13:21.695 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 13:13:21.695 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 13:13:21.695 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.TypeController.list
2020-03-19 13:13:21.696 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 13:13:21.768 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 74
2020-03-19 13:13:21.769 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":13,"typeName":"个人博客开发文档"},{"enable":1,"typeBlogCount":0,"typeId":14,"typeName":"Spring 专题"},{"enable":1,"typeBlogCount":0,"typeId":15,"typeName":"Spring Boot 专题"},{"enable":1,"typeBlogCount":0,"typeId":16,"typeName":"Spring Cloud 专题"},{"enable":1,"typeBlogCount":0,"typeId":17,"typeName":"MyBatis 专题"},{"enable":1,"typeBlogCount":0,"typeId":18,"typeName":"Linux 专题"},{"enable":1,"typeBlogCount":0,"typeId":19,"typeName":"Security 专题"},{"enable":1,"typeBlogCount":0,"typeId":20,"typeName":"Docker 专题"}],"msg":"操作成功！"}
2020-03-19 13:13:23.269 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /blog/getByPage
2020-03-19 13:13:23.269 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 13:13:23.270 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 13:13:23.270 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.BlogController.getByPage
2020-03-19 13:13:23.271 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, index=0, list=[], params={}, sortColumn=, sortMethod=asc)]
2020-03-19 13:13:23.473 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 204
2020-03-19 13:13:23.474 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1240489759664103424","blogRead":0,"blogTitle":"lesson-2.0 反射机制 (Reflection)","createdTime":"2020-03-19 12:06:19","typeName":"Spring 专题","updateTime":"2020-03-19 12:06:53"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1240490799587254272","blogRead":0,"blogTitle":"lesson-2.1 动态代理 (Dynamic Proxy)","createdTime":"2020-03-19 12:10:27","typeName":"Spring 专题","updateTime":"2020-03-19 12:10:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1240491430402187264","blogRead":0,"blogTitle":"lesson-2.2 依赖倒置 (Dependency Inversion)","createdTime":"2020-03-19 12:12:58","typeName":"Spring 专题","updateTime":"2020-03-19 12:12:58"}],"pageSize":10,"params":{},"sortColumn":"","sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}
2020-03-19 13:13:24.970 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /about/getByPage
2020-03-19 13:13:24.971 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 13:13:24.971 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 13:13:24.972 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.AboutController.getByPage
2020-03-19 13:13:24.972 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, index=0, list=[], params={}, sortColumn=, sortMethod=asc)]
2020-03-19 13:13:25.111 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 141
2020-03-19 13:13:25.112 INFO  [http-nio-8001-exec-9]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"index":0,"list":[{"aboutId":1,"aboutRead":5,"aboutTitle":"修改更新关于我的信息","createdTime":"2020-03-14 10:46:26","enable":1,"updateTime":"2020-03-14 11:00:06"},{"aboutId":2,"aboutRead":0,"aboutTitle":"测试关于我的信息1","createdTime":"2020-03-14 10:47:18","enable":0,"updateTime":"2020-03-14 10:47:18"},{"aboutId":3,"aboutRead":0,"aboutTitle":"测试关于我的信息2","createdTime":"2020-03-14 10:47:24","enable":0,"updateTime":"2020-03-14 10:47:24"}],"pageSize":10,"params":{},"sortColumn":"","sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}
2020-03-19 13:13:57.982 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /type/listBack
2020-03-19 13:13:57.983 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 13:13:57.983 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 13:13:57.984 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.TypeController.list
2020-03-19 13:13:57.984 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 13:13:58.059 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 78
2020-03-19 13:13:58.060 INFO  [http-nio-8001-exec-10]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":13,"typeName":"个人博客开发文档"},{"enable":1,"typeBlogCount":0,"typeId":14,"typeName":"Spring 专题"},{"enable":1,"typeBlogCount":0,"typeId":15,"typeName":"Spring Boot 专题"},{"enable":1,"typeBlogCount":0,"typeId":16,"typeName":"Spring Cloud 专题"},{"enable":1,"typeBlogCount":0,"typeId":17,"typeName":"MyBatis 专题"},{"enable":1,"typeBlogCount":0,"typeId":18,"typeName":"Linux 专题"},{"enable":1,"typeBlogCount":0,"typeId":19,"typeName":"Security 专题"},{"enable":1,"typeBlogCount":0,"typeId":20,"typeName":"Docker 专题"}],"msg":"操作成功！"}
2020-03-19 13:13:58.331 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /blog/getByPage
2020-03-19 13:13:58.332 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 13:13:58.332 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 13:13:58.332 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.BlogController.getByPage
2020-03-19 13:13:58.333 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, index=0, list=[], params={}, sortColumn=, sortMethod=asc)]
2020-03-19 13:13:58.534 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 203
2020-03-19 13:13:58.535 INFO  [http-nio-8001-exec-2]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1240489759664103424","blogRead":0,"blogTitle":"lesson-2.0 反射机制 (Reflection)","createdTime":"2020-03-19 12:06:19","typeName":"Spring 专题","updateTime":"2020-03-19 12:06:53"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1240490799587254272","blogRead":0,"blogTitle":"lesson-2.1 动态代理 (Dynamic Proxy)","createdTime":"2020-03-19 12:10:27","typeName":"Spring 专题","updateTime":"2020-03-19 12:10:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1240491430402187264","blogRead":0,"blogTitle":"lesson-2.2 依赖倒置 (Dependency Inversion)","createdTime":"2020-03-19 12:12:58","typeName":"Spring 专题","updateTime":"2020-03-19 12:12:58"}],"pageSize":10,"params":{},"sortColumn":"","sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}
2020-03-19 13:14:09.299 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /blog/getByPage
2020-03-19 13:14:09.299 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 13:14:09.300 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 13:14:09.300 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.BlogController.getByPage
2020-03-19 13:14:09.300 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=3, index=0, list=[BlogVo(blogId=1240489759664103424, blogTitle=lesson-2.0 反射机制 (Reflection), blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=Spring 专题, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-03-19 12:06:19, updateTime=2020-03-19 12:06:53), BlogVo(blogId=1240490799587254272, blogTitle=lesson-2.1 动态代理 (Dynamic Proxy), blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=Spring 专题, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-03-19 12:10:27, updateTime=2020-03-19 12:10:27), BlogVo(blogId=1240491430402187264, blogTitle=lesson-2.2 依赖倒置 (Dependency Inversion), blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=Spring 专题, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-03-19 12:12:58, updateTime=2020-03-19 12:12:58)], params={typeId=15}, sortColumn=, sortMethod=asc)]
2020-03-19 13:14:09.516 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 217
2020-03-19 13:14:09.516 INFO  [http-nio-8001-exec-1]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"index":0,"list":[],"pageSize":10,"params":{"typeId":15},"sortColumn":"","sortMethod":"asc","totalCount":0,"totalPage":0},"msg":"操作成功！"}
2020-03-19 13:14:13.093 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /blog/getByPage
2020-03-19 13:14:13.094 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 13:14:13.094 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 13:14:13.095 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.BlogController.getByPage
2020-03-19 13:14:13.096 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, index=0, list=[], params={typeId=}, sortColumn=, sortMethod=asc)]
2020-03-19 13:14:13.297 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 204
2020-03-19 13:14:13.298 INFO  [http-nio-8001-exec-3]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1240489759664103424","blogRead":0,"blogTitle":"lesson-2.0 反射机制 (Reflection)","createdTime":"2020-03-19 12:06:19","typeName":"Spring 专题","updateTime":"2020-03-19 12:06:53"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1240490799587254272","blogRead":0,"blogTitle":"lesson-2.1 动态代理 (Dynamic Proxy)","createdTime":"2020-03-19 12:10:27","typeName":"Spring 专题","updateTime":"2020-03-19 12:10:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1240491430402187264","blogRead":0,"blogTitle":"lesson-2.2 依赖倒置 (Dependency Inversion)","createdTime":"2020-03-19 12:12:58","typeName":"Spring 专题","updateTime":"2020-03-19 12:12:58"}],"pageSize":10,"params":{"typeId":""},"sortColumn":"","sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}
2020-03-19 13:14:22.251 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /blog/get/1240489759664103424
2020-03-19 13:14:22.252 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 13:14:22.252 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 13:14:22.252 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.BlogController.get
2020-03-19 13:14:22.253 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[1240489759664103424]
2020-03-19 13:14:22.329 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 78
2020-03-19 13:14:22.343 INFO  [http-nio-8001-exec-6]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"<h2 id=\"lesson-20-反射机制-reflection\" data-source-line=\"1\">lesson-2.0 反射机制 (Reflection)</h2>\n<h3 id=\"一-反射\" data-source-line=\"3\">一: 反射</h3>\n<p data-source-line=\"5\"><strong>JAVA 反射机制是在运行状态中:</strong></p>\n<ul data-source-line=\"6\">\n<li>对于任意一个类,都能够知道这个类的所有属性和方法;</li>\n<li>对于任意一个对象,都能够调用它的任意一个方法和属性;</li>\n<li>这种动态的获取信息以及调用对象的方法的功能称为 java 语言的反射机制;</li>\n</ul>\n<p data-source-line=\"10\"><strong>反射提供的功能:</strong></p>\n<ul data-source-line=\"11\">\n<li>在运行时判断任意一个对象所需的类</li>\n<li>在运行时构造任意一个类的对象</li>\n<li>在运行时判断任意一个类所具有的的成员变量和方法</li>\n<li>在运行时调用任意一个对象的方法</li>\n</ul>\n<p data-source-line=\"16\"><strong>反射具体加载过程</strong> <img src=\"file:///D:/%E6%9C%89%E9%81%93%E4%BA%91%E6%96%87%E4%BB%B6/qq464A73A6FE5266563C05A2260725DAB1/384b38e734b44a5a9c89f4851baeea96/clipboard.png?ynotemdtimestamp=1584590739806\" alt=\"image\" data-src=\"129D1CDB55284B79BD32008C5D11E63E\" data-ynote-src=\"129D1CDB55284B79BD32008C5D11E63E\" data-processed=\"129D1CDB55284B79BD32008C5D11E63E\" /></p>\n<p data-source-line=\"19\"><strong><em>简单实例:</em></strong></p>\n<ul data-source-line=\"20\">\n<li>首先定义一个Animal,里面定义一些构造函数,方法,变量:</li>\n</ul>\n<pre data-source-line=\"21\"><code class=\"hljs\"><span class=\"hljs-keyword\">package</span> xyz.fusheng.lesson1.reflection;\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Animal</span> </span>{\n    <span class=\"hljs-keyword\">public</span> String name=<span class=\"hljs-string\">\"Dog\"</span>;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> age = <span class=\"hljs-number\">30</span>;\n    <span class=\"hljs-comment\">// <span class=\"zh-hans\">默认无参构造函数</span></span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Animal</span><span class=\"hljs-params\">()</span> </span>{\n    }\n    <span class=\"hljs-comment\">// <span class=\"zh-hans\">带参数的构造函数</span></span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Animal</span><span class=\"hljs-params\">(String name, <span class=\"hljs-keyword\">int</span> age)</span></span>{\n        System.out.println(name+<span class=\"hljs-string\">\",\"</span>+age);\n    }\n    <span class=\"hljs-comment\">// <span class=\"zh-hans\">公开</span> <span class=\"zh-hans\">方法</span> <span class=\"zh-hans\">返回类型和参数均有</span></span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">sayName</span><span class=\"hljs-params\">(String name)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Hello,\"</span> + name;\n    }\n}\n</code></pre>\n<ul data-source-line=\"39\">\n<li>用反射的方法调用这个类:</li>\n</ul>\n<pre data-source-line=\"40\"><code class=\"hljs\"><span class=\"hljs-keyword\">package</span> xyz.fusheng.lesson1.reflection;\n<span class=\"hljs-keyword\">import</span> java.lang.reflect.Constructor;\n<span class=\"hljs-keyword\">import</span> java.lang.reflect.InvocationTargetException;\n<span class=\"hljs-keyword\">import</span> java.lang.reflect.Method;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Main1</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException</span>{\n        <span class=\"hljs-comment\">//1. <span class=\"zh-hans\">加载类</span>,<span class=\"zh-hans\">指定类的完全限定名</span>: <span class=\"zh-hans\">包名</span>+<span class=\"zh-hans\">类名</span></span>\n        Class c1 = Class.forName(<span class=\"hljs-string\">\"xyz.fusheng.lesson1.reflection.Animal\"</span>);\n        System.out.println(c1); <span class=\"hljs-comment\">//<span class=\"zh-hans\">打印</span> c1,<span class=\"zh-hans\">发现值和字节码中的类的名称一样</span></span>\n        <span class=\"hljs-comment\">//2. <span class=\"zh-hans\">获取</span>(<span class=\"zh-hans\">反射</span>)<span class=\"zh-hans\">类</span>c1<span class=\"zh-hans\">的公开构造函数</span>,<span class=\"zh-hans\">且参数为</span>null</span>\n        Constructor ctor1 = c1.getConstructor();\n        <span class=\"hljs-comment\">//3. <span class=\"zh-hans\">构造函数的用途</span>,<span class=\"zh-hans\">就是创建类的对象</span>(<span class=\"zh-hans\">实例</span>)</span>\n        <span class=\"hljs-comment\">//<span class=\"zh-hans\">除了私有的构造函数外</span>(<span class=\"zh-hans\">单例模式</span>,<span class=\"zh-hans\">禁止通过构造函数创建类的实例</span>,<span class=\"zh-hans\">保证每个类只有一个实例</span>)</span>\n        <span class=\"hljs-comment\">//ctor1.newInstance()<span class=\"zh-hans\">默认生成一个</span>Object<span class=\"zh-hans\">对象</span>,<span class=\"zh-hans\">我门需要转化成我们需要的</span>Animal<span class=\"zh-hans\">对象</span></span>\n        Animal a1 = (Animal)ctor1.newInstance();\n        <span class=\"hljs-comment\">//4. <span class=\"zh-hans\">通过反射调用</span>Animal<span class=\"zh-hans\">的方法</span></span>\n        Method method = c1.getMethod(<span class=\"hljs-string\">\"sayName\"</span>, String.class);\n        String name = (String) method.invoke(a1,<span class=\"hljs-string\">\"<span class=\"zh-hans\">兔兔</span>\"</span>);\n        System.out.println(name);\n        <span class=\"hljs-comment\">//5. <span class=\"zh-hans\">直接访问类中的方法</span></span>\n        System.out.println(a1.sayName(<span class=\"hljs-string\">\"<span class=\"zh-hans\">猫猫</span>\"</span>));\n        <span class=\"hljs-comment\">//6. <span class=\"zh-hans\">访问类中的变量</span></span>\n        System.out.println(a1.name);\n    }\n}\n</code></pre>\n<ul data-source-line=\"68\">\n<li>--&gt;</li>\n</ul>\n<pre data-source-line=\"69\"><code class=\"hljs\">class xyz<span class=\"hljs-selector-class\">.fusheng</span><span class=\"hljs-selector-class\">.lesson1</span><span class=\"hljs-selector-class\">.reflection</span><span class=\"hljs-selector-class\">.Animal</span>\nHello,<span class=\"zh-hans\">兔兔</span>\nHello,<span class=\"zh-hans\">猫猫</span>\nDog\n</code></pre>\n<ul data-source-line=\"75\">\n<li>反射大概步骤:</li>\n<li>1.通过 Class.forName(\"全类名\")拿到反射入口</li>\n<li>2.根据反射入口对象(Class)获取类的各种信息</li>\n<li>3.通过反射获取对象的实例,并操作对象</li>\n<li>4.在程序执行过程中,动态的决定调用的类,以及方法</li>\n</ul>","blogGoods":0,"blogId":"1240489759664103424","blogRead":0,"blogTitle":"lesson-2.0 反射机制 (Reflection)","blogType":14,"createdTime":"2020-03-19 12:06:19","version":2},"msg":"操作成功！"}
2020-03-19 13:14:37.437 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /admin/getAdmin
2020-03-19 13:14:37.437 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 13:14:37.438 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 13:14:37.438 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.AdminController.getAdmin
2020-03-19 13:14:37.439 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 13:14:37.528 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 91
2020-03-19 13:14:37.529 INFO  [http-nio-8001-exec-4]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"id":1,"name":"张浩","signature":"浮生若梦,为欢几何!","username":"admin"},"msg":"操作成功！"}
2020-03-19 13:14:40.439 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /user/getByPage
2020-03-19 13:14:40.441 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 13:14:40.441 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 13:14:40.441 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.UserController.getByPage
2020-03-19 13:14:40.442 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, index=0, list=[], params={}, sortColumn=, sortMethod=asc)]
2020-03-19 13:14:40.625 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 186
2020-03-19 13:14:40.629 INFO  [http-nio-8001-exec-5]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"index":0,"list":[{"createdTime":"2020-03-14 21:16:19","name":"测试用户2","nickname":"测试用户2","sex":1,"updateTime":"2020-03-14 21:16:19","userEmail":"0000000000qq.com","userId":5,"username":"user2"},{"createdTime":"2020-03-14 21:16:41","name":"测试用户3","nickname":"测试用户3","sex":2,"updateTime":"2020-03-14 21:16:41","userEmail":"0000000000qq.com","userId":6,"username":"user3"},{"createdTime":"2020-03-14 21:17:59","name":"测试用户4","nickname":"测试用户4","sex":2,"updateTime":"2020-03-14 21:17:59","userEmail":"222222222qq.com","userId":7,"username":"user4"},{"createdTime":"2020-03-14 21:23:51","name":"测试用户4","nickname":"测试用户4","sex":2,"updateTime":"2020-03-14 21:23:51","userEmail":"222222222qq.com","userId":8,"username":"user4"}],"pageSize":10,"params":{},"sortColumn":"","sortMethod":"asc","totalCount":4,"totalPage":1},"msg":"操作成功！"}
2020-03-19 13:15:47.583 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /type/getList
2020-03-19 13:15:47.584 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : GET
2020-03-19 13:15:47.585 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 13:15:47.585 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.TypeController.getList
2020-03-19 13:15:47.585 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[]
2020-03-19 13:15:47.596 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:113 -请求地址 : /user/getByPage
2020-03-19 13:15:47.597 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:114 -请求方式 : POST
2020-03-19 13:15:47.597 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:117 -IP : 127.0.0.1
2020-03-19 13:15:47.598 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:119 -方法 : xyz.fusheng.blog.controller.UserController.getByPage
2020-03-19 13:15:47.598 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.printRequestLog:121 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, index=0, list=[], params={}, sortColumn=, sortMethod=asc)]
2020-03-19 13:15:47.656 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 73
2020-03-19 13:15:47.657 INFO  [http-nio-8001-exec-7]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":[{"typeBlogCount":0,"typeId":13,"typeName":"个人博客开发文档"},{"typeBlogCount":0,"typeId":14,"typeName":"Spring 专题"},{"typeBlogCount":0,"typeId":15,"typeName":"Spring Boot 专题"},{"typeBlogCount":0,"typeId":16,"typeName":"Spring Cloud 专题"},{"typeBlogCount":0,"typeId":17,"typeName":"MyBatis 专题"},{"typeBlogCount":0,"typeId":18,"typeName":"Linux 专题"},{"typeBlogCount":0,"typeId":19,"typeName":"Security 专题"},{"typeBlogCount":0,"typeId":20,"typeName":"Docker 专题"}],"msg":"操作成功！"}
2020-03-19 13:15:48.767 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.doAround:68 -耗时 : 1171
2020-03-19 13:15:48.767 INFO  [http-nio-8001-exec-8]xyz.fusheng.blog.aspect.RequestAspect.doAfterReturning:82 -返回值:{"code":20000,"data":{"index":0,"list":[{"createdTime":"2020-03-14 21:16:19","name":"测试用户2","nickname":"测试用户2","sex":1,"updateTime":"2020-03-14 21:16:19","userEmail":"0000000000qq.com","userId":5,"username":"user2"},{"createdTime":"2020-03-14 21:16:41","name":"测试用户3","nickname":"测试用户3","sex":2,"updateTime":"2020-03-14 21:16:41","userEmail":"0000000000qq.com","userId":6,"username":"user3"},{"createdTime":"2020-03-14 21:17:59","name":"测试用户4","nickname":"测试用户4","sex":2,"updateTime":"2020-03-14 21:17:59","userEmail":"222222222qq.com","userId":7,"username":"user4"},{"createdTime":"2020-03-14 21:23:51","name":"测试用户4","nickname":"测试用户4","sex":2,"updateTime":"2020-03-14 21:23:51","userEmail":"222222222qq.com","userId":8,"username":"user4"}],"pageSize":10,"params":{},"sortColumn":"","sortMethod":"asc","totalCount":4,"totalPage":1},"msg":"操作成功！"}
